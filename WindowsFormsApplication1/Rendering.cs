using System;
using System.Collections.Generic;
using OpenTK.Graphics.OpenGL;
using OpenTK;
using Cloo;
using System.Runtime.InteropServices;
using System.Collections;

namespace abasilak
{
    public class MultiFragmentRendering
    {
        #region Private Properties

        // Samples
        bool    _enablePeelingError;
        float   _samples, _totalSamples;
        Query   _samplesQuery;
        Query   _samplesAnyQuery;

        // Peeling
        int  _layers;
        bool _closest;
        int  _passes, _total_passes;
        bool _useFront, _useMax;
        bool _useOcclusionCulling;

        // Transparency
        bool _transparent;
        bool _translucent;
        bool _correctAlpha;

        // Dynamic K
        int   _maxK;
        float _maxKerror;
        bool  _maxKfixed;
        int   _maxKmemory;

        //
        bool _coplanar;

        // Capping Properties
        float _cappingPlane;
        float _cappingAngle;

        // Trimming Dynamic - CSG
        int  _restPose;
        bool _zFighting;
        bool _redrawFather;

        // CSG Modeling
        bool                _csgModeling;
        int                 _csgModel_1, _csgModel_2;
        Texture             _csgTex_rule_old_1, _csgTex_rule_old_2;
        Rendering           _trimming_csg, _trimming_csg_Z;
        Texture             _tex_rule_old;
        FrameBuffer         _fbo_copy;
        Modes.CSG_Operation _csgOperation;

        #endregion

        #region Public Properties
        public bool useMax
        {
            get
            {
                return _useMax;
            }
            set
            {
                _useMax = value;
            }
        }
        public bool useFront
        {
            get
            {
                return _useFront;
            }
            set
            {
                _useFront = value;
            }
        }
        public int layers
        {
            get { return _layers; }
            set { _layers = value; }
        }
        public int passes
        {
            get { return _passes; }
            set { _passes = value; }
        }
        public int total_passes
        {
            get { return _total_passes; }
            set { _total_passes = value; }
        }
        public bool closest
        {
            get
            {
                return _closest;
            }
            set
            {
                _closest = value;
            }
        }
        public bool correctAlpha
        {
            get
            {
                return _correctAlpha;
            }
            set
            {
                _correctAlpha = value;
            }
        }
        public bool maxKfixed
        {
            get
            {
                return _maxKfixed;
            }
            set
            {
                _maxKfixed = value;
            }
        }
        public int maxK
        {
            get
            {
                return _maxK;
            }
            set
            {
                _maxK = value;
            }
        }
        public float maxKerror
        {
            get
            {
                return _maxKerror;
            }
            set
            {
                _maxKerror = value;
            }
        }
        public int maxKmemory
        {
            get
            {
                return _maxKmemory;
            }
            set
            {
                _maxKmemory = value;
            }
        }

        public bool transparent
        {
            get
            {
                return _transparent;
            }
            set
            {
                _transparent = value;
            }
        }
        public bool translucent
        {
            get
            {
                return _translucent;
            }
            set
            {
                _translucent = value;
            }
        }
        public Query samplesQuery
        {
            get
            {
                return _samplesQuery;
            }
            set
            {
                _samplesQuery = value;
            }
        }
        public Query samplesAnyQuery
        {
            get
            {
                return _samplesAnyQuery;
            }
            set
            {
                _samplesAnyQuery = value;
            }
        }
        public float cappingPlane
        {
            get
            {
                return _cappingPlane;
            }
            set
            {
                _cappingPlane = value;
            }
        }
        public float cappingAngle
        {
            get
            {
                return _cappingAngle;
            }
            set
            {
                _cappingAngle = value;
            }
        }
        public float samples
        {
            get
            {
                return _samples;
            }
            set
            {
                _samples = value;
            }
        }
        public float totalSamples
        {
            get
            {
                return _totalSamples;
            }
            set
            {
                _totalSamples = value;
            }
        }
        public bool enablePeelingError
        {
            get
            {
                return _enablePeelingError;
            }
            set
            {
                _enablePeelingError = value;
            }
        }
        public bool useOcclusionCulling
        {
            get
            {
                return _useOcclusionCulling;
            }
            set
            {
                _useOcclusionCulling = value;
            }
        }
        public bool coplanar
        {
            get
            {
                return _coplanar;
            }
            set
            {
                _coplanar = value;
            }
        }
        public int restPose
        {
            get
            {
                return _restPose;
            }
            set
            {
                _restPose = value;
            }
        }
        public bool zFighting
        {
            get { return _zFighting; }
            set { _zFighting = value; }
        }
        public bool redrawFather
        {
            get { return _redrawFather; }
            set { _redrawFather = value; }
        }
        public bool csgModeling
        {
            get { return _csgModeling; }
            set { _csgModeling = value; }
        }
        public int csgModel_1
        {
            get
            {
                return _csgModel_1;
            }
            set
            {
                _csgModel_1 = value;
            }
        }
        public int csgModel_2
        {
            get
            {
                return _csgModel_2;
            }
            set
            {
                _csgModel_2 = value;
            }
        }
        public FrameBuffer fbo_copy
        {
            get { return _fbo_copy; }
        }
        public Texture tex_rule_old
        {
            get
            {
                return _tex_rule_old;
            }
        }
        public Texture csgTex_rule_old_1
        {
            get
            {
                return _csgTex_rule_old_1;
            }
            set
            {
                _csgTex_rule_old_1 = value;
            }
        }
        public Texture csgTex_rule_old_2
        {
            get
            {
                return _csgTex_rule_old_2;
            }
            set
            {
                _csgTex_rule_old_2 = value;
            }
        }
        public Modes.CSG_Operation csgOperation
        {
            get
            {
                return _csgOperation;
            }
            set
            {
                _csgOperation = value;
            }
        }
        public Rendering trimming_csg
        {
            set { _trimming_csg = value; }
        }
        public Rendering trimming_csg_Z
        {
            set { _trimming_csg_Z = value; }
        }
        #endregion

        #region Constructor
        public MultiFragmentRendering()
        {
            _samplesQuery    = new Query(QueryTarget.SamplesPassed);
            _samplesAnyQuery = new Query(QueryTarget.AnySamplesPassed);

            _layers = 1;
            _passes = 0;
            _useFront = true;
            _useMax = false;
            _total_passes = 1;

            _closest = false;
            _transparent = false;
            _translucent = false;
            _correctAlpha = false;

            _maxK           = 64;
            _maxKerror      = 0;
            _maxKfixed      = false;
            _maxKmemory     = 200;           

            _coplanar = false;
            _enablePeelingError = false;
            _useOcclusionCulling = false;

            _cappingPlane = 0.0f;
            _cappingAngle = 10000.0f;

            _restPose = 1;
            _zFighting = false;
            _redrawFather = false;

            _csgModeling = false;
            _csgModel_1 = _csgModel_2 = -1;

            _csgOperation = Modes.CSG_Operation.NONE;
        }
        #endregion

        #region Delete Function
        public void delete()
        {
            _samplesQuery.delete();
            _samplesAnyQuery.delete();
#if CSG
            _csgTex_rule_old_1.delete();
            _csgTex_rule_old_2.delete();
            _tex_rule_old.delete();
            _fbo_copy.delete();

            _trimming_csg.delete();
            _trimming_csg_Z.delete();
#endif
        }
        #endregion

        #region Begin/End Query Samples
        public void beginSamplesQuery()
        {
            if (_samplesQuery.use)
                _samplesQuery.begin();
        }
        public void beginSamplesAnyQuery()
        {
            if (_samplesAnyQuery.use)
                _samplesAnyQuery.begin();
        }
        public void beginConditionalRenderQuery()
        {
            if (_samplesAnyQuery.use)
                _samplesAnyQuery.beginConditionalRender();
        }

        public bool endSamplesQuery()
        {
            if (_samplesQuery.use)
            {
                _samplesQuery.end();
                _samplesQuery.getResult();
                return _samplesQuery.isResultZero();
            }
            return false;
        }
        public bool endSamplesAnyQuery(bool conditional)
        {
            if (_samplesAnyQuery.use)
            {
                _samplesAnyQuery.end();
                if (!conditional)
                {
                    _samplesAnyQuery.getResult();
                    return _samplesAnyQuery.isResultZero();
                }
            }
            return false;
        }
        public void endConditionalRenderQuery()
        {
            if (_samplesAnyQuery.use)
                _samplesAnyQuery.endConditionalRender();
        }
        #endregion

        #region Compute Peeling Samples
        public void beginComputeTotalSamples()
        {
            if (_enablePeelingError && _samplesQuery.use)
            {
                Depth.disableTest();
                _samplesQuery.begin();
            }       
        }
        public void endComputeTotalSamples()
        {
            if (_enablePeelingError && _samplesQuery.use)
            {
                _samplesQuery.end();
                _samplesQuery.getResult();
                _totalSamples = _samplesQuery.samples;

                Depth.enableTest();
            }
        }

        public void beginComputePeelingSamples()
        {
            if (_enablePeelingError)
                _samples = 0;       
        }
        public void endComputePeelingSamples(ref Texture tex_color)
        {
            if (_enablePeelingError && _samplesQuery.use)
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);
                Depth.clear();

                _samplesQuery.begin();
                {
                    tex_color.draw();
                }
                _samplesQuery.end();
                _samplesQuery.getResult();
                _samples += _samplesQuery.samples;
            }
        }
        #endregion

        #region Compute Dynamic Trimming's Rest Pose
        public bool isRestPose(int selectedPose)
        {
            return ((selectedPose % _restPose == 0) || ((selectedPose + 1) % _restPose == 0));
        }
        public int getRestPose(int selectedPose)
        {
            return (selectedPose % _restPose == 0) ? selectedPose - 1 : (selectedPose / _restPose) * _restPose;
        }
        #endregion

        #region CSG

        #region TexRule_Copy Initing
        public void initTexRule_CopyRules()
        {
#if multisample
            _tex_rule_old = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_rule_old = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_rule_old.bind();
            _tex_rule_old.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_rule_old.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_rule_old.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_rule_old.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_rule_old.image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
#else
            _tex_rule_old.image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
#endif
            _tex_rule_old.unbind();

#if multisample
            _csgTex_rule_old_1 = new Texture(TextureTarget.Texture2DMultisample);
#else
            _csgTex_rule_old_1 = new Texture(TextureTarget.TextureRectangle);
#endif
            _csgTex_rule_old_1.bind();
            _csgTex_rule_old_1.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _csgTex_rule_old_1.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _csgTex_rule_old_1.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _csgTex_rule_old_1.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _csgTex_rule_old_1.image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
#else
            _csgTex_rule_old_1.image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
#endif
            _csgTex_rule_old_1.unbind();

#if multisample
            _csgTex_rule_old_2 = new Texture(TextureTarget.Texture2DMultisample);
#else
            _csgTex_rule_old_2 = new Texture(TextureTarget.TextureRectangle);
#endif
            _csgTex_rule_old_2.bind();
            _csgTex_rule_old_2.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _csgTex_rule_old_2.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _csgTex_rule_old_2.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _csgTex_rule_old_2.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _csgTex_rule_old_2.image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
#else
            _csgTex_rule_old_2.image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
#endif
            _csgTex_rule_old_2.unbind();

            _fbo_copy = new FrameBuffer();
            _fbo_copy.bind();
            _fbo_copy.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _csgTex_rule_old_1, 0);
            _fbo_copy.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _csgTex_rule_old_2, 0);
            _fbo_copy.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Draw Function
        public void csgDraw()
        {
            if (_csgModeling == true && _csgOperation != Modes.CSG_Operation.NONE)
            {
                if (!_zFighting) _trimming_csg.draw();
                else _trimming_csg_Z.draw();
            }
        }
        #endregion

        #region Copy Function
        public void csgCopyRule(int selectedPose)
        {
            if (_csgModeling && _csgOperation != Modes.CSG_Operation.NONE)
            {
                _fbo_copy.bind();
                if      (selectedPose == _csgModel_1) Buffer.draw(DrawBufferMode.ColorAttachment0);
                else if (selectedPose == _csgModel_2) Buffer.draw(DrawBufferMode.ColorAttachment1);
                else return;

                Buffer.clear(0, 0, 0, 0);

                Texture.copying.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_rule_old.bind();
                    Texture.image.draw();
                }
                Shading.close();
                FrameBuffer.unbind();
            }
        }
        #endregion

        #endregion

        #region Layers Is Zero
        public bool maxLayersIsZero()
        {
            //int MaxLayers = (Example._scene.meshAnimation.selectedPose == -1) ? Example._scene.meshAnimation.maxLayers : Example._scene.meshAnimation.pose.maxLayers;
            //if (_passes == MaxLayers)
              //  return true;
            return false;
        }
        #endregion
    }

    public abstract class Rendering
    {
        #region Protected Properties
        protected const float MB = 1.0f / (1024.0f * 1024.0f);
        protected float RES_MB = (float)Example._scene.width * Example._scene.height * MB;
        protected float _memory = 0.0f;
        protected int _multisamples;
        protected int _sizeMRT;
        protected int _sizeBucketCL;
        protected int _sizeArray;
        protected int _sizeHeap;
        protected int _iterationsK;
        protected float _peelingError;
        protected float _peelingMemory;
        protected int _sizeStencil;
        protected float _Density;
        protected float _Distribution;
        protected WeightSum _weightSum;
        protected AverageColors _averageColors;
        #endregion

        #region Public Properties
        public float memory
        {
            get { return _memory; }
        }
        public int   sizeArrayHeap
        {
            get { return _sizeHeap; }
        }
        public int   iterationsK
        {
            get { return _iterationsK; }
        }
        public float peelingPercentage
        {
            get { return _peelingError; }
        }
        #endregion 

        #region Constructors
        public Rendering()
        {
            _sizeHeap       = 8;
            _sizeArray      = _sizeHeap;
            _sizeStencil    = _sizeHeap > 32 ? 32 : _sizeHeap;
            _sizeBucketCL   = _sizeHeap > 32 ? _sizeHeap : 32;

            GL.GetInteger(GetPName.MaxColorAttachments, out _sizeMRT);
            //_sizeMRT = 8;

            _Density        = 0.75f;
            _Distribution   = 0.75f;
            _multisamples   = 8; // allagi k sta transparency, thickness
            
            //GL.GetInteger(GetPName.MaxSamples, out _multisamples);
            //GL.GetInteger(GetPName.MaxDepthTextureSamples, out _multisamples);
            
        }
        #endregion

        #region Abstract Functions

        #region Buffer Functions
        protected abstract void initBuffers();
        protected abstract void clearBuffers();
        #endregion

        #region Shader Functions
        protected abstract void initShaders();
        #endregion

        #region Delete Functions
        public abstract void delete();
        #endregion 
        
        #region Draw Functions
        public abstract void draw();
        #endregion

        #endregion
    }

    #region Rendering Inherited Classes

    public class Illumination : Rendering
    {
        #region Private Properties

        Shading _rendering;
        Shading _renderingRegions;

        Texture _tex_color;
        Texture _tex_depth;
        FrameBuffer _fbo_color;

        #endregion

        #region Constructors
        public Illumination() : base()
        {
            _weightSum     = Example._scene.weightSumSimple;
            _averageColors = Example._scene.averageColors;

            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _rendering.delete();
            _renderingRegions.delete();
            _tex_color.delete();
            _tex_depth.delete();
            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color.unbind();

#if multisample
            _tex_depth = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_depth = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_depth.bind();
#if multisample
            _tex_depth.image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_depth.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_depth.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);

            Depth.clear();
            Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            // Render Model
            {
                _rendering = new Shading();
                _rendering.create();

                if(Example._scene.tessellation)
                {
                    _rendering.attachShader(Example._scene.renderVertexTess.id);            
                    _rendering.attachShader(Example._scene.renderTessellationControl.id);
                    _rendering.attachShader(Example._scene.renderTessellationEvaluation.id);
                }
                else
                  _rendering.attachShader(Example._scene.renderVertex.id);

                _rendering.attachShader(Example._scene.renderGeometry.id);
                _rendering.attachShader(Example._scene.phongFragment.id);
                _rendering.attachShader(Example._scene.computePixelColor.id);
                _rendering.attachShader(Example._scene.renderFragment.id);
                _rendering.link();

                _rendering.use();
                {
                    _rendering.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                    _rendering.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                    _rendering.bindUniform1("width", Example._scene.width);
                }
                Shading.close();
            }
            // Render Cluster Regions
            {
                _renderingRegions = new Shading();
                _renderingRegions.create();
                _renderingRegions.attachShader(Example._scene.renderVertexRegions.id);
                _renderingRegions.attachShader(Example._scene.renderGeometryRegions.id);
                _renderingRegions.attachShader(Example._scene.renderFragmentRegions.id);
                _renderingRegions.link();

                _renderingRegions.use();
                {
                    _renderingRegions.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                }
                Shading.close();
            }
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif 
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.computeTranslucency();
            
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
            {
                // First Pass
                {
                    Example._scene.updateShaders(ref _rendering);

                    _fbo_color.bind();
                    Depth.clear();
                    Buffer.draw(DrawBufferMode.ColorAttachment0);
                    Buffer.clear(0, 0, 0, 0);
                    
                    _rendering.use();
                    {
                        if (Example._scene.tessellation)
                        {
                            _rendering.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _rendering.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }
                        Example._scene.meshAnimation.drawModels(ref _rendering, true, true);
                    }
                    Shading.close();
                }

                Shading transparencing;
                if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                {
                    transparencing = _weightSum.initing;
                    _weightSum.clearBuffers();
                }
                else
                {
                    transparencing = _averageColors.initing;
                    _averageColors.clearBuffers();
                }
                Example._scene.updateShaders(ref transparencing);

                Blend.equation(BlendEquationMode.FuncAdd);
                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.enable();

                Depth.disableTest();
                Depth.setMask(false);

                transparencing.use();
                {
                    if (Example._scene.tessellation)
                    {
                        transparencing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        transparencing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }

                    Example._scene.meshAnimation.drawModels(ref transparencing, true, false);

                    // Draw clustering (Perform offseting at camera z-near to avoid Z-fighting artifacts)
                    //Example._scene.camera.load_projection_matrix(Example._scene.meshAnimation.min, Example._scene.meshAnimation.max, true);
                    //Example._scene.camera.update();
                    //Example._scene.meshAnimation.drawClustering(ref _renderingRegions);
                }
                Shading.close();

                //_tex_color.draw();

                Depth.enableTest();
                Depth.setMask(true);
                Blend.disable();

                if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                else
                    _averageColors.draw(Example._scene.useBackgroundTexture);
            }
            // Rendering
            else
            {
                clearBuffers();

                // Draw Models
                Example._scene.multiFragmentRendering.beginComputeTotalSamples();
                {
                    Example._scene.updateShaders(ref _rendering);
                    _rendering.use();
                    {
                        if (Example._scene.tessellation)
                        {
                            _rendering.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _rendering.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }
                        Example._scene.meshAnimation.drawModels(ref _rendering, true, false);
                    }
                    Shading.close();
                }
                Example._scene.multiFragmentRendering.endComputeTotalSamples();

                // Draw AABBs 
                Example._scene.meshAnimation.drawAABBs();

                // Draw Convex Hulls 
                Example._scene.meshAnimation.drawConvexHulls();

                // Draw clustering (Perform offseting at camera z-near to avoid Z-fighting artifacts)
#if !peel
                Example._scene.camera.load_projection_matrix(Example._scene.meshAnimation.min, Example._scene.meshAnimation.max, true);
                Example._scene.camera.update();
                Example._scene.meshAnimation.drawClustering(ref _renderingRegions);
#endif
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
        }
        #endregion
    }

    public abstract class Peeling : Rendering
    {
        #region Protected Properties
        protected int _currID, _prevID;
        #endregion

        #region Constructors
        public Peeling() : base() {;}
        #endregion 

        #region Abstract Functions
        protected abstract bool peel_depth();
        protected abstract void peel_color();
        protected abstract void peel_culling();
        protected abstract void blending_depth();
        protected abstract void draw_final();
        #endregion
    }

    #region Peeling Inherited Classes

#if peel

    #region F2B Algorithms

#if F2B
    
    public class F2B : Peeling
    {
        #region Private Properties

        Shader        _peeler, _peeler_occlusion;
        Shading       _peeling, _peeling_occlusion;

        Texture       _tex_color;
        Texture[]     _tex_depth = new Texture[2];
        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        #endregion

        #region Constructor
        public F2B() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion
        
        #region Delete Function
        public override void delete()
        {
            for(int i = 0; i<2; i++)
            {
                _fbo_peel[i].delete();
                _tex_depth[i].delete();
            }
            _tex_color.delete();
            _peeler.delete();
            _peeling.delete();
        }
        #endregion 

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create FrameBuffer 
                _fbo_peel[i] = new FrameBuffer();
                _fbo_peel[i].bind();
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.DepthAttachment , ref _tex_depth[i], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color   , 0);
                _fbo_peel[i].checkStatus();
                FrameBuffer.unbind();
            }
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler=new Shader("peeling/f2b/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling=new Shading();
            _peeling.create();

            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);          
            }
            Shading.close();

            _peeler_occlusion = new Shader("peeling/f2b/peel_occlusion", ShaderType.FragmentShader);
            _peeler_occlusion.complile(ShaderType.FragmentShader);

            _peeling_occlusion = new Shading();
            _peeling_occlusion.create();
            _peeling_occlusion.attachShader(Example._scene.renderVertex.id);
            _peeling_occlusion.attachShader(Example._scene.renderGeometry.id);
            _peeling_occlusion.attachShader(Example._scene.computePixelColor.id);
            _peeling_occlusion.attachShader(_peeler_occlusion.id);
            _peeling_occlusion.link();

            _peeling_occlusion.use();
            {
                _peeling_occlusion.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion 

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S=false;

            FPS.beginLocal();
            {
                _fbo_peel[_currID].bind();
                Depth.clear();

                Buffer.draw(DrawBufferMode.ColorAttachment0);
                if (!Example._scene.multiFragmentRendering.transparent) Buffer.clear(Example._scene.backgroundColor);
                else Buffer.clear(0, 0, 0, 0);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling.use();
                    {
                        if (Example._scene.tessellation)
                        {
                            _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }

                        if (Example._scene.multiFragmentRendering.passes > 0)
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                        }

                        if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        else
                        {
                            foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                            {
                                // Conditional Rendering
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                                {
                                    Example._scene.meshAnimation.updateShaders(ref _peeling, Pose, true);
                                    Pose.draw();
                                }
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].endConditionalRender();
                            }
                        }
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(false);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling");

            // Occlusion Peeling
            if (Example._scene.multiFragmentRendering.useOcclusionCulling)
                peel_culling();

            return S;
        }
        protected override void peel_culling()
        {
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                _peeling_occlusion.use();
                {
                    Texture.active(TextureUnit.Texture0);
                    _tex_depth[_currID].bind();

                    foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                    {
                        if (Example._scene.multiFragmentRendering.passes > 0)
                            Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                        Pose.samplesAnyQuery[_currID].begin();
                        {
                            Example._scene.meshAnimation.updateShaders(ref _peeling_occlusion, Pose, false);
                            Pose.aabb.drawElementsLite();
                        }
                        Pose.samplesAnyQuery[_currID].end();
                        if (Example._scene.multiFragmentRendering.passes > 0)
                            Pose.samplesAnyQuery[_prevID].endConditionalRender();
                    }
                }
                Shading.close();

                Depth.enableTest();
                Depth.setMask(true);
                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". BB Occlusion Peeling");        
        }
        #endregion

        #region Drawing Functions
        public    override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent) 
                Example._scene.meshAnimation.pose.initTranslucency();

            // *. Peeling Samples - Begin
            Example._scene.multiFragmentRendering.beginComputePeelingSamples();

            // 0. Rendering
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (Example._scene.multiFragmentRendering.passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.passes++;

                    // *. Peeling Samples - End
                    Example._scene.multiFragmentRendering.endComputePeelingSamples(ref _tex_color);
                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent)
                        _weightSum.compute(_tex_color);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                        Example._scene.meshAnimation.pose.computeF2BTranslucency(ref _tex_depth[_currID], ref _tex_color);
                }
                else
                    break;
            }

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        #endregion
    }
   
    public class F2B2 : Peeling
    {
        #region Private Properties

        Shader _peeler_depth, _peeler_color;
        Shading _peeling_depth, _peeling_color;

        Shader _peeler_occlusion;
        Shading _peeling_occlusion;

        Texture _tex_color;

        Texture[] _tex_depth = new Texture[2];
        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        #endregion

        #region Constructor
        public F2B2() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
            {
                _fbo_peel[i].delete();
                _tex_depth[i].delete();
            }
            _tex_color.delete();
            
            _peeler_depth.delete();
            _peeling_depth.delete();
            _peeler_color.delete();
            _peeling_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create FrameBuffer 
                _fbo_peel[i] = new FrameBuffer();
                _fbo_peel[i].bind();
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth[i], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
                _fbo_peel[i].checkStatus();
                FrameBuffer.unbind();
            }
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler_depth = new Shader("peeling/f2b2/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_peeling_color Shader
            _peeler_color = new Shader("peeling/f2b2/peel_color", ShaderType.FragmentShader);
            _peeler_color.complile(ShaderType.FragmentShader);

            _peeling_color = new Shading();
            _peeling_color.create();
            _peeling_color.attachShader(Example._scene.renderVertex.id);
            _peeling_color.attachShader(Example._scene.renderGeometry.id);
            _peeling_color.attachShader(Example._scene.phongFragment.id);
            _peeling_color.attachShader(Example._scene.computePixelColor.id);
            _peeling_color.attachShader(_peeler_color.id);
            _peeling_color.link();

            _peeling_color.use();
            {
                _peeling_color.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_color.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peeler_occlusion = new Shader("peeling/f2b/peel_occlusion", ShaderType.FragmentShader);
            _peeler_occlusion.complile(ShaderType.FragmentShader);

            _peeling_occlusion = new Shading();
            _peeling_occlusion.create();
            _peeling_occlusion.attachShader(Example._scene.renderVertex.id);
            _peeling_occlusion.attachShader(Example._scene.renderGeometry.id);
            _peeling_occlusion.attachShader(Example._scene.computePixelColor.id);
            _peeling_occlusion.attachShader(_peeler_occlusion.id);
            _peeling_occlusion.link();

            _peeling_occlusion.use();
            {
                _peeling_occlusion.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S = false;
            FPS.beginLocal();
            {
                _fbo_peel[_currID].bind();
                Depth.clear();
                Buffer.setMask(false, false, false, false);
                Buffer.draw(DrawBufferMode.None);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        if (Example._scene.multiFragmentRendering.passes > 0)
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                        }

                        if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                            Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                        else
                        {
                            foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                            {
                                // Conditional Rendering
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                                {
                                    Example._scene.meshAnimation.updateShaders(ref _peeling_depth, Pose, false);
                                    Pose.draw();
                                }
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].endConditionalRender();
                            }
                        }
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            // Occlusion Peeling
            if (Example._scene.multiFragmentRendering.useOcclusionCulling)
                peel_culling();

            return S;
        }
        protected override void peel_culling()
        {
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                _peeling_occlusion.use();
                {
                    Texture.active(TextureUnit.Texture0);
                    _tex_depth[_currID].bind();

                    foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                    {
                        if (Example._scene.multiFragmentRendering.passes > 0)
                            Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                        Pose.samplesAnyQuery[_currID].begin();
                        {
                            Example._scene.meshAnimation.updateShaders(ref _peeling_occlusion, Pose, false);
                            Pose.aabb.drawElementsLite();
                        }
                        Pose.samplesAnyQuery[_currID].end();
                        if (Example._scene.multiFragmentRendering.passes > 0)
                            Pose.samplesAnyQuery[_prevID].endConditionalRender();
                    }
                }
                Shading.close();

                Depth.enableTest();
                Depth.setMask(true);
                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". BB Occlusion Culling");
        }
        protected override void peel_color()
        {
            FPS.beginLocal();
            {
                Depth.func(DepthFunction.Equal);
                Depth.setMask(false);

                Buffer.draw(DrawBufferMode.ColorAttachment0);

                if (!Example._scene.multiFragmentRendering.transparent) Buffer.clear(Example._scene.backgroundColor);
                else Buffer.clear(0, 0, 0, 0);

                _peeling_color.use();
                {
                    if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                        Example._scene.meshAnimation.drawModels(ref _peeling_color, true, false);
                    else
                    {
                        foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                        {
                            // Conditional Rendering
                            Pose.samplesAnyQuery[_currID].beginConditionalRender();
                            {
                                Example._scene.meshAnimation.updateShaders(ref _peeling_color, Pose, true);
                                Pose.draw();
                            }
                            Pose.samplesAnyQuery[_currID].endConditionalRender();
                        }
                    }
                }
                Shading.close();

                Depth.func(DepthFunction.Lequal);
                Depth.setMask(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");
        }
        #endregion

        #region Drawing Functions
        public    override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // *. Peeling Samples - Begin
            Example._scene.multiFragmentRendering.beginComputePeelingSamples();

            // 0. Rendering
            Example._scene.updateShaders(ref _peeling_color);
            Example._scene.multiFragmentRendering.passes = 0;
            while (Example._scene.multiFragmentRendering.passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.passes++;

                    // Conditional Rendering
                    if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                        Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                        Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    // *. Peeling Samples - End
                    Example._scene.multiFragmentRendering.endComputePeelingSamples(ref _tex_color);

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent)
                        _weightSum.compute(_tex_color);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                        Example._scene.meshAnimation.pose.computeF2BTranslucency(ref _tex_depth[_currID], ref _tex_color);

                    if (Example._scene.multiFragmentRendering.maxLayersIsZero())
                        break;
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes * 2;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Buffer.clear(0, 0, 0, 0);
                    Depth.clear();
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");       
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        #endregion
    }

    public class F2B_3P_Max : Peeling
    {
        #region Private Properties

        Shader        _peeler_depth, _peeler_color, _blender;
        Shading       _peeling_depth, _peeling_color, _blending;

        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        Texture       _tex_color;
        Texture[]     _tex_depth  = new Texture[2];

#if draw_buffers_blend
        Texture[] _tex_count = new Texture[2];
        Texture[] _tex_id = new Texture[2];
#else
        Texture[] _tex_blend = new Texture[2];
#endif
        #endregion

        #region Constructor
        public F2B_3P_Max() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }       
        #endregion

        #region Delete Function
        public override void delete()
        {
            _tex_color.delete();
            for(int i = 0; i<2; i++)
            {
                _fbo_peel[i].delete();
                _tex_depth[i].delete();
            }
            _peeler_depth.delete();
            _peeler_color.delete();
            _peeling_depth.delete();
            _peeling_color.delete();
            _blender.delete();
            _blending.delete();
            for(int i = 0; i<2; i++)
            {
#if draw_buffers_blend
                _tex_count[i].delete();
                _tex_id[i].delete();
#else
                _tex_blend[i].delete();
#endif
            }
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color=new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory+=RES_MB*4;
#endif
            _tex_color.unbind();

            for(int i = 0; i<2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i]=new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory+=RES_MB*4;
#endif
                _tex_depth[i].unbind();
            }
            
            for (int i = 0; i < 2; i++)
            {
                // Create Blend Textures
#if draw_buffers_blend
                // .r = number of fragments at Zi
#if multisample
                _tex_count[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_count[i]=new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_count[i].bind();
                _tex_count[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_count[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_count[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
                _memory+=RES_MB*4;
#endif
                _tex_count[i].unbind();
                // .r = max primitive id
#if multisample
                _tex_id[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_id[i]=new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_id[i].bind();
                _tex_id[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_id[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_id[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_id[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
                _memory+=RES_MB*4;
#endif
                _tex_id[i].unbind();
#else
                // .r = max primitive id
                // .a = number of fragments at Zi
                
#if multisample
                _tex_blend[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend[i].bind();
                _tex_blend[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_blend[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend[i].unbind();
#endif
            }

            for (int i = 0; i < 2; i++)
            {
                // Create Depth FrameBuffer 
                _fbo_peel[i] = new FrameBuffer();
                _fbo_peel[i].bind();
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.DepthAttachment , ref _tex_depth[i], 0);
#if draw_buffers_blend
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_id[0], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_count[0], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_id[1], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_count[1], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_color   , 0);
#else

                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blend[i], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blend[1], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_color   , 0);
#endif           
                _fbo_peel[i].checkStatus();
            }
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_peel[0].bind();
#if draw_buffers_blend
            Buffer.setMask(0, true, false, false, false);
            Buffer.setMask(1, true, false, false, false);
            Buffer.setMask(2, true, false, false, false);
            Buffer.setMask(3, true, false, false, false);

            Buffer.draw(4, 0);
            Buffer.clear(0, 0, 0, 0);
            
            Buffer.setMask(0, true, true, true, true);
            Buffer.setMask(1, true, true, true, true);
            Buffer.setMask(2, true, true, true, true);
            Buffer.setMask(3, true, true, true, true);
#else
            Buffer.setMask(0, true, false, false, true);
            Buffer.setMask(1, true, false, false, true);

            Buffer.draw(2, 0);
            Buffer.clear(0, 0, 0, 0);

            Buffer.setMask(0, true, true, true, true);
            Buffer.setMask(1, true, true, true, true);
#endif
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            //--- f2b_Z_peeling_depth
            _peeler_depth=new Shader("peeling/f2b_3p/max/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth=new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();         

            //--- f2b_Z_peeling_color Shader
            _peeler_color = new Shader("peeling/f2b_3p/max/peel_color", ShaderType.FragmentShader);
            _peeler_color.complile(ShaderType.FragmentShader);
            
            _peeling_color=new Shading();
            _peeling_color.create();
            _peeling_color.attachShader(Example._scene.renderVertex.id);
            _peeling_color.attachShader(Example._scene.renderGeometry.id);
            _peeling_color.attachShader(Example._scene.phongFragment.id);
            _peeling_color.attachShader(Example._scene.computePixelColor.id);
            _peeling_color.attachShader(_peeler_color.id);
            _peeling_color.link();

            _peeling_color.use();
            {
                _peeling_color.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_color.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_blending Shader
            _blender = new Shader("peeling/f2b_3p/max/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending=new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion 
        
        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                _fbo_peel[_currID].bind();
                Depth.clear();
                Buffer.setMask(false, false, false, false);
                Buffer.draw(DrawBufferMode.None);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        if (Example._scene.multiFragmentRendering.passes > 0)
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                            Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                            _tex_count[_prevID].bind();
#else
                            _tex_blend[_prevID].bind();
#endif
                        }
                        Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            return S;
        }
        protected override void blending_depth()
        {
            FPS.beginLocal();
            {
                Depth.func(DepthFunction.Equal);
                Depth.setMask(false);

#if draw_buffers_blend
                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);

                Blend.equation(2 * _currID    , BlendEquationMode.Max);
                Blend.func    (2 * _currID + 1, BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(2 * _currID + 1, BlendEquationMode.FuncAdd);
            
                Buffer.draw   (2, 2 * _currID);
                Buffer.setMask(2 * _currID    , true, false, false, false);
                Buffer.setMask(2 * _currID + 1, true, false, false, false);

                //Buffer.clear(ClearBuffer.Color, 2 * _currID    , new float[4] { 0, 0, 0, 0 });
                //Buffer.clear(ClearBuffer.Color, 2 * _currID + 1, new float[4] { 0, 0, 0, 0 });
                Buffer.clear(0, 0, 0, 0);
#else
                Blend.enable(0);
                Blend.enable(1);
                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equationSeparate(BlendEquationMode.Max, BlendEquationMode.FuncAdd);

                Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
                Buffer.setMask(_currID, true, false, false, true);
                Buffer.clear(0, 0, 0, 0);
#endif
                _blending.use();
                {
                    Texture.active(TextureUnit.Texture0);
#if draw_buffers_blend
                    _tex_count[_prevID].bind();
                    Texture.active(TextureUnit.Texture1);
                    _tex_id[_prevID].bind();
#else
                    _tex_blend[_prevID].bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _blending, false, false);
                }
                Shading.close();

#if draw_buffers_blend
                Buffer.setMask(2 * _currID    , true, true, true, true);
                Buffer.setMask(2 * _currID + 1, true, true, true, true);

                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);
#else
                Buffer.setMask(_currID, true, true, true, true);

                Blend.disable(0);
                Blend.disable(1);
#endif
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Blending");
        }
        protected override void peel_color()
        {
            FPS.beginLocal();
            {
                // For Wireframe Rendering on SELECTED MODEL //
                if (Example._scene.meshAnimation.selectedPose != -1 && Example._scene.meshAnimation.pose.wireframe)
                    Depth.disableTest();

#if draw_buffers_blend
                Buffer.draw(DrawBufferMode.ColorAttachment4);
#else
                Buffer.draw(DrawBufferMode.ColorAttachment2);
#endif
                if (!Example._scene.multiFragmentRendering.transparent) Buffer.clear(Example._scene.backgroundColor);
                else Buffer.clear(0, 0, 0, 0);

                _peeling_color.use();
                {
                    Texture.active(TextureUnit.Texture0);
#if draw_buffers_blend
                    _tex_id[_currID].bind();
#else
                    _tex_blend[_currID].bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _peeling_color, true, false);
                }
                Shading.close();

                Depth.enableTest();
                Depth.func(DepthFunction.Lequal);
                Depth.setMask(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");
        }
        #endregion 

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // *. Peeling Samples - Begin
            Example._scene.multiFragmentRendering.beginComputePeelingSamples();

            // 0. Rendering
            clearBuffers();
            Example._scene.multiFragmentRendering.passes = 0;
            Example._scene.updateShaders(ref _peeling_color);
            while (Example._scene.multiFragmentRendering.passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.passes++;

                    // Conditional Rendering
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        blending_depth();
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    // *. Peeling Samples - End
                    Example._scene.multiFragmentRendering.endComputePeelingSamples(ref _tex_color);

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent)
                        _weightSum.compute(_tex_color);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                        Example._scene.meshAnimation.pose.computeF2BTranslucency(ref _tex_depth[_currID], ref _tex_color);
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 3 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion 

        #region Empty Functions
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class F2B_3P_MinMax : Peeling
    {
        #region Private Properties

        Shader _peeler_depth, _peeler_color, _blender;
        Shading _peeling_depth, _peeling_color, _blending;

        Shader _peeler_occlusion;
        Shading _peeling_occlusion;

        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        Texture   _tex_color_min, _tex_color_max;
        Texture[] _tex_depth = new Texture[2];
#if draw_buffers_blend
        Texture[] _tex_count = new Texture[2];
        Texture[] _tex_id    = new Texture[2];
#else
        Texture[] _tex_blend = new Texture[2];
#endif

        #endregion

        #region Constructor
        public F2B_3P_MinMax() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _tex_color_min.delete();
            _tex_color_max.delete();
            for (int i = 0; i < 2; i++)
            {
                _fbo_peel[i].delete();
                _tex_depth[i].delete();
#if draw_buffers_blend
                _tex_count[i].delete();
                _tex_id[i].delete();
#else
                _tex_blend[i].delete();
#endif
            }
            _peeler_depth.delete();
            _peeler_color.delete();
            _blender.delete();

            _peeling_depth.delete();
            _peeling_color.delete();
            _blending.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color_min = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_min = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_min.bind();
            _tex_color_min.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_min.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_min.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_min.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_min.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_min.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_min.unbind();

#if multisample
            _tex_color_max = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_max = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_max.bind();
            _tex_color_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color_max.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_max.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_max.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create Blend Textures
#if draw_buffers_blend
                // .r = number of fragments at Zi
#if multisample
                _tex_count[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_count[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_count[i].bind();
                _tex_count[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_count[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_count[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_count[i].unbind();
                // .r = max primitive id
#if multisample
                _tex_id[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_id[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_id[i].bind();
                _tex_id[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_id[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_id[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_id[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_id[i].unbind();
#else
                // .rg = min,max primitive ids 
                // .a  = number of fragments at Zi
#if multisample
                _tex_blend[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend[i].bind();
                _tex_blend[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_blend[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend[i].unbind();
#endif
            }

            for (int i = 0; i < 2; i++)
            {
                _fbo_peel[i] = new FrameBuffer();
                _fbo_peel[i].bind();
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth[i], 0);
#if draw_buffers_blend
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_id[0]   , 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_count[0], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_id[1]   , 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_count[1], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_color_min, 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_color_max, 0);
#else
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blend[0], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blend[1], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_color_min, 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_color_max, 0);
#endif                
                _fbo_peel[i].checkStatus();
            }
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
#if draw_buffers_blend
            _fbo_peel[0].bind();

            Buffer.setMask(0, true, true , false, false);
            Buffer.setMask(1, true, false, false, false);
            Buffer.setMask(2, true, true , false, false);
            Buffer.setMask(3, true, false, false, false);

            Buffer.draw(4, 0);
            Buffer.clear(0, 0, 0, 0);

            Buffer.setMask(0, true, true, true, true);
            Buffer.setMask(1, true, true, true, true);
            Buffer.setMask(2, true, true, true, true);
            Buffer.setMask(3, true, true, true, true);
#else
            _fbo_peel[0].bind();
            Buffer.setMask(0, true, true, false, true);
            Buffer.setMask(1, true, true, false, true);
            
            Buffer.draw(2,0);
            Buffer.clear(0, 0, 0, 0);

            Buffer.setMask(0, true, true, true, true);
            Buffer.setMask(1, true, true, true, true);
#endif
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler_occlusion = new Shader("peeling/f2b/peel_occlusion", ShaderType.FragmentShader);
            _peeler_occlusion.complile(ShaderType.FragmentShader);

            _peeling_occlusion = new Shading();
            _peeling_occlusion.create();
            _peeling_occlusion.attachShader(Example._scene.renderVertex.id);
            _peeling_occlusion.attachShader(Example._scene.renderGeometry.id);
            _peeling_occlusion.attachShader(Example._scene.computePixelColor.id);
            _peeling_occlusion.attachShader(_peeler_occlusion.id);
            _peeling_occlusion.link();

            _peeling_occlusion.use();
            {
                _peeling_occlusion.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_peeling_depth
            _peeler_depth=new Shader("peeling/f2b_3p/min_max/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_peeling_color Shader
            _peeler_color = new Shader("peeling/f2b_3p/min_max/peel_color", ShaderType.FragmentShader);
            _peeler_color.complile(ShaderType.FragmentShader);

            _peeling_color = new Shading();
            _peeling_color.create();
            _peeling_color.attachShader(Example._scene.renderVertex.id);
            _peeling_color.attachShader(Example._scene.renderGeometry.id);
            _peeling_color.attachShader(Example._scene.phongFragment.id);
            _peeling_color.attachShader(Example._scene.computePixelColor.id);
            _peeling_color.attachShader(_peeler_color.id);
            _peeling_color.link();

            _peeling_color.use();
            {
                _peeling_color.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_color.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_blending Shader
            _blender = new Shader("peeling/f2b_3p/min_max/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                _fbo_peel[_currID].bind();
                Depth.clear();
                Buffer.setMask(false, false, false, false);
                Buffer.draw(DrawBufferMode.None);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        if (Example._scene.multiFragmentRendering.passes > 0)
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                            Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                            _tex_count[_prevID].bind();
#else
                            _tex_blend[_prevID].bind();
#endif
                        }

                        if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                            Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                        else
                        {
                            foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                            {
                                // Conditional Rendering
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                                {
                                    Example._scene.meshAnimation.updateShaders(ref _peeling_depth, Pose, false);
                                    Pose.draw();
                                }
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].endConditionalRender();
                            }
                        }
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            if (Example._scene.multiFragmentRendering.useOcclusionCulling)
                peel_culling();

            return S;
        }
        protected override void peel_culling()
        {
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                _peeling_occlusion.use();

                Texture.active(TextureUnit.Texture0);
                _tex_depth[_currID].bind();

                foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                {
                    if (Example._scene.multiFragmentRendering.passes > 0)
                        Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                    Pose.samplesAnyQuery[_currID].begin();
                    {
                        Example._scene.meshAnimation.updateShaders(ref _peeling_occlusion, Pose, false);
                        Pose.aabb.drawElementsLite();
                    }
                    Pose.samplesAnyQuery[_currID].end();
                    if (Example._scene.multiFragmentRendering.passes > 0)
                        Pose.samplesAnyQuery[_prevID].endConditionalRender();
                }
                Shading.close();

                Depth.enableTest();
                Depth.setMask(true);
                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". BB Occlusion Culling");
        }
        protected override void blending_depth()
        {
            FPS.beginLocal();
            {
                Depth.func(DepthFunction.Equal);
                Depth.setMask(false);

#if draw_buffers_blend
                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);

                Blend.equation(2 * _currID    , BlendEquationMode.Max);
                Blend.func    (2 * _currID + 1, BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(2 * _currID + 1, BlendEquationMode.FuncAdd);
            
                Buffer.setMask(2 * _currID    , true, true , false, false);
                Buffer.setMask(2 * _currID + 1, true, false, false, false);

                Buffer.draw(DrawBufferMode.ColorAttachment0 + 2 * _currID);
                Buffer.clear(float.MinValue, 0, 0, 0);
                Buffer.draw(DrawBufferMode.ColorAttachment1 + 2 * _currID);
                Buffer.clear(0, 0, 0, 0);

                Buffer.draw(2, 2 * _currID);
#else
                Blend.enable(0);
                Blend.enable(1);
                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equationSeparate(BlendEquationMode.Max, BlendEquationMode.FuncAdd);

                Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
                Buffer.setMask(_currID, true, true, false, true);
                Buffer.clear(float.MinValue, 0, 0, 0);
#endif
                _blending.use();
                {
                    Texture.active(TextureUnit.Texture0);
#if draw_buffers_blend
                    _tex_count[_prevID].bind();
                    Texture.active(TextureUnit.Texture1);
                    _tex_id[_prevID].bind();
#else
                    _tex_blend[_prevID].bind();
#endif
                    if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                        Example._scene.meshAnimation.drawModels(ref _blending, true, false);
                    else
                    {
                        foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                        {
                            // Conditional Rendering
                            Pose.samplesAnyQuery[_currID].beginConditionalRender();
                            {
                                Example._scene.meshAnimation.updateShaders(ref _blending, Pose, true);
                                Pose.draw();
                            }
                            Pose.samplesAnyQuery[_currID].endConditionalRender();
                        }
                    }
                }
                Shading.close();

#if draw_buffers_blend
                Buffer.setMask(2 * _currID    , true, true, true, true);
                Buffer.setMask(2 * _currID + 1, true, true, true, true);
#else
                Buffer.setMask(_currID, true, true, true, true);
#endif
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Blending");
        }
        protected override void peel_color()
        {
            FPS.beginLocal();
            {
#if draw_buffers_blend
                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);
                Blend.enable(4);
                Blend.enable(5);

                Buffer.draw(2, 4);
#else
                Blend.enable(2);
                Blend.enable(3);

                Buffer.draw(2, 2);
#endif
                Buffer.clear(0, 0, 0, 0);

                _peeling_color.use();
                {
                    Texture.active(TextureUnit.Texture0);
#if draw_buffers_blend
                    _tex_id[_currID].bind();
#else
                    _tex_blend[_currID].bind();
#endif
                    if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                        Example._scene.meshAnimation.drawModels(ref _peeling_color, true, false);
                    else
                    {
                        foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                        {
                            // Conditional Rendering
                            Pose.samplesAnyQuery[_currID].beginConditionalRender();
                            {
                                Example._scene.meshAnimation.updateShaders(ref _peeling_color, Pose, true);
                                Pose.draw();
                            }
                            Pose.samplesAnyQuery[_currID].endConditionalRender();
                        }
                    }
                }
                Shading.close();

#if draw_buffers_blend
                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);
                Blend.disable(4);
                Blend.disable(5);
#else
                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);
#endif
                Depth.func(DepthFunction.Lequal);
                Depth.setMask(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");
        }
        #endregion

        #region Drawing Functions
        public    override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // *. Peeling Samples - Begin
            Example._scene.multiFragmentRendering.beginComputePeelingSamples();

            // 0. Rendering
            clearBuffers();
            Example._scene.multiFragmentRendering.passes = 0;
            Example._scene.updateShaders(ref _peeling_color);
            while (Example._scene.multiFragmentRendering.passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.passes++;

                    // Conditional Rendering
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        blending_depth();
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    // *. Peeling Samples - End
                    Example._scene.multiFragmentRendering.endComputePeelingSamples(ref _tex_color_min);
                    Example._scene.multiFragmentRendering.endComputePeelingSamples(ref _tex_color_max);

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent)
                    {
                        _weightSum.compute(_tex_color_min);
                        _weightSum.compute(_tex_color_max);
                    }
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                    {
                        Example._scene.meshAnimation.pose.computeF2BTranslucency(ref _tex_depth[_currID], ref _tex_color_min);
                        //Example._scene.meshAnimation.pose.computeF2BTranslucency(ref _tex_depth[_currId], ref _tex_color_max); // if used not working
                    }

                    if (Example._scene.multiFragmentRendering.maxLayersIsZero())
                        break;
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 3 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    if (!Example._scene.multiFragmentRendering.useMax)
                        _tex_color_min.draw();
                    else
                        _tex_color_max.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion
    }
 
    public class F2B_2P_Max : Peeling
    {
        #region Private Properties

        Shader  _peeler,  _blender,  _init;
        Shading _peeling, _blending, _initing;

        FrameBuffer _fbo_peel;
        FrameBuffer _fbo_blend;
        
        Texture   _tex_color;
        Texture[] _tex_depth = new Texture[2];
#if draw_buffers_blend
        Texture[] _tex_count = new Texture[2];
        Texture[] _tex_id    = new Texture[2];
#else
        Texture[] _tex_blend = new Texture[2];
#endif
        #endregion
        
        #region Constructor
        public F2B_2P_Max() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for(int i = 0; i<2; i++)
            {
                _tex_depth[i].delete();
#if draw_buffers_blend
                _tex_count[i].delete();
                _tex_id[i].delete();
#else
                _tex_blend[i].delete();
#endif
            }
            _fbo_peel.delete();

            _tex_color.delete();
            _fbo_blend.delete();
            _peeler.delete();
            _blender.delete();
            _peeling.delete();
            _blending.delete();
            _init.delete();
            _initing.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color=new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory+=RES_MB*4;
#endif
            _tex_color.unbind();

            for(int i = 0; i<2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i]=new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
                _memory+=RES_MB*4;
#endif
                _tex_depth[i].unbind();

#if draw_buffers_blend
                // .r = number of fragments at Zi
#if multisample
                _tex_count[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_count[i]=new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_count[i].bind();
                _tex_count[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_count[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_count[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
                _memory+=RES_MB*4;
#endif
                _tex_count[i].unbind();
                // .r = max primitive id
#if multisample
                _tex_id[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_id[i]=new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_id[i].bind();
                _tex_id[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_id[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_id[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_id[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
                _memory+=RES_MB*4;
#endif
                _tex_id[i].unbind();
#else
                // .r = max primitive id
                // .a = number of fragments at Zi
#if multisample
                _tex_blend[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend[i].bind();
                _tex_blend[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_blend[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend[i].unbind();
#endif
            }

            // Create Depth FrameBuffer 
            _fbo_peel=new FrameBuffer();
            _fbo_peel.bind();
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[0], 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_color, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_depth[1], 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_color, 0);
            _fbo_peel.checkStatus();
            FrameBuffer.unbind();

            // Create FrameBuffer 
            _fbo_blend=new FrameBuffer();
            _fbo_blend.bind();
#if draw_buffers_blend
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_id[0]   , 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_count[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_id[1]   , 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_count[1], 0);
#else
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blend[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blend[1], 0);
#endif
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_blend.bind();
#if draw_buffers_blend
            Buffer.draw(2, 2);
            Buffer.setMask(2, true, false, false, false);
            Buffer.setMask(3, true, false, false, false);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(2, true, true, true, true);
            Buffer.setMask(3, true, true, true, true);
#else
            Buffer.draw(DrawBufferMode.ColorAttachment1);
            Buffer.setMask(1, true, false, false, true);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(1, true, true, true, true);
#endif
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            //--- f2b_Z_2_init_depth
            _init=new Shader("peeling/f2b_2p/max/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing=new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_2_peeling
            _peeler=new Shader("peeling/f2b_2p/max/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling=new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_2_blending 
            _blender=new Shader("peeling/f2b_2p/max/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending=new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                _fbo_peel.bind();
#if !draw_buffers_blend
                Blend.equation(BlendEquationMode.Max);
#endif
                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    if (Example._scene.multiFragmentRendering.passes == 0)
                    {
                        Blend.enable(0);
#if draw_buffers_blend
                        Blend.equation(0, BlendEquationMode.Max);
#endif
                        Buffer.draw(DrawBufferMode.ColorAttachment0);
                        Buffer.setMask(0, true, false, false, false);
                        Buffer.clear(-(float)Depth.depth, 0, 0, 0);

                        _initing.use();
                        {
                            Example._scene.meshAnimation.drawModels(ref _initing, false, false);
                        }
                        Shading.close();

                        Buffer.setMask(0, true, true, true, true);
                        Blend.disable(0);
                    }
                    else
                    {
                        Blend.enable(0);
                        Blend.enable(1);
                        Blend.enable(2);
                        Blend.enable(3);
#if draw_buffers_blend
                        Blend.equation(2 * _currID    , BlendEquationMode.Max);
                        Blend.equation(2 * _currID + 1, BlendEquationMode.Max);
#endif
                        Buffer.draw(DrawBufferMode.ColorAttachment0 + 2 * _currID);
                        Buffer.clear(-(float)Depth.depth, 0, 0, 0);
                        Buffer.draw(DrawBufferMode.ColorAttachment1 + 2 * _currID);
                        Buffer.clear(0, 0, 0, 0);

                        Buffer.draw(2, 2 * _currID);

                        _peeling.use();
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                            Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                            _tex_count[_prevID].bind();
                            Texture.active(TextureUnit.Texture4);
                            _tex_id[_prevID].bind();
#else
                            _tex_blend[_prevID].bind();
#endif
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();

                        Blend.disable(0);
                        Blend.disable(1);
                        Blend.disable(2);
                        Blend.disable(3);
                    }
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling");

            return S;
        }
        protected override void blending_depth()
        {
            FPS.beginLocal();
            {
#if draw_buffers_blend
                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);
                Blend.equation(2 * _currID    , BlendEquationMode.Max);
                Blend.func    (2 * _currID + 1, BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(2 * _currID + 1, BlendEquationMode.FuncAdd);
#else
                Blend.enable(0);
                Blend.enable(1);
                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equationSeparate(BlendEquationMode.Max, BlendEquationMode.FuncAdd);
#endif
                _fbo_blend.bind();

#if draw_buffers_blend
                Buffer.draw(2, 2*_currID);
                Buffer.setMask(2*_currID  , true, false, false, false);
                Buffer.setMask(2*_currID+1, true, false, false, false);
#else
                Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
                Buffer.setMask(_currID, true, false, false, true);
#endif
                Buffer.clear(0, 0, 0, 0);

                _blending.use();
                {
                    Texture.active(TextureUnit.Texture0);
                    _tex_depth[_currID].bind();
                    Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                    _tex_count[_prevID].bind();
                    Texture.active(TextureUnit.Texture4);
                    _tex_id[_prevID].bind();
#else
                    _tex_blend[_prevID].bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _blending, false, false);
                }
                Shading.close();

#if draw_buffers_blend
                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);

                Buffer.setMask(2*_currID  , true, true, true, true);
                Buffer.setMask(2*_currID+1, true, true, true, true);
#else
                Blend.disable(0);
                Blend.disable(1);
                Buffer.setMask(_currID, true, true, true, true);
#endif
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Blending");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            Depth.disableTest();
            Depth.setMask(false);

            // 0. Rendering
            clearBuffers();
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (true)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent && Example._scene.multiFragmentRendering.passes > 0)
                        _weightSum.compute(_tex_color);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent && Example._scene.multiFragmentRendering.passes > 0)
                        Example._scene.meshAnimation.pose.computeF2BTranslucency(ref _tex_depth[_currID], ref _tex_color);

                    Example._scene.multiFragmentRendering.passes++;
                    if (Example._scene.multiFragmentRendering.passes == Example._scene.multiFragmentRendering.layers + 1)
                        break;

                    // Conditional Rendering
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        blending_depth();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes - 1;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty Functions
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        #endregion
    }

    public class F2B_2P_MinMax : Peeling
    {
        #region Private Properties

        Shader _peeler, _blender, _init;
        Shading _peeling, _blending, _initing;

        Shader _peeler_occlusion;
        Shading _peeling_occlusion;

        FrameBuffer _fbo_peel;
        FrameBuffer _fbo_blend;

        Texture _tex_color_min;
        Texture _tex_color_max;
        Texture[] _tex_depth = new Texture[2];
#if draw_buffers_blend
        Texture[] _tex_count = new Texture[2];
        Texture[] _tex_id    = new Texture[2];
#else
        Texture[] _tex_blend = new Texture[2];
#endif
        #endregion

        #region Constructor
        public F2B_2P_MinMax() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
            {
                _tex_depth[i].delete();
#if draw_buffers_blend
                _tex_count[i].delete();
                _tex_id[i].delete();
#else
                _tex_blend[i].delete();
#endif
            }
            _fbo_peel.delete();

            _tex_color_min.delete();
            _tex_color_max.delete();
            _fbo_blend.delete();
            _peeler.delete();
            _blender.delete();
            _peeling.delete();
            _blending.delete();
            _init.delete();
            _initing.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color_min = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_min = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_min.bind();
            _tex_color_min.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_min.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_min.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_min.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_min.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_min.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_min.unbind();

#if multisample
            _tex_color_max = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_max = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_max.bind();
            _tex_color_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_max.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_max.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_max.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

#if draw_buffers_blend
                // .r = number of fragments at Zi
#if multisample
                _tex_count[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_count[i]=new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_count[i].bind();
                _tex_count[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_count[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_count[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
                _memory+=RES_MB*4;
#endif
                _tex_count[i].unbind();
                // .rg = min, max primitive ids
#if multisample
                _tex_id[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_id[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_id[i].bind();
                _tex_id[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_id[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_id[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_id[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory+=RES_MB*8;
#endif
                _tex_id[i].unbind();
#else
                // .rg = min, max primitive ids
                // .a  = number of fragments at Zi
#if multisample
                _tex_blend[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend[i].bind();
                _tex_blend[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_blend[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend[i].unbind();
#endif
            }

            // Create Depth FrameBuffer 
            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[0]   , 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_color_min, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_color_max , 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_depth[1]   , 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_color_min, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_color_max , 0);
            _fbo_peel.checkStatus();
            FrameBuffer.unbind();

            // Create FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
#if draw_buffers_blend
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_id[0]   , 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_count[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_id[1]   , 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_count[1], 0);
#else
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blend[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blend[1], 0);
#endif
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_blend.bind();
#if draw_buffers_blend
            Buffer.draw(2, 2);
            Buffer.setMask(2, true, true, false, false);
            Buffer.setMask(3, true, false, false, false);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(2, true, true, true, true);
            Buffer.setMask(3, true, true, true, true);
#else
            Buffer.draw(DrawBufferMode.ColorAttachment1);
            Buffer.setMask(1, true, true, false, true);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(1, true, true, true, true);
#endif
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler_occlusion = new Shader("peeling/f2b/peel_occlusion", ShaderType.FragmentShader);
            _peeler_occlusion.complile(ShaderType.FragmentShader);

            _peeling_occlusion = new Shading();
            _peeling_occlusion.create();
            _peeling_occlusion.attachShader(Example._scene.renderVertex.id);
            _peeling_occlusion.attachShader(Example._scene.renderGeometry.id);
            _peeling_occlusion.attachShader(Example._scene.computePixelColor.id);
            _peeling_occlusion.attachShader(_peeler_occlusion.id);
            _peeling_occlusion.link();

            _peeling_occlusion.use();
            {
                _peeling_occlusion.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_2_init_depth
            _init = new Shader("peeling/f2b_2p/min_max/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_2_peeling
            _peeler = new Shader("peeling/f2b_2p/min_max/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);

                _peeling.bindUniform1("tex_depth", 0);
            }
            Shading.close();

            //--- f2b_Z_2_blending 
            _blender = new Shader("peeling/f2b_2p/min_max/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                _fbo_peel.bind();

#if !draw_buffers_blend
                Blend.equation(BlendEquationMode.Max);
#endif
                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    if (Example._scene.multiFragmentRendering.passes == 0)
                    {
                        Blend.enable(0);
#if draw_buffers_blend
                        Blend.equation(0, BlendEquationMode.Max);
#endif
                        Buffer.draw(DrawBufferMode.ColorAttachment0);
                        Buffer.setMask(0, true, false, false, false);
                        Buffer.clear(-(float)Depth.depth, 0, 0, 0);

                        _initing.use();
                        {
                            if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                                Example._scene.meshAnimation.drawModels(ref _initing, false, false);
                            else
                            {
                                foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                                {
                                    Example._scene.meshAnimation.updateShaders(ref _initing, Pose, false);
                                    Pose.draw();
                                }
                            }
                        }
                        Shading.close();

                        Buffer.setMask(0, true, true, true, true);
                        Blend.disable(0);
                    }
                    else
                    {
                        Blend.enable(0);
                        Blend.enable(1);
                        Blend.enable(2);
                        Blend.enable(3);
                        Blend.enable(4);
                        Blend.enable(5);
#if draw_buffers_blend
                        Blend.equation(2 * _currID    , BlendEquationMode.Max);
                        Blend.equation(2 * _currID + 1, BlendEquationMode.Max);
                        Blend.equation(2 * _currID + 2, BlendEquationMode.Max);
#endif
                        Buffer.draw(DrawBufferMode.ColorAttachment0 + 3 * _currID);
                        Buffer.clear(-(float)Depth.depth, 0, 0, 0);
                        Buffer.draw(2, 3 * _currID + 1);
                        Buffer.clear(0, 0, 0, 0);

                        Buffer.draw(3, 3 * _currID);

                        _peeling.use();
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                            Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                            _tex_count[_prevID].bind();
                            Texture.active(TextureUnit.Texture4);
                            _tex_id[_prevID].bind();
#else
                            _tex_blend[_prevID].bind();
#endif
                            if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                                Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                            else
                            {
                                foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                                {
                                    // Conditional Rendering
                                    if (Example._scene.multiFragmentRendering.passes > 0)
                                        Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                                    {
                                        Example._scene.meshAnimation.updateShaders(ref _peeling, Pose, true);
                                        Pose.draw();
                                    }
                                    if (Example._scene.multiFragmentRendering.passes > 0)
                                        Pose.samplesAnyQuery[_prevID].endConditionalRender();
                                }
                            }
                        }
                        Shading.close();

                        Blend.disable(0);
                        Blend.disable(1);
                        Blend.disable(2);
                        Blend.disable(3);
                        Blend.disable(4);
                        Blend.disable(5);
                    }
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling");

            if (Example._scene.multiFragmentRendering.useOcclusionCulling)
                peel_culling();

            return S;
        }
        protected override void peel_culling()
        {
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                _peeling_occlusion.use();

                Texture.active(TextureUnit.Texture0);
                _tex_depth[_currID].bind();

                foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                {
                    if (Example._scene.multiFragmentRendering.passes > 0)
                        Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                    Pose.samplesAnyQuery[_currID].begin();
                    {
                        Example._scene.meshAnimation.updateShaders(ref _peeling_occlusion, Pose, false);
                        Pose.aabb.drawElementsLite();
                    }
                    Pose.samplesAnyQuery[_currID].end();
                    if (Example._scene.multiFragmentRendering.passes > 0)
                        Pose.samplesAnyQuery[_prevID].endConditionalRender();
                }
                Shading.close();

                Depth.enableTest();
                Depth.setMask(true);
                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". BB Occlusion Culling");
        }
        protected override void blending_depth()
        {
            FPS.beginLocal();
            {
#if draw_buffers_blend
                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);
                Blend.equation(2 * _currID    , BlendEquationMode.Max);
                Blend.func    (2 * _currID + 1, BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(2 * _currID + 1, BlendEquationMode.FuncAdd);

                _fbo_blend.bind();

                Buffer.setMask(2*_currID  , true, true , false, false);
                Buffer.setMask(2*_currID+1, true, false, false, false);

                Buffer.draw(DrawBufferMode.ColorAttachment0 + 2 * _currID);
                Buffer.clear(float.MinValue, 0, 0, 0);
                Buffer.draw(DrawBufferMode.ColorAttachment1 + 2 * _currID);
                Buffer.clear(0, 0, 0, 0);

                Buffer.draw(2, 2 * _currID);
#else
                Blend.enable(0);
                Blend.enable(1);
                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equationSeparate(BlendEquationMode.Max, BlendEquationMode.FuncAdd);

                _fbo_blend.bind();

                Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
                Buffer.setMask(_currID, true, true, false, true);
                Buffer.clear(float.MinValue, 0, 0, 0);
#endif
                _blending.use();
                {
                    Texture.active(TextureUnit.Texture0);
                    _tex_depth[_currID].bind();
                    Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                    _tex_count[_prevID].bind();
                    Texture.active(TextureUnit.Texture4);
                    _tex_id[_prevID].bind();
#else
                    _tex_blend[_prevID].bind();
#endif
                    if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                        Example._scene.meshAnimation.drawModels(ref _blending, true, false);
                    else
                    {
                        foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                        {
                            // Conditional Rendering
                            Pose.samplesAnyQuery[_currID].beginConditionalRender();
                            {
                                Example._scene.meshAnimation.updateShaders(ref _blending, Pose, true);
                                Pose.draw();
                            }
                            Pose.samplesAnyQuery[_currID].endConditionalRender();
                        }
                    }
                }
                Shading.close();

#if draw_buffers_blend
                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);

                Buffer.setMask(2*_currID  , true, true, true, true);
                Buffer.setMask(2*_currID+1, true, true, true, true);
#else
                Blend.disable(0);
                Blend.disable(1);
                Buffer.setMask(_currID, true, true, true, true);
#endif
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Blending");
        }
        #endregion

        #region Drawing Functions
        public    override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // 0. Rendering
            clearBuffers();
            Example._scene.multiFragmentRendering.passes = 0;
            Example._scene.updateShaders(ref _peeling);

            Depth.disableTest();
            Depth.setMask(false);

            while (true)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent && Example._scene.multiFragmentRendering.passes > 0)
                    {
                        _weightSum.compute(_tex_color_min);
                        _weightSum.compute(_tex_color_max);
                    }
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                    {
                        Example._scene.meshAnimation.pose.computeF2BTranslucency(ref _tex_depth[_currID], ref _tex_color_min);
                        //Example._scene.meshAnimation.pose.computeF2BTranslucency(ref _tex_depth[_currId], ref _tex_color_max); // if used not working
                    }

                    Example._scene.multiFragmentRendering.passes++;
                    if (Example._scene.multiFragmentRendering.passes == Example._scene.multiFragmentRendering.layers + 1)
                        break;

                    // Conditional Rendering
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        blending_depth();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    if (Example._scene.multiFragmentRendering.maxLayersIsZero())
                        break;
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes - 1;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    if (!Example._scene.multiFragmentRendering.useMax)
                        _tex_color_min.draw();
                    else
                        _tex_color_max.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty Functions
        protected override void peel_color()
        {
            ;
        }
        #endregion
    }

#if true
    public class F2B_KB : Peeling
    {
        #region Private Properties

        Shader _peeler_depth, _peeler, _resolve;
        Shading _peeling_depth, _peeling, _resolving;

        Shader _peeler_occlusion;
        Shading _peeling_occlusion;

        FrameBuffer _fbo_color;
        FrameBuffer[] _fbo_depth = new FrameBuffer[2];

        Texture _tex_color;
        Texture[] _tex_depth = new Texture[2];
        Texture[] _tex_peel = new Texture[8];

        #endregion

        #region Constructor
        public F2B_KB() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _fbo_color.delete();
            for (int i = 0; i < 2; i++)
            {
                _fbo_depth[i].delete();
                _tex_depth[i].delete();
            }
            _tex_color.delete();
            for (int i = 0; i < _sizeMRT; i++)
                _tex_peel[i].delete();

            _peeler_depth.delete();
            _peeler.delete();
            _resolve.delete();

            _peeling_depth.delete();
            _peeling.delete();
            _resolving.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
            for (int i = 0; i < _sizeMRT; i++)
            {
#if multisample
                _tex_peel[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_peel[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_peel[i].bind();
                _tex_peel[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample

#if packing
                _tex_peel[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false); 
                _memory += RES_MB * 16 * _multisamples;
#else

#if sorted_by_id
                _tex_peel[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_peel[i].image2DMS(_multisamples, PixelInternalFormat.Rgba , false);
                _memory += RES_MB * 4 * _multisamples;
#endif
#endif

#else

#if packing
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 16;
#else

#if sorted_by_id
                _tex_peel[i].image2D(0, PixelInternalFormat.Rg32ui, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 8;
#else
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
#endif
#endif
                _tex_peel[i].unbind();
            }

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create Depth FrameBuffer 
                _fbo_depth[i] = new FrameBuffer();
                _fbo_depth[i].bind();
                _fbo_depth[i].attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth[i], 0);
                for (int j = 0; j < _sizeMRT; j++)
                    _fbo_depth[i].attachTexture2D(FramebufferAttachment.ColorAttachment0 + j, ref _tex_peel[j], 0);
                _fbo_depth[i].checkStatus();
            }

            // Final Color
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color.unbind();

            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler_occlusion = new Shader("peeling/f2b/peel_occlusion", ShaderType.FragmentShader);
            _peeler_occlusion.complile(ShaderType.FragmentShader);

            _peeling_occlusion = new Shading();
            _peeling_occlusion.create();
            _peeling_occlusion.attachShader(Example._scene.renderVertex.id);
            _peeling_occlusion.attachShader(Example._scene.renderGeometry.id);
            _peeling_occlusion.attachShader(Example._scene.computePixelColor.id);
            _peeling_occlusion.attachShader(_peeler_occlusion.id);
            _peeling_occlusion.link();

            _peeling_occlusion.use();
            {
                _peeling_occlusion.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- Peeling Depth ---//
            _peeler_depth = new Shader("peeling/f2b_kb/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_peeling_color Shader
            _peeler = new Shader("peeling/f2b_kb/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);    
            }
            Shading.close();

            // resolve
            _resolve = new Shader("peeling/f2b_kb/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform4("color_background", Example._scene.backgroundColor);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                _fbo_depth[_currID].bind();
                Depth.clear();
                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        if (Example._scene.multiFragmentRendering.passes > 0)
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                        }

                        if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                            Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                        else
                        {
                            foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                            {
                                // Conditional Rendering
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                                {
                                    Example._scene.meshAnimation.updateShaders(ref _peeling_depth, Pose, false);
                                    Pose.draw();
                                }
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].endConditionalRender();
                            }
                        }
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            if (Example._scene.multiFragmentRendering.useOcclusionCulling)
                peel_culling();

            return S;
        }
        protected override void peel_culling()
        {
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                _peeling_occlusion.use();

                Texture.active(TextureUnit.Texture0);
                _tex_depth[_currID].bind();

                foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                {
                    if (Example._scene.multiFragmentRendering.passes > 0)
                        Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                    Pose.samplesAnyQuery[_currID].begin();
                    {
                        Example._scene.meshAnimation.updateShaders(ref _peeling_occlusion, Pose, false);
                        Pose.aabb.drawElementsLite();
                    }
                    Pose.samplesAnyQuery[_currID].end();
                    if (Example._scene.multiFragmentRendering.passes > 0)
                        Pose.samplesAnyQuery[_prevID].endConditionalRender();
                }
                Shading.close();

                Depth.enableTest();
                Depth.setMask(true);
                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". BB Occlusion Culling");
        }
        protected override void peel_color()
        {
            FPS.beginLocal();
            {
                Depth.func(DepthFunction.Equal);
                Depth.setMask(false);

                // 1. Peel Fragments
                Buffer.draw(_sizeMRT, 0);
#if packing
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);
#else
                if (Example._scene.multiFragmentRendering.translucent)
                    Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, 0.0f, 0.0f);
                else
#if sorted_by_id
                    Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);
#else
                    Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 0.0f);
#endif

#endif
                _peeling.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_peel[0].bind();
                    Texture.active(TextureUnit.Texture1); _tex_peel[1].bind();
                    for (int i = 4; i < _sizeMRT + 2; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i); _tex_peel[i - 2].bind();
                    }

                    if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                        Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                    else
                    {
                        foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                        {
                            // Conditional Rendering
                            Pose.samplesAnyQuery[_currID].beginConditionalRender();
                            {
                                Example._scene.meshAnimation.updateShaders(ref _peeling, Pose, true);
                                Pose.draw();
                            }
                            Pose.samplesAnyQuery[_currID].endConditionalRender();
                        }
                    }
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");

            // 2. Resolve
            FPS.beginLocal();
            {
                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
#if packing
                Buffer.clear(0, 0, 0, 0);
#else
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);
#endif
                _resolving.use();
                {
                    int _k = _sizeMRT;
#if packing
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % (_k * 4));
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _k);
#endif
                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);

                    for (int i = 0; i < _sizeMRT; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i);
                        _tex_peel[i].bind();
                    }
                    Texture.image.draw();
                }
                Shading.close();

                Depth.func(DepthFunction.Lequal);
                Depth.setMask(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");
        }
        #endregion

        #region Drawing Functions
        public    override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // 0. Rendering
            int passes = 0;
            Example._scene.multiFragmentRendering.passes = 0;
            Example._scene.updateShaders(ref _peeling);
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    // Conditional Rendering
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();
#if packing
                    passes += _bufferSize*4;                   
#else
                    passes += _sizeMRT;
#endif
                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent)
                        _weightSum.compute(_tex_color);

                    if (Example._scene.multiFragmentRendering.maxLayersIsZero())
                        break;
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        #endregion
    } 
#else
    // using Texture Array 
    public class F2B_Z_KB : Peeling
    {
    #region Private Properties

        Shader _peeler_depth, _peeler, _resolve;
        Shading _peeling_depth, _peeling, _resolving;

        FrameBuffer _fbo_peel;
        FrameBuffer _fbo_color;
        FrameBuffer[] _fbo_depth = new FrameBuffer[2];

        Texture _tex_color, _tex_peel;
        Texture[] _tex_depth = new Texture[2];

        #endregion

    #region Constructor
        public F2B_Z_KB() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

    #region Delete Function
        public override void delete()
        {
            _fbo_color.delete();
            _fbo_peel.delete();
            for (int i = 0; i < 2; i++)
            {
                _fbo_depth[i].delete();
                _tex_depth[i].delete();
            }
            _tex_peel.delete();
            _tex_color.delete();

            _peeler_depth.delete();
            _peeler.delete();
            _resolve.delete();

            _peeling_depth.delete();
            _peeling.delete();
            _resolving.delete();
        }
        #endregion

    #region Buffer Functions
        protected override void initBuffers()
        {
#if multisample
                _tex_peel = new Texture(TextureTarget.Texture2DMultisampleArray);
#else
                _tex_peel = new Texture(TextureTarget.Texture2DArray);
#endif
                _tex_peel.bind();
                _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapR, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
#if packing
                _tex_peel.image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false); 
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_peel.image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false); // 32f !!
                _memory += RES_MB * 16 * _multisamples;
#endif
#else
#if packing
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 16;
#else
                _tex_peel.image3D(0, PixelInternalFormat.Rgba32f, _bufferSize, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16 * _bufferSize;
#endif
#endif
                //_tex_peel.unbind();
                _fbo_peel = new FrameBuffer();
                _fbo_peel.bind();
                for (int i = 0; i < _bufferSize; i++)
                    _fbo_peel.attachTextureLayer(FramebufferAttachment.ColorAttachment0 + i, ref _tex_peel, 0, i);
                _fbo_peel.checkStatus();
                FrameBuffer.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create Depth FrameBuffer 
                _fbo_depth[i] = new FrameBuffer();
                _fbo_depth[i].bind();
                _fbo_depth[i].attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth[i], 0);
                Buffer.draw(DrawBufferMode.None);
                _fbo_depth[i].checkStatus();
                FrameBuffer.unbind();
            }
            // Final Color
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif

#else
#if packing
            _tex_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif

#endif
            _tex_color.unbind();

            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

    #region Shader Functions
        protected override void initShaders()
        {
            //--- f2b_Z_peeling_depth
            _peeler_depth = new Shader("peeling/f2b_kb_array/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling_depth.bindUniform1("tex_depth", 0);
            }
            Shading.close();

            //--- f2b_Z_peeling_color Shader
            _peeler = new Shader("peeling/f2b_kb_array/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferTarget.UniformBuffer);

                _peeling.bindUniform1("bufferSize", _bufferSize);
                _peeling.bindUniform1("tex_peel", 0);
                _peeling.bindUniform1("tex_depth", 1);
            }
            Shading.close();

            // resolve
            _resolve = new Shader("peeling/f2b_kb_array/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniform1("bufferSize", _bufferSize);
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform1("tex_peel", 0);
            }
            Shading.close();

        }
    #endregion

    #region Peeling Functions
        protected override bool peel_depth()
        {
            if (Example._scene.query.use) Example._scene.query.begin();

            if (Example._scene.query_timer.use)
                Example._scene.query_timer.begin();

            _fbo_depth[_currId].bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);
            Depth.clear();

            _peeling_depth.use();
            {
                if (Example._scene.passes > 0)
                {
                    Texture.active(TextureUnit.Texture0); _tex_depth[_prevId].bind();
                }
                draw_models(ref _peeling_depth, false, false);
            }
            Shading.close();
            
            Buffer.setMask(true, true, true, true);

            if (Example._scene.query_timer.use)
            {
                Example._scene.query_timer.end();
                Example._scene.query_timer.getTimeElapsed();
            }

            if (Example._scene.query.use)
            {
                Example._scene.query.end();
                Example._scene.query.getResult();
                return Example._scene.query.isResultZero();
            }
            return false;
        }
        protected override void peel_color()
        {
            if (Example._scene.query_timer.use)
                Example._scene.query_timer.begin();

            //1st Pass - Geometry
            Depth.disableTest();
            Depth.setMask(false);

            _fbo_peel.bind();
            Buffer.draw(_bufferSize, 0);
#if packing
            Buffer.clear(0, 0, 0, 0);
#else
            if (Example._scene.translucent)
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, 0.0f, 0.0f);
            else
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 0.0f);
#endif
            _peeling.use();
            {
                Texture.active(TextureUnit.Texture0); _tex_peel.bind();
                Texture.active(TextureUnit.Texture1); _tex_depth[_currId].bind();
                draw_models(ref _peeling, true, false);
            }
            Shading.close();
            
            Depth.enableTest();

            //2nd Pass - Image
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);

            _resolving.use();
            {
#if packing
                _resolving.bindUniform1("layer", (Example._scene.layers - 1) % (_bufferSize * 4));
#else
                _resolving.bindUniform1("layer", (Example._scene.layers - 1) % _bufferSize);
#endif
                Texture.active(TextureUnit.Texture0); _tex_peel.bind();
                Texture.image.draw();
            }
            Shading.close();

            Depth.setMask(true);

            if (Example._scene.query_timer.use)
            {
                Example._scene.query_timer.end();
                Example._scene.query_timer.getTimeElapsed();
            }
        }
    #endregion

    #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.transparent)
                _weightSum.clearBuffers();
            // 2. Translucency
            if (Example._scene.translucent && Example._scene.meshAnimation.selectedModel != -1 && models[Example._scene.meshAnimation.selectedModel].drawable && models[Example._scene.meshAnimation.selectedModel].translucent)
                models[Example._scene.meshAnimation.selectedModel].thickness.initF2B();

            // 0. Rendering
            updateShaders(ref _peeling);
            int passes = 0;
            Example._scene.passes = 0;
            while (passes < Example._scene.layers)
            {
                _currId = Example._scene.passes % 2;
                _prevId = 1 - _currId;

                if (!peel_depth(ref models))
                {
                    peel_color(ref models);
#if packing
                    passes += _bufferSize*4;
#else
                    passes += _bufferSize;
#endif
                    Example._scene.passes++;

                    // 1. Transparency
                    if (Example._scene.transparent)
                        _weightSum.compute(_tex_color);
                    // 2. Translucency
                    //                    if (Example._scene.translucent && Example._scene.meshAnimation.selectedModel != -1 && models[Example._scene.meshAnimation.selectedModel].drawable && models[Example._scene.meshAnimation.selectedModel].translucent)
                    //                      models[Example._scene.meshAnimation.selectedModel].thickness.computeF2B(ref _tex_depth[_currId]);
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            FrameBuffer.unbind();
            Buffer.draw(DrawBufferMode.Back);

            // 1. Transparency
            if (Example._scene.transparent)
                _weightSum.draw(Example._scene.useBackgroundTexture);
            // 0. Rendering
            else
            {
                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }
            Example._scene.total_passes = 2 * Example._scene.passes;
        }
    #endregion

    #region Empty functions

        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth(ref List<MeshFileData> models)
        {
            ;
        }

    #endregion
    } 
#endif
    public class F2B_FreePipe : Peeling
    {
        #region Private Properties

        Shader _init, _peeler_depth, _peeler, _resolve;
        Shading _initing, _peeling_depth, _peeling, _resolving;

        Shader _peeler_occlusion;
        Shading _peeling_occlusion;

        FrameBuffer _fbo_color;
        FrameBuffer[] _fbo_depth = new FrameBuffer[2];

        Texture _tex_color, _tex_peel, _tex_count;
        Texture[] _tex_depth = new Texture[2];

        #endregion

        #region Constructor
        public F2B_FreePipe() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _fbo_color.delete();
            for (int i = 0; i < 2; i++)
            {
                _fbo_depth[i].delete();
                _tex_depth[i].delete();
            }
            _tex_color.delete();
            _tex_peel.delete();
            _tex_count.delete();

            _init.delete();
            _peeler_depth.delete();
            _peeler.delete();
            _resolve.delete();
            
            _initing.delete();
            _peeling_depth.delete();
            _peeling.delete();
            _resolving.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture                       
#if multisample
            _tex_peel = new Texture(TextureTarget.Texture2DMultisampleArray);
#else
            _tex_peel=new Texture(TextureTarget.Texture2DArray);
#endif
            _tex_peel.bind();
            _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if sorted_by_id
            _tex_peel.image3DMS(_multisamples, PixelInternalFormat.Rg32ui, _sizeArray, false);
            _memory += RES_MB * 2 * _sizeArray * _multisamples;
#else
            _tex_peel.image3DMS(_multisamples, PixelInternalFormat.Rgba8, _sizeArray, false);
            _memory += RES_MB * _sizeArray * _multisamples;
#endif
           
#else
#if sorted_by_id
            _tex_peel.image3D(0, PixelInternalFormat.Rg32ui, _sizeArray, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 2 * _sizeArray;
#else
            _tex_peel.image3D(0, PixelInternalFormat.Rgba8, _sizeArray, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory+=RES_MB * 4 * _sizeArray;
#endif

#endif
            _tex_peel.unbind();

            // Create Count Texture 
#if multisample
            _tex_count = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_count=new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_count.bind();
            _tex_count.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_count.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_count.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_count.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_count.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_count.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory+=RES_MB*4;
#endif
            _tex_count.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create Depth FrameBuffer 
                _fbo_depth[i] = new FrameBuffer();
                _fbo_depth[i].bind();
                _fbo_depth[i].attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth[i], 0);
                _fbo_depth[i].checkStatus();
            }

            // Final Color
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color.unbind();

            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler_occlusion = new Shader("peeling/f2b/peel_occlusion", ShaderType.FragmentShader);
            _peeler_occlusion.complile(ShaderType.FragmentShader);

            _peeling_occlusion = new Shading();
            _peeling_occlusion.create();
            _peeling_occlusion.attachShader(Example._scene.renderVertex.id);
            _peeling_occlusion.attachShader(Example._scene.renderGeometry.id);
            _peeling_occlusion.attachShader(Example._scene.computePixelColor.id);
            _peeling_occlusion.attachShader(_peeler_occlusion.id);
            _peeling_occlusion.link();

            _peeling_occlusion.use();
            {
                _peeling_occlusion.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- Initing Images ---//
            _init = new Shader("peeling/f2b_freepipe/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            //--- Peeling Depth ---//
            _peeler_depth = new Shader("peeling/f2b_freepipe/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- f2b_Z_peeling_color Shader
            _peeler = new Shader("peeling/f2b_freepipe/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                //_peeling.bindUniform1("bufferSize", _sizeArray);
            }
            Shading.close();

            // resolve
            _resolve = new Shader("peeling/f2b_freepipe/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                _fbo_depth[_currID].bind();
                Depth.clear();
                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        if (Example._scene.multiFragmentRendering.passes > 0)
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                        }

                        if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                            Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                        else
                        {
                            foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                            {
                                // Conditional Rendering
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                                {
                                    Example._scene.meshAnimation.updateShaders(ref _peeling_depth, Pose, false);
                                    Pose.draw();
                                }
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].endConditionalRender();
                            }
                        }
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            if (Example._scene.multiFragmentRendering.useOcclusionCulling)
                peel_culling();

            return S;
        }
        protected override void peel_culling()
        {
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                _peeling_occlusion.use();

                Texture.active(TextureUnit.Texture0);
                _tex_depth[_currID].bind();

                foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                {
                    if (Example._scene.multiFragmentRendering.passes > 0)
                        Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                    Pose.samplesAnyQuery[_currID].begin();
                    {
                        Example._scene.meshAnimation.updateShaders(ref _peeling_occlusion, Pose, false);
                        Pose.aabb.drawElementsLite();
                    }
                    Pose.samplesAnyQuery[_currID].end();
                    if (Example._scene.multiFragmentRendering.passes > 0)
                        Pose.samplesAnyQuery[_prevID].endConditionalRender();
                }
                Shading.close();

                Depth.enableTest();
                Depth.setMask(true);
                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". BB Occlusion Culling");
        }
        protected override void peel_color()
        {
            Depth.setMask(false);
            Buffer.setMask(false, false, false, false);

            // 1. Clear Counters
            FPS.beginLocal();
            {
                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.Ext.MemoryBarrier((int)0x00000020);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Init Counters");

            // 2. Peel Fragments
            FPS.beginLocal();
            {
                Depth.func(DepthFunction.Equal);

                _peeling.use();
                {
                    if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                        Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                    else
                    {
                        foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                        {
                            // Conditional Rendering
                            Pose.samplesAnyQuery[_currID].beginConditionalRender();
                            {
                                Example._scene.meshAnimation.updateShaders(ref _peeling, Pose, true);
                                Pose.draw();
                            }
                            Pose.samplesAnyQuery[_currID].endConditionalRender();
                        }
                    }
                }
                Shading.close();
                GL.Ext.MemoryBarrier((int)0x00001020);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");

            // 3. Resolve
            FPS.beginLocal();
            {
                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeArray);
                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");

            Depth.func(DepthFunction.Lequal);
            Depth.setMask(true);
        }
        #endregion

        #region Drawing Functions
        public    override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

#if sorted_by_id
            GL.Ext.BindImageTexture(3, _tex_peel.index, 0, true, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.Rg32ui);
#else
            GL.Ext.BindImageTexture(3, _tex_peel.index, 0, true, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.Rgba8);
#endif
            GL.Ext.BindImageTexture(4, _tex_count.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);

            // 0. Rendering
            int passes = 0;
            Example._scene.multiFragmentRendering.passes = 0;
            Example._scene.updateShaders(ref _peeling);

            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    passes += _sizeArray;
                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent)
                        _weightSum.compute(_tex_color);

                    if (Example._scene.multiFragmentRendering.maxLayersIsZero())
                        break;
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        #endregion
    }

    public class F2B_LL : Peeling
    {
        #region Private Properties

        uint    _total_fragments;
        float   _tmp_memory;

        Shader  _peel, _resolve, _init, _peeler_depth;
        Shading _peeling, _resolving, _initing, _peeling_depth;

        Shader _peeler_occlusion;
        Shading _peeling_occlusion;

        Buffer _buf_peel        = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.StreamDraw);
        Buffer _buf_pointers    = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.StreamDraw);
        Buffer _shared_counter;

        Texture[] _tex_depth  = new Texture[2];
        Texture _tex_peel     = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_pointers = new Texture(TextureTarget.TextureBuffer);

#if sorted_by_id
        Texture _tex_counter;
#endif
        Texture _tex_page_id, _tex_color;

        FrameBuffer _fbo_color;
        FrameBuffer[] _fbo_depth = new FrameBuffer[2];

        #endregion

        #region Constructor
        public F2B_LL() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
            {
                _fbo_depth[i].delete();
                _tex_depth[i].delete();
            }

            _peel.delete();
            _peeler_depth.delete();
            _resolve.delete();
            _init.delete();

            _peeling.delete();
            _peeling_depth.delete();
            _resolving.delete();
            _initing.delete();

            _tex_page_id.delete();
#if sorted_by_id
            _tex_counter.delete();
#endif 
            _tex_peel.delete();
            _tex_pointers.delete();

            _buf_peel.delete();
            _buf_pointers.delete();
            
            _tex_color.delete();
            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            //_total_fragments = 3005620*(uint)_sizeArray; // ??? Adaptive ???
            _total_fragments = (uint)Example._scene.width * (uint)Example._scene.height * (uint)_sizeArray / 2;  

            // Create Page ID Texture 
#if multisample
            _tex_page_id = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_page_id = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_page_id.bind();
            _tex_page_id.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_page_id.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_page_id.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_page_id.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_page_id.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_page_id.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_page_id.unbind();

            // Create Counter Texture
#if sorted_by_id
#if multisample
            _tex_counter = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_counter.bind();
            _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_counter.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_counter.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_counter.unbind();
#endif

            // Create Color Texture 
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_color.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create Depth FrameBuffer 
                _fbo_depth[i] = new FrameBuffer();
                _fbo_depth[i].bind();
                _fbo_depth[i].attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth[i], 0);
                _fbo_depth[i].checkStatus();
            }

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

            _shared_counter = new Buffer((BufferTarget)0x92C0, BufferUsageHint.StreamDraw);
            _shared_counter.bind();
            _shared_counter.data(new IntPtr(sizeof(uint)));
            _shared_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Page List Buffer
            _buf_peel.bind();
#if sorted_by_id
            _buf_peel.data(new IntPtr(sizeof(float) * 2 * _total_fragments));
#else
            _buf_peel.data(new IntPtr(sizeof(float) * _total_fragments));
#endif
            // Create Shared Page List Texture
            _tex_peel.bind();
#if sorted_by_id
            Texture.buffer(SizedInternalFormat.Rg32f, _buf_peel.index);
            GL.Ext.BindImageTexture(4, _tex_peel.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.Rg32f);
            _memory += MB * 8 * _total_fragments;
#else
            Texture.buffer(SizedInternalFormat.Rgba8, _buf_peel.index);
            GL.Ext.BindImageTexture(4, _tex_peel.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.Rgba8);
            _memory += MB * 4 * _total_fragments;
#endif
            _tex_peel.unbind();

            // Create Shared Linked List Buffer
            _buf_pointers.bind();
            _buf_pointers.data(new IntPtr(_total_fragments * sizeof(uint)));

            // Create Shared Linked List Texture
            _tex_pointers.bind();
            Texture.buffer(SizedInternalFormat.R32f, _buf_pointers.index);
            GL.Ext.BindImageTexture(5, _tex_pointers.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);
            _memory += MB * 4 * _total_fragments;
            _buf_pointers.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler_occlusion = new Shader("peeling/f2b/peel_occlusion", ShaderType.FragmentShader);
            _peeler_occlusion.complile(ShaderType.FragmentShader);

            _peeling_occlusion = new Shading();
            _peeling_occlusion.create();
            _peeling_occlusion.attachShader(Example._scene.renderVertex.id);
            _peeling_occlusion.attachShader(Example._scene.renderGeometry.id);
            _peeling_occlusion.attachShader(Example._scene.computePixelColor.id);
            _peeling_occlusion.attachShader(_peeler_occlusion.id);
            _peeling_occlusion.link();

            _peeling_occlusion.use();
            {
                _peeling_occlusion.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _init = new Shader("peeling/f2b_ll/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            //--- Peeling Depth ---//
            _peeler_depth = new Shader("peeling/f2b_ll/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peel = new Shader("peeling/f2b_ll/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/f2b_ll/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                _fbo_depth[_currID].bind();
                Depth.clear();
                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        if (Example._scene.multiFragmentRendering.passes > 0)
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                        }

                        if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                            Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                        else
                        {
                            foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                            {
                                // Conditional Rendering
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                                {
                                    Example._scene.meshAnimation.updateShaders(ref _peeling_depth, Pose, true);
                                    Pose.draw();
                                }
                                if (Example._scene.multiFragmentRendering.passes > 0)
                                    Pose.samplesAnyQuery[_prevID].endConditionalRender();
                            }
                        }
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            if (Example._scene.multiFragmentRendering.useOcclusionCulling)
                peel_culling();

            return S;
        }
        protected override void peel_culling()
        {
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                _peeling_occlusion.use();

                Texture.active(TextureUnit.Texture0);
                _tex_depth[_currID].bind();

                foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                {
                    if (Example._scene.multiFragmentRendering.passes > 0)
                        Pose.samplesAnyQuery[_prevID].beginConditionalRender();
                    Pose.samplesAnyQuery[_currID].begin();
                    {
                        {
                            Example._scene.meshAnimation.updateShaders(ref _peeling_occlusion, Pose, false);
                            Pose.aabb.drawElementsLite();
                        }
                    }
                    Pose.samplesAnyQuery[_currID].end();
                    if (Example._scene.multiFragmentRendering.passes > 0)
                        Pose.samplesAnyQuery[_prevID].endConditionalRender();
                }
                Shading.close();

                Depth.enableTest();
                Depth.setMask(true);
                Buffer.setMask(true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". BB");
        }
        protected override void peel_color()
        {
            Depth.setMask(false);

            //0. Clear Counters
            FPS.beginLocal();
            {
                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.Ext.MemoryBarrier((int)0x00000020);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Clear Counters");

            // Shared Counter Init
            _shared_counter.bind();
            IntPtr kk = GL.MapBufferRange((BufferTarget)0x92C0, IntPtr.Zero, new IntPtr(sizeof(uint)), BufferAccessMask.MapWriteBit | BufferAccessMask.MapInvalidateBufferBit | BufferAccessMask.MapUnsynchronizedBit);
            kk = IntPtr.Zero;
            GL.UnmapBuffer((BufferTarget)0x92C0);
            GL.BindBufferBase((BufferTarget)0x92C0, 1, _shared_counter.index);
            _shared_counter.unbind();

            //2. Peeling
            FPS.beginLocal();
            {
                Depth.func(DepthFunction.Equal);
                _peeling.use();
                {
                    if (!Example._scene.multiFragmentRendering.useOcclusionCulling)
                        Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                    else
                    {
                        foreach (Mesh3D Pose in Example._scene.meshAnimation.poses)
                        {
                            // Conditional Rendering
                            Pose.samplesAnyQuery[_currID].beginConditionalRender();
                            {
                                Example._scene.meshAnimation.updateShaders(ref _peeling, Pose, true);
                                Pose.draw();
                            }
                            Pose.samplesAnyQuery[_currID].endConditionalRender();
                        }
                    }
                }
                Shading.close();
                GL.Ext.MemoryBarrier((int)0x00001020);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling");

            //3. Resolve
            FPS.beginLocal();
            {
                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeArray);
                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");

            Depth.func(DepthFunction.Lequal);
            Depth.setMask(true);
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            GL.Ext.BindImageTexture(6, _tex_page_id.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);
#if sorted_by_id
            GL.Ext.BindImageTexture(7, _tex_counter.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);
#endif            
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // 0. Rendering
            int passes = 0;
            Example._scene.multiFragmentRendering.passes = 0;
            Example._scene.updateShaders(ref _peeling);
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    passes += _sizeArray;
                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent)
                        _weightSum.compute(_tex_color);

                    if (Example._scene.multiFragmentRendering.maxLayersIsZero())
                        break;
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        #endregion
    }
#endif

    #endregion

    #region DUAL Algorithms

#if DUAL

    public class DUAL : Peeling
    {
        #region Private Properties

        Shader _init, _peeler;
        Shading _initing, _peeling;

        FrameBuffer _fbo_peel;

        Texture _tex_color_front;
        Texture _tex_color_back;
        Texture[] _tex_depth = new Texture[2];

        #endregion

        #region Constructors
        public DUAL() : base()
        {
            _weightSum = Example._scene.weightSumDUAL;
            initBuffers();
            initShaders();
        }
        #endregion 

        #region Delete Function
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
                _tex_depth[i].delete();
            _tex_color_front.delete();
            _tex_color_back.delete();

            _fbo_peel.delete();

            _init.delete();
            _peeler.delete();
            _initing.delete();
            _peeling.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
#if multisample
            _tex_color_front = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_front = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_front.bind();
            _tex_color_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_front.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_front.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_front.unbind();

#if multisample
            _tex_color_back = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_back = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_back.bind();
            _tex_color_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_back.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_back.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_back.unbind();

            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_depth[i].unbind();
            }
            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[0], 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_color_front, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_color_back, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_depth[1], 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_color_front, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_color_back, 0);
            _fbo_peel.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/dual/init_depth", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            if (Example._scene.tessellation)
            {
                _initing.attachShader(Example._scene.renderVertexTess.id);
                _initing.attachShader(Example._scene.renderTessellationControl.id);
                _initing.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peeler = new Shader("peeling/dual/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Blend.equation(BlendEquationMode.Max);
                Blend.enable();

                _fbo_peel.bind();
                Buffer.draw(2, 4);
                Buffer.clear(0, 0, 0, 0);

                Buffer.draw(DrawBufferMode.ColorAttachment3);
                Buffer.setMask(3, true, true, false, false);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                _initing.use();
                {
                    if (Example._scene.instancing)
                    {
                        _initing.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _initing.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _initing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _initing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _initing, false, false);
                }
                Shading.close();

                Blend.disable();

                Buffer.setMask(3, true, true, true, true);
            }
            FPS.endLocal("0. Init Depth");
        }
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                Blend.equation(BlendEquationMode.Max);
                Blend.enable();

                int bufId = _currID * 3;

                _fbo_peel.bind();
                Buffer.draw(2, 1 + bufId);
                Buffer.clear(0, 0, 0, 0);

                Buffer.draw(DrawBufferMode.ColorAttachment0 + bufId);
                Buffer.setMask(bufId, true, true, false, false);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);
                Buffer.draw(3, bufId);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling.use();
                    {
                        if (Example._scene.instancing)
                        {
                            _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                            _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                        }
                        if (Example._scene.tessellation)
                        {
                            _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }
                        Texture.active(TextureUnit.Texture0); _tex_depth[_prevID].bind();
                        Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(false);

                Blend.disable();

                Buffer.setMask(bufId, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling");

            return S;
        }
        #endregion

        #region Drawing Functions
        public    override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
            {
                _weightSum.clearBuffers();
                if (!Example._scene.useBackgroundTexture)
                    _weightSum.clearBuffersBack(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
            }
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // 0. Rendering
            init_depth();

            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.computeDUALTranslucency(ref _tex_depth[1]);

            // 0. Rendering
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (Example._scene.multiFragmentRendering.passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.passes++;
                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent)
                        _weightSum.compute(_tex_color_front, _tex_color_back);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                        Example._scene.meshAnimation.pose.computeDUALTranslucency(ref _tex_depth[_currID]);
                }
                else
                    break;
            }

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes + 1;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Blend.disable();

                Depth.enableTest();
                Depth.setMask(true);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);

                    if (Example._scene.multiFragmentRendering.useFront)
                        _tex_color_front.draw();
                    else
                        _tex_color_back.draw();
                }
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        #endregion
    }

    public class DUAL_3P_Max : Peeling
    {
        #region Private Properties

        Shader _peeler_color, _peeler_depth,_blender, _init;
        Shading _peeling_color, _peeling_depth, _blending, _initing;

        FrameBuffer _fbo_blend;
        FrameBuffer _fbo_color;
        FrameBuffer _fbo_depth;

        Texture   _tex_color_front;
        Texture   _tex_color_back;
        Texture[] _tex_depth = new Texture[2];

#if draw_buffers_blend
        Texture[] _tex_count = new Texture[2];
        Texture[] _tex_id = new Texture[2];
#else
        Texture[] _tex_blend_front = new Texture[2];
        Texture[] _tex_blend_back = new Texture[2];
#endif
        #endregion

        #region Constructors
        public DUAL_3P_Max() : base()
        {
            _weightSum = Example._scene.weightSumDUAL;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
            {
#if draw_buffers_blend                
                _tex_count[i].delete();
                _tex_id[i].delete();
#else
                _tex_blend_front[i].delete();
                _tex_blend_back[i].delete();
#endif
                _tex_depth[i].delete();
            }
            _tex_color_front.delete();
            _tex_color_back.delete();

            _fbo_blend.delete();
            _fbo_depth.delete();
            _fbo_color.delete();

            _init.delete();
            _initing.delete();
            _blender.delete();
            _blending.delete();

            _peeler_color.delete();
            _peeler_depth.delete();
            _peeling_color.delete();
            _peeling_depth.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
#if multisample
            _tex_color_front = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_front = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_front.bind();
            _tex_color_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_front.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_front.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_front.unbind();

#if multisample
            _tex_color_back = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_back = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_back.bind();
            _tex_color_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_back.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_back.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_back.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_color_front, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_color_back, 0);
            _fbo_color.checkStatus();

            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_depth[i].unbind();
            }
            // Create Depth FrameBuffer 
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[0], 0);
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_depth[1], 0);
            _fbo_depth.checkStatus();

            for (int i = 0; i < 2; i++)
            {
                // Create Count Texture
#if draw_buffers_blend
                // .r = number of front fragments at ZiF
                // .g = number of back fragments at ZiF
#if multisample
                _tex_count[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_count[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_count[i].bind();
                _tex_count[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_count[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_count[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_count[i].unbind();
                // Create ID Texture
                // .r = max front primitive id
                // .g = max back  primitive id
#if multisample
                _tex_id[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_id[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_id[i].bind();
                _tex_id[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_id[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_id[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_id[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_id[i].unbind();
#else
                // Create Blend Texture
                // .r = number of fragments at ZiF
                // .a = max primitive id
#if multisample
                _tex_blend_front[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend_front[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend_front[i].bind();
                _tex_blend_front[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend_front[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend_front[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_front[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_blend_front[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend_front[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend_front[i].unbind();
                // .r = number of fragments at ZiB
                // .a = max primitive id
#if multisample
                _tex_blend_back[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend_back[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend_back[i].bind();
                _tex_blend_back[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend_back[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend_back[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_back[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_blend_back[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend_back[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend_back[i].unbind();
                _memory += RES_MB * 16;
#endif
            }
            // Create Blend FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
#if draw_buffers_blend
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_id[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_count[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_id[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_count[1], 0);
#else
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blend_front[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blend_back[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_blend_front[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_blend_back[1], 0);
#endif
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_blend.bind();
            Buffer.draw(2, 2);
#if draw_buffers_blend
            Buffer.setMask(true, true, false, false);
#else
            Buffer.setMask(true, false, false, true);
#endif
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(true, true, true, true);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {   
            _init = new Shader("peeling/dual_3p/max/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();
            
            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //
            _peeler_depth = new Shader("peeling/dual_3p/max/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_depth.bindUniform1("tex_depth", 0);
            }
            Shading.close();
            
            //
            _blender = new Shader("peeling/dual_3p/max/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending.bindUniform1("tex_depth", 0);
            }
            Shading.close();

            //
            _peeler_color = new Shader("peeling/dual_3p/max/peel_color", ShaderType.FragmentShader);
            _peeler_color.complile(ShaderType.FragmentShader);

            _peeling_color = new Shading();
            _peeling_color.create();
            _peeling_color.attachShader(Example._scene.renderVertex.id);
            _peeling_color.attachShader(Example._scene.renderGeometry.id);
            _peeling_color.attachShader(Example._scene.phongFragment.id);
            _peeling_color.attachShader(Example._scene.computePixelColor.id);
            _peeling_color.attachShader(_peeler_color.id);
            _peeling_color.link();

            _peeling_color.use();
            {
                _peeling_color.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_color.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                Blend.enable(0);
                Blend.enable(2);

#if draw_buffers_blend
                Blend.equation(0, BlendEquationMode.Max);
                Blend.equation(2, BlendEquationMode.Max);
#else
                Blend.equation(BlendEquationMode.Max);
#endif
                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0 + 2 * _currID);
                Buffer.setMask(2 * _currID, true, true, false, false);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    Shading _peeling_d;
                    if (Example._scene.multiFragmentRendering.passes == 0)
                        _peeling_d = _initing;
                    else
                    {
                        _peeling_d = _peeling_depth;
                        Texture.active(TextureUnit.Texture0);
                        _tex_depth[_prevID].bind();
                        Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                        _tex_count[_prevID].bind();
#else
                        _tex_blend_front[_prevID].bind();
                        Texture.active(TextureUnit.Texture2);
                        _tex_blend_back[_prevID].bind();
#endif
                    }

                    _peeling_d.use();
                    {
                        Example._scene.meshAnimation.drawModels(ref _peeling_d, false, false);
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(2 * _currID, true, true, true, true);

                Blend.disable(0);
                Blend.disable(2);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            return S;
        }
        protected override void blending_depth()
        {
            FPS.beginLocal();
            {
                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);

#if draw_buffers_blend
                Blend.equation(2 * _currID  , BlendEquationMode.Max);
                Blend.func    (2 * _currID+1, BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(2 * _currID+1, BlendEquationMode.FuncAdd);
#else
                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equationSeparate(BlendEquationMode.Max, BlendEquationMode.FuncAdd);
#endif
                _fbo_blend.bind();
                Buffer.draw(2, 2 * _currID);
#if draw_buffers_blend
                Buffer.setMask(2 * _currID    , true, true, false, false);
                Buffer.setMask(2 * _currID + 1, true, true, false, false);
#else
                Buffer.setMask(2 * _currID, true, false, false, true);
                Buffer.setMask(2 * _currID + 1, true, false, false, true);
#endif
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);

                _blending.use();
                {
                    Texture.active(TextureUnit.Texture0);
                    _tex_depth[_currID].bind();
                    Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend                    
                    _tex_count[_prevID].bind();
#else
                    _tex_blend_front[_prevID].bind();
#endif
                    Texture.active(TextureUnit.Texture2);
#if draw_buffers_blend                    
                    _tex_id[_prevID].bind();
#else
                    _tex_blend_back[_prevID].bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _blending, false, false);
                }
                Shading.close();

                Buffer.setMask(2 * _currID, true, true, true, true);
                Buffer.setMask(2 * _currID + 1, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Blending");
        }
        protected override void peel_color()
        {
            FPS.beginLocal();
            {
                Blend.enable(4);
                Blend.enable(5);

#if draw_buffers_blend
                Blend.equation(4, BlendEquationMode.Max);
                Blend.equation(5, BlendEquationMode.Max);
#else
                Blend.equation(BlendEquationMode.Max);
#endif
                _fbo_color.bind();
                Buffer.draw(2, 4);
                Buffer.clear(0, 0, 0, 0);

                _peeling_color.use();
                {
                    Texture.active(TextureUnit.Texture0);
#if draw_buffers_blend
                    _tex_id[_currID].bind();
#else
                    _tex_blend_front[_currID].bind();
                    Texture.active(TextureUnit.Texture1);
                    _tex_blend_back[_currID].bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _peeling_color, true, false);
                }
                Shading.close();

                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);
                Blend.disable(4);
                Blend.disable(5);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");
        }
        #endregion
        
        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
            {
                _weightSum.clearBuffers();
                if (!Example._scene.useBackgroundTexture)
                    _weightSum.clearBuffersBack(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
            }
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            Depth.disableTest();
            Depth.setMask(false);

            // 0. Rendering
            clearBuffers();
            Example._scene.updateShaders(ref _peeling_color);
            Example._scene.multiFragmentRendering.passes = 0;
            while (Example._scene.multiFragmentRendering.passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        blending_depth();
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent) _weightSum.compute(_tex_color_front, _tex_color_back);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                        Example._scene.meshAnimation.pose.computeDUALTranslucency(ref _tex_depth[_currID]);
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 3 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.enableTest();
                Depth.setMask(true);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);

                    if (Example._scene.multiFragmentRendering.useFront)
                        _tex_color_front.draw();
                    else
                        _tex_color_back.draw();
                }
            }
            FPS.endLocal("#. Final Draw");      
        }
        #endregion

        #region Empty functions
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class DUAL_3P_MinMax : Peeling
    {
        #region Private Properties

        Shader _peeler_color, _peeler_depth, _blender, _init;
        Shading _peeling_color, _peeling_depth, _blending, _initing;

        FrameBuffer _fbo_blend;
        FrameBuffer _fbo_color;
        FrameBuffer _fbo_depth;

        Texture[] _tex_color_front = new Texture[2];
        Texture[] _tex_color_back = new Texture[2];
        Texture[] _tex_depth = new Texture[2];

#if draw_buffers_blend
        Texture[] _tex_count = new Texture[2];
        Texture[] _tex_id = new Texture[2];
#else
        Texture[] _tex_blend_front = new Texture[2];
        Texture[] _tex_blend_back = new Texture[2];
#endif
        #endregion

        #region Constructors
        public DUAL_3P_MinMax() : base()
        {
            _weightSum = Example._scene.weightSumDUAL;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
            {
#if draw_buffers_blend                
                _tex_count[i].delete();
                _tex_id[i].delete();
#else
                _tex_blend_front[i].delete();
                _tex_blend_back[i].delete();
#endif
                _tex_depth[i].delete();
                _tex_color_front[i].delete();
                _tex_color_back[i].delete();
            }

            _fbo_blend.delete();
            _fbo_depth.delete();
            _fbo_color.delete();

            _init.delete();
            _initing.delete();
            _blender.delete();
            _blending.delete();

            _peeler_color.delete();
            _peeler_depth.delete();
            _peeling_color.delete();
            _peeling_depth.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            for (int i = 0; i < 2; i++)
            {

#if multisample
                _tex_color_front[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_color_front[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_color_front[i].bind();
                _tex_color_front[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color_front[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color_front[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color_front[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_color_front[i].image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_color_front[i].image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_color_front[i].unbind();

#if multisample
                _tex_color_back[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_color_back[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_color_back[i].bind();
                _tex_color_back[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color_back[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color_back[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color_back[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_color_back[i].image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_color_back[i].image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_color_back[i].unbind();
            }
            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_color_front[0], 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_color_front[1], 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment6, ref _tex_color_back[0] , 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment7, ref _tex_color_back[1] , 0);
            _fbo_color.checkStatus();

            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_depth[i].unbind();
            }
            // Create Depth FrameBuffer 
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[0], 0);
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_depth[1], 0);
            _fbo_depth.checkStatus();

            for (int i = 0; i < 2; i++)
            {
                // Create Count Texture
#if draw_buffers_blend
                // .r = number of front fragments at ZiF
                // .g = number of back fragments at ZiF
#if multisample
                _tex_count[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_count[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_count[i].bind();
                _tex_count[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_count[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_count[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_count[i].unbind();
                // Create ID Texture
                // .r = min front primitive id
                // .g = max front primitive id
                // .b = min back  primitive id
                // .a = max back  primitive id
#if multisample
                _tex_id[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_id[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_id[i].bind();
                _tex_id[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_id[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_id[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_id[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_id[i].unbind();
#else
                // Create Blend Texture
                // .r = number of fragments at ZiF
                // .a = max primitive id
#if multisample
                _tex_blend_front[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend_front[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend_front[i].bind();
                _tex_blend_front[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend_front[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend_front[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_front[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_blend_front[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend_front[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend_front[i].unbind();
                // .r = number of fragments at ZiB
                // .a = max primitive id
#if multisample
                _tex_blend_back[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend_back[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend_back[i].bind();
                _tex_blend_back[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend_back[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend_back[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_back[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_blend_back[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend_back[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend_back[i].unbind();
                _memory += RES_MB * 16;
#endif
            }
            // Create Blend FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
#if draw_buffers_blend
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_id[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_count[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_id[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_count[1], 0);
#else
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blend_front[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blend_back[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_blend_front[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_blend_back[1], 0);
#endif
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_blend.bind();
            Buffer.draw(2, 2);
#if !draw_buffers_blend
            Buffer.setMask(2, true, true, false, true);
            Buffer.setMask(3, true, true, false, true);
#endif
            Buffer.clear(0, 0, 0, 0);
#if !draw_buffers_blend
            Buffer.setMask(2, true, true, true, true);
            Buffer.setMask(3, true, true, true, true);
#endif
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            //
            _init = new Shader("peeling/dual_3p/min_max/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //
            _peeler_depth = new Shader("peeling/dual_3p/min_max/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_depth.bindUniform1("tex_depth", 0);
            }
            Shading.close();

            //
            _blender = new Shader("peeling/dual_3p/min_max/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //
            _peeler_color = new Shader("peeling/dual_3p/min_max/peel_color", ShaderType.FragmentShader);
            _peeler_color.complile(ShaderType.FragmentShader);

            _peeling_color = new Shading();
            _peeling_color.create();
            _peeling_color.attachShader(Example._scene.renderVertex.id);
            _peeling_color.attachShader(Example._scene.renderGeometry.id);
            _peeling_color.attachShader(Example._scene.phongFragment.id);
            _peeling_color.attachShader(Example._scene.computePixelColor.id);
            _peeling_color.attachShader(_peeler_color.id);
            _peeling_color.link();

            _peeling_color.use();
            {
                _peeling_color.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_color.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                Blend.enable(0);
                Blend.enable(2);

#if draw_buffers_blend
                Blend.equation(0, BlendEquationMode.Max);
                Blend.equation(2, BlendEquationMode.Max);
#else
                Blend.equation(BlendEquationMode.Max);
#endif
                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0 + 2 * _currID);
                Buffer.setMask(2 * _currID, true, true, false, false);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    Shading _peeling_d;
                    if (Example._scene.multiFragmentRendering.passes == 0)
                        _peeling_d = _initing;
                    else
                    {
                        _peeling_d = _peeling_depth;
                        Texture.active(TextureUnit.Texture0);
                        _tex_depth[_prevID].bind();
                        Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                        _tex_count[_prevID].bind();
#else
                        _tex_blend_front[_prevID].bind();
                        Texture.active(TextureUnit.Texture2);
                        _tex_blend_back[_prevID].bind();
#endif
                    }
                    _peeling_d.use();
                    {
                        Example._scene.meshAnimation.drawModels(ref _peeling_d, false, false);
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(2 * _currID, true, true, true, true);

                Blend.disable(0);
                Blend.disable(2);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            return S;
        }
        protected override void blending_depth()
        {
            FPS.beginLocal();
            {
                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);

#if draw_buffers_blend
                Blend.equation(2 * _currID  , BlendEquationMode.Max);
                Blend.func    (2 * _currID+1, BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(2 * _currID+1, BlendEquationMode.FuncAdd);
#else
                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equationSeparate(BlendEquationMode.Max, BlendEquationMode.FuncAdd);
#endif
                _fbo_blend.bind();
                Buffer.draw(2, 2 * _currID);

#if draw_buffers_blend
                Buffer.draw(DrawBufferMode.ColorAttachment0 + 2 * _currID);
                Buffer.clear(float.MinValue, 0.0f, float.MinValue, 0.0f);
                Buffer.draw(DrawBufferMode.ColorAttachment0 + 2 * _currID + 1);
                Buffer.setMask(2 * _currID + 1, true, true, false, false);
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);

                Buffer.draw(2, 2 * _currID);
#else
                Buffer.draw(2, 2 * _currID);
                Buffer.setMask(2 * _currID, true, true, false, true);
                Buffer.setMask(2 * _currID + 1, true, true, false, true);
                Buffer.clear(float.MinValue, 0.0f, 0.0f, 0.0f);
#endif
                _blending.use();
                {
                    Texture.active(TextureUnit.Texture0);
                    _tex_depth[_currID].bind();
                    Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend                    
                    _tex_count[_prevID].bind();
#else
                    _tex_blend_front[_prevID].bind();
#endif
                    Texture.active(TextureUnit.Texture2);
#if draw_buffers_blend                    
                    _tex_id[_prevID].bind();
#else
                    _tex_blend_back[_prevID].bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _blending, false, false);
                }
                Shading.close();

#if !draw_buffers_blend
                Buffer.setMask(2 * _currID, true, true, true, true);
#endif
                Buffer.setMask(2 * _currID + 1, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Blending");
        }
        protected override void peel_color()
        {
            FPS.beginLocal();
            {

                Blend.enable(4);
                Blend.enable(5);
                Blend.enable(6);
                Blend.enable(7);

#if draw_buffers_blend
                Blend.equation(4, BlendEquationMode.Max);
                Blend.equation(5, BlendEquationMode.Max);
                Blend.equation(6, BlendEquationMode.Max);
                Blend.equation(7, BlendEquationMode.Max);
#else
                Blend.equation(BlendEquationMode.Max);
#endif
                _fbo_color.bind();
                Buffer.draw(4, 4);
                Buffer.clear(0, 0, 0, 0);

                _peeling_color.use();
                {
                    Texture.active(TextureUnit.Texture0);
#if draw_buffers_blend
                    _tex_id[_currID].bind();
#else
                    _tex_blend_front[_currID].bind();
                    Texture.active(TextureUnit.Texture1);
                    _tex_blend_back[_currID].bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _peeling_color, true, false);
                }
                Shading.close();

                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);
                Blend.disable(4);
                Blend.disable(5);
                Blend.disable(6);
                Blend.disable(7);
            }
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
            {
                _weightSum.clearBuffers();
                if (!Example._scene.useBackgroundTexture)
                    _weightSum.clearBuffersBack(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
            }
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            Depth.disableTest();
            Depth.setMask(false);

            // 0. Rendering
            clearBuffers();
            Example._scene.updateShaders(ref _peeling_color);
            Example._scene.multiFragmentRendering.passes = 0;
            while (Example._scene.multiFragmentRendering.passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        blending_depth();
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent)
                    {
                        _weightSum.compute(_tex_color_front[0], _tex_color_back[0]);
                        _weightSum.compute(_tex_color_front[1], _tex_color_back[1]);
                    }
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                        Example._scene.meshAnimation.pose.computeDUALTranslucency(ref _tex_depth[_currID]);
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 3 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.enableTest();
                Depth.setMask(true);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);

                    if (Example._scene.multiFragmentRendering.useFront)
                        _tex_color_front[Example._scene.multiFragmentRendering.useMax ? 1 : 0].draw();
                    else
                        _tex_color_back[Example._scene.multiFragmentRendering.useMax ? 1 : 0].draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty functions
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class DUAL_2P_Max : Peeling
    {
        #region Private Properties

        Shader _peeler, _blender, _init;
        Shading _peeling, _blending, _initing;

        FrameBuffer _fbo_blend;
        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        Texture   _tex_color_front;
        Texture   _tex_color_back;
        Texture[] _tex_depth = new Texture[2];

#if draw_buffers_blend                
        Texture[] _tex_id = new Texture[2];
        Texture[] _tex_count = new Texture[2];
#else
        Texture[] _tex_blend_front = new Texture[2];
        Texture[] _tex_blend_back = new Texture[2];
#endif
        #endregion

        #region Constructors
        public DUAL_2P_Max() : base()
        {
            _weightSum = Example._scene.weightSumDUAL;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
            {
                _fbo_peel[i].delete();
                _tex_depth[i].delete();
#if draw_buffers_blend
                _tex_id[i].delete();
                _tex_count[i].delete();                
#else
                _tex_blend_front[i].delete();
                _tex_blend_back[i].delete();
#endif
            }
            _tex_color_front.delete();
            _tex_color_back.delete();

            _fbo_blend.delete();

            _init.delete();
            _initing.delete();
            _blender.delete();
            _blending.delete();
            _peeler.delete();
            _peeling.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
#if multisample
            _tex_color_front = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_front = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_front.bind();
            _tex_color_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_front.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_front.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_front.unbind();

#if multisample
            _tex_color_back = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_back = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_back.bind();
            _tex_color_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_back.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_back.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_back.unbind();

            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_depth[i].unbind();
            }
            
            _fbo_peel[0] = new FrameBuffer();
            _fbo_peel[0].bind();
            _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_depth[0], 0);
            _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_color_front, 0);
            _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_color_back, 0);
            _fbo_peel[0].checkStatus();

            _fbo_peel[1] = new FrameBuffer();
            _fbo_peel[1].bind();
            _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_depth[1], 0);
            _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_color_front, 0);
            _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_color_back, 0);
            _fbo_peel[1].checkStatus();
            FrameBuffer.unbind();

            for (int i = 0; i < 2; i++)
            {
#if draw_buffers_blend
                // Create Count Texture
                // .r = number of front fragments at ZiF
                // .g = number of back fragments at ZiF
#if multisample
                _tex_count[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_count[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_count[i].bind();
                _tex_count[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_count[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_count[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_count[i].unbind();
                // Create id Texture
                // .r = max front primitive id
                // .g = max back  primitive id
#if multisample
                _tex_id[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_id[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_id[i].bind();
                _tex_id[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_id[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_id[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_id[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_id[i].unbind();

#else
                // .r = number of front fragments at ZiF
                // .a = number of back fragments at ZiF

#if multisample
                _tex_blend_front[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend_front[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend_front[i].bind();
                _tex_blend_front[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend_front[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend_front[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_front[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_blend_front[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend_front[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend_front[i].unbind();
                              

                // .r = max front primitive id
                // .a = max back  primitive id
#if multisample
                _tex_blend_back[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend_back[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend_back[i].bind();
                _tex_blend_back[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend_back[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend_back[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_back[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_back[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
#if multisample
                _tex_blend_back[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend_back[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend_back[i].unbind();
#endif
            }
            // Create FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
#if draw_buffers_blend            
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_id[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_count[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_id[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_count[1], 0);
#else
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blend_front[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blend_back[0] , 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_blend_front[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_blend_back[1] , 0);
#endif
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_blend.bind();
            Buffer.draw(2, 2);
#if draw_buffers_blend
            Buffer.setMask(2, true, true, false, false);
            Buffer.setMask(3, true, true, false, false);
#else
            Buffer.setMask(2, true, false, false, true);
            Buffer.setMask(3, true, false, false, true);
#endif
            Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);

            Buffer.setMask(2, true, true, true, true);
            Buffer.setMask(3, true, true, true, true);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/dual_2p/max/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peeler = new Shader("peeling/dual_2p/max/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _blender = new Shader("peeling/dual_2p/max/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);
                Blend.enable(4);
                Blend.enable(5);

#if !draw_buffers_blend
                Blend.equation(BlendEquationMode.Max);
#endif
                _fbo_peel[_currID].bind();
                Buffer.draw(DrawBufferMode.ColorAttachment3);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    if (Example._scene.multiFragmentRendering.passes == 0)
                    {
#if draw_buffers_blend
                        Blend.equation(3, BlendEquationMode.Max);
#endif
                        Buffer.setMask(3, true, true, false, false);
                        _initing.use();
                        {
                            Example._scene.meshAnimation.drawModels(ref _initing, false, false);
                        }
                        Buffer.setMask(3, true, true, true, true);
                    }
                    else
                    {
#if draw_buffers_blend
                        Blend.equation(3, BlendEquationMode.Max);
                        Blend.equation(4, BlendEquationMode.Max);
                        Blend.equation(5, BlendEquationMode.Max);
#endif
                        Buffer.draw(2, 4);
                        Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);
                        Buffer.draw(3, 3);

                        _peeling.use();
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                            Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                            _tex_count[_prevID].bind();
#else
                            _tex_blend_front[_prevID].bind();
#endif
                            Texture.active(TextureUnit.Texture4);
#if draw_buffers_blend
                            _tex_id[_prevID].bind();
#else
                            _tex_blend_back[_prevID].bind();
#endif
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);
                Blend.disable(4);
                Blend.disable(5);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            return S;
        }
        protected override void blending_depth()
        {
            FPS.beginLocal();
            {
                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);

#if draw_buffers_blend
                Blend.equation(2 * _currID, BlendEquationMode.Max);
                Blend.func    (2 * _currID+1, BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(2 * _currID+1, BlendEquationMode.FuncAdd);
#else
                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equationSeparate(BlendEquationMode.Max, BlendEquationMode.FuncAdd);
#endif
                _fbo_blend.bind();
                Buffer.draw(2, 2 * _currID);

#if draw_buffers_blend
                Buffer.setMask(2 * _currID  , true, true, false, false);
                Buffer.setMask(2 * _currID+1, true, true, false, false);
#else
                Buffer.setMask(2 * _currID, true, false, false, true);
                Buffer.setMask(2 * _currID + 1, true, false, false, true);
#endif
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);

                _blending.use();
                {
                    Texture.active(TextureUnit.Texture0);
                    _tex_depth[_currID].bind();
                    Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                    _tex_count[_prevID].bind();
#else
                    _tex_blend_front[_prevID].bind();
#endif
                    Texture.active(TextureUnit.Texture2);
#if draw_buffers_blend              
                    _tex_id[_prevID].bind();
#else
                    _tex_blend_back[_prevID].bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _blending, false, false);
                }
                Shading.close();

                Buffer.setMask(2 * _currID, true, true, true, true);
                Buffer.setMask(2 * _currID + 1, true, true, true, true);

                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Blending");
        }
        #endregion 

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
            {
                _weightSum.clearBuffers();
                if (!Example._scene.useBackgroundTexture)
                    _weightSum.clearBuffersBack(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
            }
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            Depth.disableTest();
            Depth.setMask(false);

            // 0. Rendering
            clearBuffers();
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (true)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent && Example._scene.multiFragmentRendering.passes > 0) _weightSum.compute(_tex_color_front, _tex_color_back);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent && Example._scene.multiFragmentRendering.passes > 0)
                        Example._scene.meshAnimation.pose.computeDUALTranslucency(ref _tex_depth[_currID]);

                    if (Example._scene.multiFragmentRendering.passes == Example._scene.multiFragmentRendering.layers + 1)
                        break;

                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        blending_depth();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes - 1;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);

                    if (Example._scene.multiFragmentRendering.useFront)
                        _tex_color_front.draw();
                    else
                        _tex_color_back.draw();
                }
            }
            FPS.endLocal("#. Final Draw");       
        }
        #endregion

        #region Empty functions
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        #endregion
    }

    public class DUAL_2P_MinMax : Peeling
    {
        #region Private Properties

        Shader _peeler, _blender, _init;
        Shading _peeling, _blending, _initing;

        FrameBuffer _fbo_blend;
        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        Texture[] _tex_color_front = new Texture[2];
        Texture[] _tex_color_back = new Texture[2];
        Texture[] _tex_depth = new Texture[2];

#if draw_buffers_blend                
        Texture[] _tex_id = new Texture[2];
        Texture[] _tex_count = new Texture[2];
#else
        Texture[] _tex_blend_front = new Texture[2];
        Texture[] _tex_blend_back = new Texture[2];
#endif
        #endregion

        #region Constructors
        public DUAL_2P_MinMax() : base()
        {
            _weightSum = Example._scene.weightSumDUAL;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
            {
                _fbo_peel[i].delete();
                _tex_depth[i].delete();
#if draw_buffers_blend
                _tex_id[i].delete();
                _tex_count[i].delete();                
#else
                _tex_blend_front[i].delete();
                _tex_blend_back[i].delete();
#endif
                _tex_color_front[i].delete();
                _tex_color_back[i].delete();
            }
            _fbo_blend.delete();

            _init.delete();
            _initing.delete();
            _blender.delete();
            _blending.delete();
            _peeler.delete();
            _peeling.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_color_front[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_color_front[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_color_front[i].bind();
                _tex_color_front[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color_front[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color_front[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color_front[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_color_front[i].image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_color_front[i].image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_color_front[i].unbind();

#if multisample
                _tex_color_back[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_color_back[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_color_back[i].bind();
                _tex_color_back[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color_back[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color_back[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color_back[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_color_back[i].image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_color_back[i].image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_color_back[i].unbind();

#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_depth[i].unbind();
            }

            _fbo_peel[0] = new FrameBuffer();
            _fbo_peel[0].bind();
            _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_depth[0], 0);
            _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_color_front[0], 0);
            _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_color_front[1], 0);
            _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment6, ref _tex_color_back[0], 0);
            _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment7, ref _tex_color_back[1], 0);
            _fbo_peel[0].checkStatus();

            _fbo_peel[1] = new FrameBuffer();
            _fbo_peel[1].bind();
            _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_depth[1], 0);
            _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_color_front[0], 0);
            _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_color_front[1], 0);
            _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment6, ref _tex_color_back[0], 0);
            _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment7, ref _tex_color_back[1], 0);
            _fbo_peel[1].checkStatus();

            for (int i = 0; i < 2; i++)
            {
#if draw_buffers_blend
                // Create Count Texture
                // .r = number of front fragments at ZiF
                // .g = number of back fragments at ZiF
#if multisample
                _tex_count[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_count[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_count[i].bind();
                _tex_count[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_count[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_count[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_count[i].unbind();
                // Create id Texture
                // .r = max front primitive id
                // .g = max back  primitive id
#if multisample
                _tex_id[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_id[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_id[i].bind();
                _tex_id[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_id[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_id[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_id[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_id[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_id[i].unbind();

#else
                // .r = number of front fragments at ZiF
                // .a = number of back fragments at ZiF
#if multisample
                _tex_blend_front[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend_front[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend_front[i].bind();
                _tex_blend_front[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend_front[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend_front[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_front[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_front[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
#if multisample
                _tex_blend_front[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend_front[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend_front[i].unbind();

                // .r = max front primitive id
                // .a = max back  primitive id
#if multisample
                _tex_blend_back[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend_back[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blend_back[i].bind();
                _tex_blend_back[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend_back[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend_back[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_back[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_blend_back[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
#if multisample
                _tex_blend_back[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend_back[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend_back[i].unbind();
#endif
            }
            // Create FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
#if draw_buffers_blend            
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_id[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_count[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_id[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_count[1], 0);
#else
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blend_front[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blend_back[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_blend_front[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_blend_back[1], 0);
#endif
            _fbo_blend.checkStatus();

            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_blend.bind();
            Buffer.draw(2, 2);
#if draw_buffers_blend
            Buffer.setMask(3, true, true, false, false);
#else
            Buffer.setMask(2, true, true, false, true);
            Buffer.setMask(3, true, true, false, true);
#endif
            Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);

            Buffer.setMask(2, true, true, true, true);
            Buffer.setMask(3, true, true, true, true);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/dual_2p/min_max/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peeler = new Shader("peeling/dual_2p/min_max/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);

            }
            Shading.close();

            _blender = new Shader("peeling/dual_2p/min_max/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);
                Blend.enable(4);
                Blend.enable(5);
                Blend.enable(6);
                Blend.enable(7);

#if !draw_buffers_blend
                Blend.equation(BlendEquationMode.Max);
#endif
                _fbo_peel[_currID].bind();
                Buffer.draw(DrawBufferMode.ColorAttachment3);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    if (Example._scene.multiFragmentRendering.passes == 0)
                    {
#if draw_buffers_blend
                        Blend.equation(3, BlendEquationMode.Max);
#endif
                        Buffer.setMask(3, true, true, false, false);
                        _initing.use();
                        {
                            Example._scene.meshAnimation.drawModels(ref _initing, false, false);
                        }
                        Buffer.setMask(3, true, true, true, true);
                    }
                    else
                    {
#if draw_buffers_blend
                        Blend.equation(3, BlendEquationMode.Max);
                        Blend.equation(4, BlendEquationMode.Max);
                        Blend.equation(5, BlendEquationMode.Max);
                        Blend.equation(6, BlendEquationMode.Max);
                        Blend.equation(7, BlendEquationMode.Max);
#endif
                        Buffer.draw(4, 4);
                        Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);
                        Buffer.draw(5, 3);

                        _peeling.use();
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                            Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                            _tex_count[_prevID].bind();
#else
                            _tex_blend_front[_prevID].bind();
#endif
                            Texture.active(TextureUnit.Texture4);
#if draw_buffers_blend
                            _tex_id[_prevID].bind();
#else
                            _tex_blend_back[_prevID].bind();
#endif
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);
                Blend.disable(4);
                Blend.disable(5);
                Blend.disable(6);
                Blend.disable(7);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            return S;
        }
        protected override void blending_depth()
        {
            FPS.beginLocal();
            {

                Blend.enable(0);
                Blend.enable(1);
                Blend.enable(2);
                Blend.enable(3);

#if draw_buffers_blend
                Blend.equation(2 * _currID, BlendEquationMode.Max);
                Blend.func    (2 * _currID+1, BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(2 * _currID+1, BlendEquationMode.FuncAdd);
#else
                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equationSeparate(BlendEquationMode.Max, BlendEquationMode.FuncAdd);
#endif
                _fbo_blend.bind();

#if draw_buffers_blend
                Buffer.draw(DrawBufferMode.ColorAttachment0 + 2 * _currID);
                Buffer.clear(float.MinValue, 0.0f, float.MinValue, 0.0f);
                Buffer.draw(DrawBufferMode.ColorAttachment0 + 2 * _currID + 1);
                Buffer.setMask(2 * _currID + 1, true, true, false, false);
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);

                Buffer.draw(2, 2 * _currID);
#else
                Buffer.draw(2, 2 * _currID);

                Buffer.setMask(2 * _currID, true, true, false, true);
                Buffer.setMask(2 * _currID + 1, true, true, false, true);
                Buffer.clear(float.MinValue, 0.0f, 0.0f, 0.0f);
#endif
                _blending.use();
                {
                    Texture.active(TextureUnit.Texture0);
                    _tex_depth[_currID].bind();
                    Texture.active(TextureUnit.Texture1);
#if draw_buffers_blend
                    _tex_count[_prevID].bind();
#else
                    _tex_blend_front[_prevID].bind();
#endif
                    Texture.active(TextureUnit.Texture2);
#if draw_buffers_blend              
                    _tex_id[_prevID].bind();
#else
                    _tex_blend_back[_prevID].bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _blending, false, false);
                }
                Shading.close();

                Buffer.setMask(2 * _currID, true, true, true, true);
                Buffer.setMask(2 * _currID + 1, true, true, true, true);

                Blend.disable(0);
                Blend.disable(1);
                Blend.disable(2);
                Blend.disable(3);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Blending");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
            {
                _weightSum.clearBuffers();
                if (!Example._scene.useBackgroundTexture)
                    _weightSum.clearBuffersBack(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
            }
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            Depth.disableTest();
            Depth.setMask(false);

            // 0. Rendering
            clearBuffers();
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (true)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent && Example._scene.multiFragmentRendering.passes > 0)
                    {
                        _weightSum.compute(_tex_color_front[0], _tex_color_back[0]);
                        _weightSum.compute(_tex_color_front[1], _tex_color_back[1]);
                    }
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent && Example._scene.multiFragmentRendering.passes > 0)
                        Example._scene.meshAnimation.pose.computeDUALTranslucency(ref _tex_depth[_currID]);

                    if (Example._scene.multiFragmentRendering.passes == Example._scene.multiFragmentRendering.layers + 1)
                        break;

                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        blending_depth();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes - 1;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);

                    if (Example._scene.multiFragmentRendering.useFront)
                        _tex_color_front[Example._scene.multiFragmentRendering.useMax ? 1 : 0].draw();
                    else
                        _tex_color_back[Example._scene.multiFragmentRendering.useMax ? 1 : 0].draw();
                }
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty functions
        protected override void peel_culling(){;}
        protected override void peel_color()  {;}
        #endregion
    }
    
    public class DUAL_KB_1B : Peeling
    {
        #region Private Properties

        Shader _init, _peeler, _peeler_depth, _resolve;
        Shading _initing, _peeling, _peeling_depth, _resolving;

        FrameBuffer _fbo_color;
        FrameBuffer _fbo_peel;
        FrameBuffer _fbo_depth;

        Texture[] _tex_peel = new Texture[8];
        Texture[] _tex_depth = new Texture[2];
        Texture _tex_color_front;
        Texture _tex_color_back;

        #endregion

        #region Constructors
        public DUAL_KB_1B(): base()
        {
            _weightSum = new WeightSumDual();
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
                _tex_depth[i].delete();
            for (int i = 0; i < _sizeMRT; i++)
                _tex_peel[i].delete();

            _tex_color_front.delete();
            _tex_color_back.delete();

            _fbo_peel.delete();
            _fbo_color.delete();
            _fbo_depth.delete();

            _init.delete();
            _initing.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();

            _peeler.delete();
            _peeling.delete();

            _resolve.delete();
            _resolving.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
#if multisample
            _tex_color_front = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_front = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_front.bind();
            _tex_color_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_front.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_front.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_front.unbind();
#if multisample
            _tex_color_back = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_back = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_back.bind();
            _tex_color_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color_back.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_back.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_back.unbind();

            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color_front, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_color_back, 0);
            _fbo_color.checkStatus();

            for (int i = 0; i < _sizeMRT; i++)
            {
#if multisample
                _tex_peel[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_peel[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_peel[i].bind();
                _tex_peel[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
#if packing
                _tex_peel[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false); 
                _memory += RES_MB * 16 * _multisamples;
#else
#if sorted_by_id
                _tex_peel[i].image2DMS(_multisamples, PixelInternalFormat.Rg32ui, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_peel[i].image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
                _memory += RES_MB * 16 * _multisamples;
#endif

#endif
#else
#if packing
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 16;
#else
#if sorted_by_id
                _tex_peel[i].image2D(0, PixelInternalFormat.Rg32ui, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 8;
#else
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
#endif
#endif
                _tex_peel[i].unbind();
            }
            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            for (int i = 0; i < _sizeMRT; i++)
                _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0 + i, ref _tex_peel[i], 0);
            _fbo_peel.checkStatus();

            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_depth[i].unbind();
            }
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[0], 0);
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_depth[1], 0);
            _fbo_depth.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/dual_kb_1b/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peeler_depth = new Shader("peeling/dual_kb_1b/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_depth.bindUniform1("tex_depth", 0);
            }
            Shading.close();

            /////////////////////
            _peeler = new Shader("peeling/dual_kb_1b/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);               
                //_peeling.bindUniform1("bufferSize", _bufferSize);
            }
            Shading.close();

            // resolve
            _resolve = new Shader("peeling/dual_kb_1b/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                //_resolving.bindUniform1("bufferSize", _bufferSize);
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion 

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Blend.equation(BlendEquationMode.Max);
                Blend.enable();

                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
                Buffer.setMask(_currID, true, true, false, false);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    if (Example._scene.multiFragmentRendering.passes == 0)
                    {
                        _initing.use();
                        {
                            Example._scene.meshAnimation.drawModels(ref _initing, false, false);
                        }
                        Shading.close();
                    }
                    else
                    {
                        _peeling_depth.use();
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                            Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                        }
                        Shading.close();
                    }
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(_currID, true, true, true, true);

                Blend.disable();
                Depth.enableTest();
                Depth.setMask(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            return S;

        }
        protected override void peel_color()
        {
            // 1. Peeling
            FPS.beginLocal();
            {
                _fbo_peel.bind();
                Buffer.draw(_sizeMRT, 0);

                Depth.disableTest();
                Depth.setMask(false);

#if packing
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);
#elif sorted_by_id
                Buffer.setMask(true, true, false, false);
                Buffer.clear(0, 0, 0, 0);
#else
                if (Example._scene.multiFragmentRendering.translucent)
                    Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, 0.0f, 0.0f);
                else
                    Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 0.0f);
#endif
                _peeling.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_peel[0].bind();
                    Texture.active(TextureUnit.Texture1); _tex_peel[1].bind();
                    for (int i = 4; i < _sizeMRT + 2; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i); _tex_peel[i - 2].bind();
                    }
                    Texture.active(TextureUnit.Texture10); _tex_depth[_currID].bind();
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
#if sorted_by_id
                Buffer.setMask(true, true, true, true);
#endif
                Depth.enableTest();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");

            // 2. Resolve
            FPS.beginLocal();
            {
                _fbo_color.bind();
                Buffer.draw(2, 0);
                Buffer.clear(0, 0, 0, 0);

                _resolving.use();
                {
                    _resolving.bindUniform1("transparency", Example._scene.meshAnimation.poses.Count > 0 ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
#if packing
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % (_bufferSize * 2));
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % (_sizeMRT / 2));
#endif
                    for (int i = 0; i < _sizeMRT; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i);
                        _tex_peel[i].bind();
                    }
                    Texture.image.draw();
                }
                Shading.close();

                Depth.setMask(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");
        }
        #endregion 

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
            {
                _weightSum.clearBuffers();
                if (!Example._scene.useBackgroundTexture)
                    _weightSum.clearBuffersBack(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
            }
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // 0. Rendering
            int passes = 0;
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();
#if packing
                    passes += _bufferSize*2;
#else
                    passes += _sizeMRT / 2;
#endif
                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent) _weightSum.compute(_tex_color_front, _tex_color_back);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                        Example._scene.meshAnimation.pose.computeDUALTranslucency(ref _tex_depth[_currID]);
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);

                    if (Example._scene.multiFragmentRendering.useFront)
                        _tex_color_front.draw();
                    else
                        _tex_color_back.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion 

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling() { ;}
        #endregion
    }

    public class DUAL_KB_2B : Peeling
    {
        #region Private Properties

        Shader _init, _peeler, _peeler_depth, _resolve;
        Shading _initing, _peeling, _peeling_depth, _resolving;

        FrameBuffer _fbo_color;
        FrameBuffer _fbo_depth;
        FrameBuffer _fbo_peel_front, _fbo_peel_back;

        Texture[] _tex_peel_front = new Texture[8];
        Texture[] _tex_peel_back  = new Texture[8];
        Texture[] _tex_depth = new Texture[2];

        Texture _tex_color_front;
        Texture _tex_color_back;

        #endregion

        #region Constructors
        public DUAL_KB_2B() : base()
        {
            _weightSum = Example._scene.weightSumDUAL;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
                _tex_depth[i].delete();
            for (int i = 0; i < _sizeMRT; i++)
            {
                _tex_peel_front[i].delete();
                _tex_peel_back[i].delete();
            }

            _tex_color_front.delete();
            _tex_color_back.delete();

            _fbo_peel_front.delete();
            _fbo_peel_back.delete();
            _fbo_color.delete();
            _fbo_depth.delete();

            _init.delete();
            _initing.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();

            _peeler.delete();
            _peeling.delete();

            _resolve.delete();
            _resolving.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
#if multisample
            _tex_color_front = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_front = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_front.bind();
            _tex_color_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_front.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_front.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_front.unbind();
#if multisample
            _tex_color_back = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_back = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_back.bind();
            _tex_color_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color_back.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_back.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_back.unbind();

            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color_front, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_color_back, 0);
            _fbo_color.checkStatus();

            for (int i = 0; i < _sizeMRT; i++)
            {
#if multisample
                _tex_peel_front[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_peel_front[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_peel_front[i].bind();
                _tex_peel_front[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel_front[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel_front[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_front[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
#if packing
                _tex_peel_front[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false); 
                _memory += RES_MB * 16 * _multisamples;
#else
#if sorted_by_id
                _tex_peel_front[i].image2DMS(_multisamples, PixelInternalFormat.Rg32ui, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_peel_front[i].image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
                _memory += RES_MB * 16 * _multisamples;
#endif

#endif
#else
#if packing
                _tex_peel_front[i].image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 16;
#else
#if sorted_by_id
                _tex_peel_front[i].image2D(0, PixelInternalFormat.Rg32ui, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 8;
#else
                _tex_peel_front[i].image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
#endif
#endif
                _tex_peel_front[i].unbind();
            }

            _fbo_peel_front = new FrameBuffer();
            _fbo_peel_front.bind();
            for (int i = 0; i < _sizeMRT; i++)
                _fbo_peel_front.attachTexture2D(FramebufferAttachment.ColorAttachment0 + i, ref _tex_peel_front[i], 0);
            _fbo_peel_front.checkStatus();
            FrameBuffer.unbind();

            for (int i = 0; i < _sizeMRT; i++)
            {
#if multisample
                _tex_peel_back[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_peel_back[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_peel_back[i].bind();
                _tex_peel_back[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel_back[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel_back[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_back[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
#if packing
                _tex_peel_back[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false); 
                _memory += RES_MB * 16 * _multisamples;
#else
#if sorted_by_id
                _tex_peel_back[i].image2DMS(_multisamples, PixelInternalFormat.Rg32ui, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_peel_back[i].image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
                _memory += RES_MB * 16 * _multisamples;
#endif

#endif
#else
#if packing
                _tex_peel_back[i].image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 16;
#else
#if sorted_by_id
                _tex_peel_back[i].image2D(0, PixelInternalFormat.Rg32ui, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 8;
#else
                _tex_peel_back[i].image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
#endif
#endif
                _tex_peel_back[i].unbind();
            }

            _fbo_peel_back = new FrameBuffer();
            _fbo_peel_back.bind();
            for (int i = 0; i < _sizeMRT; i++)
                _fbo_peel_back.attachTexture2D(FramebufferAttachment.ColorAttachment0 + i, ref _tex_peel_back[i], 0);
            _fbo_peel_back.checkStatus();
            FrameBuffer.unbind();

            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_depth[i].unbind();
            }
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[0], 0);
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_depth[1], 0);
            _fbo_depth.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/dual_kb_2b/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peeler_depth = new Shader("peeling/dual_kb_2b/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            /////////////////////
            _peeler = new Shader("peeling/dual_kb_2b/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("bufferSize", _sizeMRT);
            }
            Shading.close();

            // resolve
            _resolve = new Shader("peeling/dual_kb_2b/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniform1("bufferSize", _sizeMRT);
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Blend.equation(BlendEquationMode.Max);
                Blend.enable();

                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
                Buffer.setMask(_currID, true, true, false, false);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    if (Example._scene.multiFragmentRendering.passes == 0)
                    {
                        _initing.use();
                        {
                            Example._scene.meshAnimation.drawModels(ref _initing, false, false);
                        }
                        Shading.close();
                    }
                    else
                    {
                        _peeling_depth.use();
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                            Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                        }
                        Shading.close();
                    }
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(_currID, true, true, true, true);

                Blend.disable();
                Depth.enableTest();
                Depth.setMask(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            return S;
        }
        protected override void peel_color()
        {
            // 1. Peeling B1
            FPS.beginLocal();
            {
                _fbo_peel_front.bind();
                Buffer.draw(_sizeMRT, 0);

                Depth.disableTest();
                Depth.setMask(false);
#if packing
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);
#elif sorted_by_id
                Buffer.setMask(true, true, false, false);
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);
#else
                if (Example._scene.multiFragmentRendering.translucent)
                    Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, 0.0f, 0.0f);
                else
                    Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 0.0f);
#endif
                _peeling.use();
                {
                    _peeling.bindUniform1("front", 1);
                    Texture.active(TextureUnit.Texture0); _tex_peel_front[0].bind();
                    Texture.active(TextureUnit.Texture1); _tex_peel_front[1].bind();
                    for (int i = 4; i < _sizeMRT + 2; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i); _tex_peel_front[i - 2].bind();
                    }
                    Texture.active(TextureUnit.Texture10); _tex_depth[_currID].bind();
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color B1)");

            // 2. Peeling B2
            FPS.beginLocal();
            {
                _fbo_peel_back.bind();
                Buffer.draw(_sizeMRT, 0);
#if packing || sorted_by_id
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);
#else
                if (Example._scene.multiFragmentRendering.translucent)
                    Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, 0.0f, 0.0f);
                else
                    Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 0.0f);
#endif
                _peeling.use();
                {
                    _peeling.bindUniform1("front", 0);

                    Texture.active(TextureUnit.Texture0); _tex_peel_back[0].bind();
                    Texture.active(TextureUnit.Texture1); _tex_peel_back[1].bind();
                    for (int i = 4; i < _sizeMRT + 2; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i); _tex_peel_back[i - 2].bind();
                    }
                    Texture.active(TextureUnit.Texture10); _tex_depth[_currID].bind();
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
#if sorted_by_id
                Buffer.setMask(true, true, true, true);
#endif
                Depth.enableTest();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color B2)");

            // 3. Resolve - B1
            FPS.beginLocal();
            {
                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("front", 1);
                    _resolving.bindUniform1("transparency", Example._scene.meshAnimation.poses.Count > 0 ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
#if packing
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % (_bufferSize * 4));
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeMRT);
#endif
                    for (int i = 0; i < _sizeMRT; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i);
                        _tex_peel_front[i].bind();
                    }
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve B1");

            // 4. Resolve - B2
            FPS.beginLocal();
            {
                Buffer.draw(DrawBufferMode.ColorAttachment1);
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("front", 0);
                    _resolving.bindUniform1("transparency", Example._scene.meshAnimation.poses.Count > 0 ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
#if packing
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % (_bufferSize * 4));
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeMRT);
#endif
                    for (int i = 0; i < _sizeMRT; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i);
                        _tex_peel_back[i].bind();
                    }
                    Texture.image.draw();
                }
                Shading.close();

                Depth.setMask(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve B1");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
            {
                _weightSum.clearBuffers();
                if (!Example._scene.useBackgroundTexture)
                    _weightSum.clearBuffersBack(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
            }
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // 0. Rendering
            int passes = 0;
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();
#if packing
                    passes += _bufferSize*4;
#else
                    passes += _sizeMRT;
#endif
                    Example._scene.multiFragmentRendering.passes++;
                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent) _weightSum.compute(_tex_color_front, _tex_color_back);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                        Example._scene.meshAnimation.pose.computeDUALTranslucency(ref _tex_depth[_currID]);
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 3 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);

                    if (Example._scene.multiFragmentRendering.useFront)
                        _tex_color_front.draw();
                    else
                        _tex_color_back.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling() { ;}
        #endregion
    }

    public class DUAL_FreePipe : Peeling
    {
        #region Private Properties

        Shader _init_depth, _init_count, _peeler, _peeler_depth, _resolve;
        Shading _initing_depth, _initing_count, _peeling, _peeling_depth, _resolving;

        FrameBuffer _fbo_color;
        FrameBuffer _fbo_depth;

        Texture _tex_peel_front, _tex_peel_back;
        Texture _tex_count_front, _tex_count_back;
        Texture[] _tex_depth = new Texture[2];

        Texture _tex_color_front;
        Texture _tex_color_back;

        #endregion

        #region Constructors
        public DUAL_FreePipe() : base()
        {
            _weightSum = new WeightSumDual();
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
                _tex_depth[i].delete();

            _tex_peel_front.delete();
            _tex_peel_back.delete();
            _tex_count_front.delete();
            _tex_count_back.delete();

            _tex_color_front.delete();
            _tex_color_back.delete();

            _fbo_color.delete();
            _fbo_depth.delete();

            _init_count.delete();
            _initing_count.delete();
            
            _init_depth.delete();
            _initing_depth.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();

            _peeler.delete();
            _peeling.delete();

            _resolve.delete();
            _resolving.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
#if multisample
            _tex_color_front = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_front = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_front.bind();
            _tex_color_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color_front.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_front.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_front.unbind();
#if multisample
            _tex_color_back = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_back = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_back.bind();
            _tex_color_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color_back.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_back.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_color_back.unbind();

            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color_front, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_color_back, 0);
            _fbo_color.checkStatus();

            // Create Peel Texture                       
#if multisample
            _tex_peel_front = new Texture(TextureTarget.Texture2DMultisampleArray);
#else
            _tex_peel_front = new Texture(TextureTarget.Texture2DArray);
#endif
            _tex_peel_front.bind();
            _tex_peel_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_peel_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_peel_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_peel_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if sorted_by_id
            _tex_peel_front.image3DMS(_multisamples, PixelInternalFormat.Rg32ui, _sizeArray, false);
            _memory += RES_MB * 2 * _sizeArray * _multisamples;
#else
            _tex_peel_front.image3DMS(_multisamples, PixelInternalFormat.Rgba8, _sizeArray, false);
            _memory += RES_MB * _sizeArray * _multisamples;
#endif
           
#else
#if sorted_by_id
            _tex_peel_front.image3D(0, PixelInternalFormat.Rg32ui, _sizeArray, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 2 * _sizeArray;
#else
            _tex_peel_front.image3D(0, PixelInternalFormat.Rgba8, _sizeArray, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4 * _sizeArray;
#endif

#endif
            _tex_peel_front.unbind();

#if multisample
            _tex_peel_back = new Texture(TextureTarget.Texture2DMultisampleArray);
#else
            _tex_peel_back = new Texture(TextureTarget.Texture2DArray);
#endif
            _tex_peel_back.bind();
            _tex_peel_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_peel_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_peel_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_peel_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if sorted_by_id
            _tex_peel_back.image3DMS(_multisamples, PixelInternalFormat.Rg32ui, _sizeArray, false);
            _memory += RES_MB * 2 * _sizeArray * _multisamples;
#else
            _tex_peel_back.image3DMS(_multisamples, PixelInternalFormat.Rgba8, _sizeArray, false);
            _memory += RES_MB * _sizeArray * _multisamples;
#endif
           
#else
#if sorted_by_id
            _tex_peel_back.image3D(0, PixelInternalFormat.Rg32ui, _sizeArray, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 2 * _sizeArray;
#else
            _tex_peel_back.image3D(0, PixelInternalFormat.Rgba8, _sizeArray, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4 *_sizeArray;
#endif

#endif
            _tex_peel_back.unbind();

            // Create Count Texture 
#if multisample
            _tex_count_front = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_count_front = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_count_front.bind();
            _tex_count_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_count_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_count_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_count_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_count_front.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_count_front.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_count_front.unbind();

#if multisample
            _tex_count_back = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_count_back = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_count_back.bind();
            _tex_count_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_count_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_count_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_count_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_count_back.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_count_back.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_count_back.unbind();

            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_depth[i].unbind();
            }
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[0], 0);
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_depth[1], 0);
            _fbo_depth.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init_count = new Shader("peeling/dual_freepipe/init_counter", ShaderType.FragmentShader);
            _init_count.complile(ShaderType.FragmentShader);

            _initing_count = new Shading();
            _initing_count.create();
            _initing_count.attachShader(Texture.vertex.id);
            _initing_count.attachShader(_init_count.id);
            _initing_count.link();

            _initing_count.use();
            {
                _initing_count.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _init_depth = new Shader("peeling/dual_freepipe/init_depth", ShaderType.FragmentShader);
            _init_depth.complile(ShaderType.FragmentShader);

            _initing_depth = new Shading();
            _initing_depth.create();
            _initing_depth.attachShader(Example._scene.renderVertex.id);
            _initing_depth.attachShader(Example._scene.renderGeometry.id);
            _initing_depth.attachShader(_init_depth.id);
            _initing_depth.link();

            _initing_depth.use();
            {
                _initing_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peeler_depth = new Shader("peeling/dual_freepipe/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            /////////////////////
            _peeler = new Shader("peeling/dual_freepipe/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            // resolve
            _resolve = new Shader("peeling/dual_freepipe/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Blend.equation(BlendEquationMode.Max);
                Blend.enable();

                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
                Buffer.setMask(_currID, true, true, false, false);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    if (Example._scene.multiFragmentRendering.passes == 0)
                    {
                        _initing_depth.use();
                        {
                            Example._scene.meshAnimation.drawModels(ref _initing_depth, false, false);
                        }
                        Shading.close();
                    }
                    else
                    {
                        _peeling_depth.use();
                        {
                            Texture.active(TextureUnit.Texture0);
                            _tex_depth[_prevID].bind();
                            Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                        }
                        Shading.close();
                    }

                    Buffer.setMask(_currID, true, true, true, true);

                    Blend.disable();
                    Depth.enableTest();
                    Depth.setMask(true);
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            return S;
        }
        protected override void peel_color()
        {
            Depth.disableTest();
            Depth.setMask(false);

            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            // 1. Clear Counters
            FPS.beginLocal();
            {
                _initing_count.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.Ext.MemoryBarrier((int)0x00000020);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Clear Counters");

            // 2. Peeling
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_depth[_currID].bind();
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.Ext.MemoryBarrier((int)0x00001020);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");

            // 3. Resolve
            FPS.beginLocal();
            {
                Buffer.draw(2, 0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeArray);
                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");

            Depth.enableTest();
            Depth.setMask(true);
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            GL.Ext.BindImageTexture(1, _tex_count_front.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);
            GL.Ext.BindImageTexture(4, _tex_count_back.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);
#if sorted_by_id
            GL.Ext.BindImageTexture(5, _tex_peel_front.index, 0, true, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.Rg32ui);
            GL.Ext.BindImageTexture(6, _tex_peel_back.index , 0, true, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.Rg32ui);
#else
            GL.Ext.BindImageTexture(5, _tex_peel_front.index, 0, true, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.Rgba8);
            GL.Ext.BindImageTexture(6, _tex_peel_back.index, 0, true, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.Rgba8);
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
            {
                _weightSum.clearBuffers();
                if (!Example._scene.useBackgroundTexture)
                    _weightSum.clearBuffersBack(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
            }
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // 0. Rendering
            int passes = 0;
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    passes += _sizeArray;
                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent) _weightSum.compute(_tex_color_front, _tex_color_back);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                        Example._scene.meshAnimation.pose.computeDUALTranslucency(ref _tex_depth[_currID]);
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);

                    if (Example._scene.multiFragmentRendering.useFront)
                        _tex_color_front.draw();
                    else
                        _tex_color_back.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling() { ;}
        #endregion
    }

    public class DUAL_LL : Peeling
    {
        #region Private Properties

        uint    _total_fragments;
        float   _tmp_memory;

        Shader  _peel, _resolve, _init, _init_depth, _peeler_depth;
        Shading _peeling, _resolving, _initing, _initing_depth, _peeling_depth;

        Buffer  _buf_peel = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.StreamDraw);
        Buffer  _buf_pointers = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.StreamDraw);
        Buffer  _shared_counter_front, _shared_counter_back;
        
        Texture _tex_peel = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_pointers = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_page_id_front,_tex_page_id_back;
#if sorted_by_id
        Texture _tex_counter_front, _tex_counter_back;
#endif

        FrameBuffer _fbo_color;
        FrameBuffer _fbo_depth;       
        Texture[]   _tex_depth = new Texture[2];
        Texture     _tex_color_front, _tex_color_back;

        #endregion

        #region Constructor
        public DUAL_LL() : base()
        {
            _weightSum = Example._scene.weightSumDUAL;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
                _tex_depth[i].delete();

            _peel.delete();
            _peeler_depth.delete();
            _resolve.delete();
            _init.delete();
            _init_depth.delete();

            _peeling.delete();
            _peeling_depth.delete();
            _resolving.delete();
            _initing.delete();
            _initing_depth.delete();

            _tex_page_id_front.delete();
            _tex_page_id_back.delete();
            _tex_peel.delete();
            _tex_pointers.delete();

            _buf_peel.delete();
            _buf_pointers.delete();

#if sorted_by_id
            _tex_counter_front.delete();
            _tex_counter_back.delete();
#endif

            _tex_color_front.delete();
            _tex_color_back.delete();
            _fbo_color.delete();
            _fbo_depth.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            //_total_fragments = 3005620 * (uint)_sizeArray; // ??? Adaptive ???
            _total_fragments = (uint)Example._scene.width * (uint)Example._scene.height * (uint)_sizeArray / 2;  

            // Create Page ID Texture 
#if multisample
            _tex_page_id_front = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_page_id_front = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_page_id_front.bind();
            _tex_page_id_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_page_id_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_page_id_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_page_id_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_page_id_front.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_page_id_front.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_page_id_front.unbind();

#if multisample
            _tex_page_id_back = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_page_id_back = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_page_id_back.bind();
            _tex_page_id_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_page_id_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_page_id_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_page_id_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_page_id_back.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_page_id_back.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_page_id_back.unbind();

#if sorted_by_id
            // Create Counter Texture 
#if multisample
            _tex_counter_front = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_counter_front = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_counter_front.bind();
            _tex_counter_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_counter_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_counter_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_counter_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_counter_front.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_counter_front.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_counter_front.unbind();

#if multisample
            _tex_counter_back = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_counter_back = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_counter_back.bind();
            _tex_counter_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_counter_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_counter_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_counter_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_counter_back.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_counter_back.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_counter_back.unbind();
#endif

            // Create Color Texture 
#if multisample
            _tex_color_front = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_front = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_front.bind();
            _tex_color_front.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_front.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_front.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color_front.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_front.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_color_front.unbind();

#if multisample
            _tex_color_back = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_back = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_back.bind();
            _tex_color_back.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_back.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_back.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color_back.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_back.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_color_back.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_depth[i].unbind();
            }

            // Create Depth FrameBuffer 
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[0], 0);
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_depth[1], 0);
            _fbo_depth.checkStatus();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color_front, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_color_back, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

            _shared_counter_front = new Buffer((BufferTarget)0x92C0, BufferUsageHint.StreamDraw);
            _shared_counter_front.bind();
            _shared_counter_front.data(new IntPtr(sizeof(uint)));
            _shared_counter_front.unbind();
            _tmp_memory += MB * sizeof(uint);

            _shared_counter_back = new Buffer((BufferTarget)0x92C0, BufferUsageHint.StreamDraw);
            _shared_counter_back.bind();
            _shared_counter_back.data(new IntPtr(sizeof(uint)));
            _shared_counter_back.unbind();
            _tmp_memory += MB * sizeof(uint);

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Page List Buffer
            _buf_peel.bind();
#if sorted_by_id
            _buf_peel.data(new IntPtr(sizeof(float) * 2 * _total_fragments));
#else
            _buf_peel.data(new IntPtr(sizeof(float) * _total_fragments));
#endif
            // Create Shared Page List Texture
            _tex_peel.bind();
#if sorted_by_id
            Texture.buffer(SizedInternalFormat.Rg32f, _buf_peel.index);
            GL.Ext.BindImageTexture(6, _tex_peel.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.Rg32f);
            _memory += MB * 8 * _shared_pool_size;
#else
            Texture.buffer(SizedInternalFormat.Rgba8, _buf_peel.index);
            GL.Ext.BindImageTexture(6, _tex_peel.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.Rgba8);
            _memory += MB * 4 * _total_fragments;
#endif
            _tex_peel.unbind();

            // Create Shared Linked List Buffer
            _buf_pointers.bind();
            _buf_pointers.data(new IntPtr(_total_fragments * sizeof(uint)));

            // Create Shared Linked List Texture
            _tex_pointers.bind();
            Texture.buffer(SizedInternalFormat.R32f, _buf_pointers.index);
            GL.Ext.BindImageTexture(7, _tex_pointers.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);
            _memory += MB * 4 * _total_fragments;
            _buf_pointers.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/dual_ll/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _init_depth = new Shader("peeling/dual_ll/init_depth", ShaderType.FragmentShader);
            _init_depth.complile(ShaderType.FragmentShader);

            _initing_depth = new Shading();
            _initing_depth.create();
            _initing_depth.attachShader(Example._scene.renderVertex.id);
            _initing_depth.attachShader(Example._scene.renderGeometry.id);
            _initing_depth.attachShader(_init_depth.id);
            _initing_depth.link();

            _initing_depth.use();
            {
                _initing_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            //--- Peeling Depth ---//
            _peeler_depth = new Shader("peeling/dual_ll/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peel = new Shader("peeling/dual_ll/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("total_fragments", _total_fragments-1U);
            }
            Shading.close();

            _resolve = new Shader("peeling/dual_ll/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform1("total_fragments", _total_fragments-1U);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                Depth.disableTest();
                Depth.setMask(false);

                Blend.equation(BlendEquationMode.Max);
                Blend.enable();

                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
                Buffer.setMask(_currID, true, true, false, false);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    if (Example._scene.multiFragmentRendering.passes == 0)
                    {
                        _initing_depth.use();
                        {
                            Example._scene.meshAnimation.drawModels(ref _initing_depth, false, false);
                        }
                        Shading.close();
                    }
                    else
                    {
                        _peeling_depth.use();
                        {
                            Texture.active(TextureUnit.Texture10); _tex_depth[_prevID].bind();
                            Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                        }
                        Shading.close();
                    }
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(_currID, true, true, true, true);

                Blend.disable();
                Depth.enableTest();
                Depth.setMask(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            return S;
        }
        protected override void peel_color()
        {
            Depth.disableTest();
            Depth.setMask(false);

            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            //1. Clear Counters
            FPS.beginLocal();
            {
                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.Ext.MemoryBarrier((int)0x00000020);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Clear Counters");

            _shared_counter_front.bind();
            {
                IntPtr kk = GL.MapBufferRange((BufferTarget)0x92C0, IntPtr.Zero, new IntPtr(sizeof(uint)), BufferAccessMask.MapWriteBit | BufferAccessMask.MapInvalidateBufferBit | BufferAccessMask.MapUnsynchronizedBit);
                kk = IntPtr.Zero;
                GL.UnmapBuffer((BufferTarget)0x92C0);
                GL.BindBufferBase((BufferTarget)0x92C0, 0, _shared_counter_front.index);
            }
            _shared_counter_front.unbind();

            _shared_counter_back.bind();
            {
                IntPtr kk = GL.MapBufferRange((BufferTarget)0x92C0, IntPtr.Zero, new IntPtr(sizeof(uint)), BufferAccessMask.MapWriteBit | BufferAccessMask.MapInvalidateBufferBit | BufferAccessMask.MapUnsynchronizedBit);
                kk = IntPtr.Zero;
                GL.UnmapBuffer((BufferTarget)0x92C0);
                GL.BindBufferBase((BufferTarget)0x92C0, 1, _shared_counter_back.index);
            }
            _shared_counter_back.unbind();

            //2. Peeling
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    Texture.active(TextureUnit.Texture10); _tex_depth[_currID].bind();
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.Ext.MemoryBarrier((int)0x00001020);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");

            //3. Resolve
            FPS.beginLocal();
            {
                Buffer.draw(2, 0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeArray);
                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");
            
            Depth.enableTest();
            Depth.setMask(true);
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            GL.Ext.BindImageTexture(2, _tex_page_id_front.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);
            GL.Ext.BindImageTexture(3, _tex_page_id_back.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);
#if sorted_by_id
            GL.Ext.BindImageTexture(4, _tex_counter_front.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);
            GL.Ext.BindImageTexture(5, _tex_counter_back.index, 0, false, 0, (ExtShaderImageLoadStore)0x88BA, (int)PixelInternalFormat.R32ui);
#endif

            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
            {
                _weightSum.clearBuffers();
                if (!Example._scene.useBackgroundTexture)
                    _weightSum.clearBuffersBack(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
            }
            // 2. Translucency
            if (Example._scene.multiFragmentRendering.translucent)
                Example._scene.meshAnimation.pose.initTranslucency();

            // 0. Rendering
            int passes = 0;
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    passes += _sizeArray;
                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent)
                        _weightSum.compute(_tex_color_front, _tex_color_back);
                    // 2. Translucency
                    if (Example._scene.multiFragmentRendering.translucent)
                        Example._scene.meshAnimation.pose.computeDUALTranslucency(ref _tex_depth[_currID]);

                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);

                    if (Example._scene.multiFragmentRendering.useFront)
                        _tex_color_front.draw();
                    else
                        _tex_color_back.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling() { ;}
        #endregion
    }
#endif
    
    #endregion

    #region K-BUFFER Algorithms

#if KB

    /// <summary>
    /// Fixed-sized K-buffer [OpenGL 3+]
    /// </summary>

    public class KB : Peeling
    {
        #region Private Properties

        Shader _peeler, _resolve;
        Shading _peeling, _resolving;

        Texture _tex_color;
        Texture[] _tex_peel = new Texture[8];

        FrameBuffer _fbo_peel;
        FrameBuffer _fbo_color;

#if multipass
        Texture     _tex_depth;
        FrameBuffer _fbo_depth;

        Shader      _peeler_depth;
        Shading     _peeling_depth;
#endif
        #endregion

        #region Constructors
        public KB() : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for (int i = 0; i < _sizeMRT; i++)
                _tex_peel[i].delete();          

            _fbo_peel.delete();
            _fbo_color.delete();

            _peeler.delete();
            _peeling.delete();

            _resolve.delete();
            _resolving.delete();

#if multipass
            _tex_depth.delete();
            _fbo_depth.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();
#endif
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            for (int i = 0; i < _sizeMRT; i++)
            {
                // Create Peel Texture
                _tex_peel[i] = new Texture(TextureTarget.TextureRectangle);
                _tex_peel[i].bind();
                _tex_peel[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if packing
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#else
                _tex_peel[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_peel[i].unbind();
            }
            // Create Peel FrameBuffer 
            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            {
                for (int i = 0; i < _sizeMRT; i++)
                    _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0 + i, ref _tex_peel[i], 0);
            }
            _fbo_peel.checkStatus();
            FrameBuffer.unbind();

#if multipass
            // Create Depth Texture
#if multisample
            _tex_depth = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_depth = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_depth.bind();
            _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_depth.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_depth.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_depth.unbind();

            // Create Depth FrameBuffer 
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth, 0);
            _fbo_depth.checkStatus();
#endif
            // Create Color Texture
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
#if multipass
            _fbo_depth.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.setMask(0, true, false, false, false);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(0, true, true, true, true);
#endif
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            // peel
            _peeler = new Shader("peeling/kb/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();

            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            // render
            _resolve = new Shader("peeling/kb/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

#if multipass
            // depth
            _peeler_depth = new Shader("peeling/kb/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Texture.vertex.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
#endif
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                _fbo_peel.bind();
                Buffer.draw(_sizeMRT, 0);
#if !packing
                Buffer.setMask(true, true, false, false);
#endif
                Buffer.clear(0.0f, 1.0f, 0.0f, 1.0f);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling.use();
                    {
                        if (Example._scene.instancing)
                        {
                            _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                            _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                        }
                        if (Example._scene.tessellation)
                        {
                            _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }
                        Texture.active(TextureUnit.Texture0); _tex_peel[0].bind();
                        Texture.active(TextureUnit.Texture1); _tex_peel[1].bind();
                        for (int i = 4; i < _sizeMRT + 2; i++)
                        {
                            Texture.active(TextureUnit.Texture0 + i); _tex_peel[i - 2].bind();
                        }
#if multipass
                        Texture.active(TextureUnit.Texture10); _tex_depth.bind();
#endif
                        Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);
#if !packing
                Buffer.setMask(true, true, true, true);
#endif
                
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");

            return S;
        }
        protected override void peel_color()
        {
#if multipass
            //1st pass - depth from last peeled tex
            FPS.beginLocal();
            {
                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, false, false, false);
                Buffer.clear(0, 0, 0, 0);

                _peeling_depth.use();
                {
                    Texture.active(TextureUnit.Texture0);
                    _tex_peel[7].bind();
                    Texture.image.draw();
                }
                Shading.close();

                Buffer.setMask(0, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");
#endif
            //2nd pass - color
            FPS.beginLocal();
            {
                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
#if packing
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % (_sizeMRT * 2));
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeMRT);
#endif
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    _resolving.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                    _resolving.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);

                    for (int i = 0; i < _sizeMRT; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i);
                        _tex_peel[i].bind();
                    }
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");
        }
        #endregion
        
        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;

            // 0. Rendering
            clearBuffers();
            int passes = 0;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    peel_color();
#if packing
                    passes += _sizeMRT * 2;
#else
                    passes += _sizeMRT;
#endif
                    Example._scene.multiFragmentRendering.passes++;
#if !multipass
                    break;
#endif
                }
                else
                    break;
            }
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.enableTest();
                Depth.setMask(true);

                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty functions
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class KB_Faster : Peeling
    {
        #region Private Properties

        Shader _init, _peel, _resolve;
        Shading _initing, _peeling, _resolving;

        FrameBuffer _fbo_color;
        Texture _tex_peel_color, _tex_peel_depth;

        #endregion

        #region Constructor
        public KB_Faster()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _init.delete();
            _peeling.delete();
            _resolving.delete();
            _initing.delete();

            _tex_peel_depth.delete();
            _tex_peel_color.delete();
            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
            _tex_peel_depth = new Texture(TextureTarget.Texture2DArray);
            _tex_peel_depth.bind();
            {
                _tex_peel_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_depth.image3D(0, PixelInternalFormat.R32f, _sizeHeap, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            }
            _tex_peel_depth.unbind();
            _memory += RES_MB * 4 * _sizeHeap;

            // Create Peel Texture 
            _tex_peel_color = new Texture(TextureTarget.Texture2DArray);
            _tex_peel_color.bind();
            {
                _tex_peel_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_color.image3D(0, PixelInternalFormat.R32ui, _sizeHeap, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_peel_color.unbind();
            _memory += RES_MB * 4 * _sizeHeap;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/kb_faster/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_faster/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_faster/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override void peel_color()
        {
            //1. Clear K-Buffer
            FPS.beginLocal();
            {
                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0. Clear Buffer");

            //2. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //3. Resolve 
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();

                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeArray);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_peel_depth.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32f);
            GL.BindImageTexture(1, _tex_peel_color.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 1;

            peel_color();
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class KB_Multi : Peeling
    {
        #region Private Properties

        Shader _peeler, _resolve;
        Shading _peeling, _resolving;

        Texture _tex_color;
        Texture[] _tex_peel = new Texture[8];

        FrameBuffer _fbo_peel;
        FrameBuffer _fbo_color;

#if multipass
        FrameBuffer _fbo_depth;
        Texture _tex_depth;
        Shader  _peeler_depth;
        Shading _peeling_depth;
#endif

        #endregion

        #region Constructors
        public KB_Multi() : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
#if multipass
            _tex_depth.delete();
            _fbo_depth.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();
#endif
            _tex_color.delete();
            for (int i = 0; i < _sizeMRT; i++)
                _tex_peel[i].delete();

            _fbo_color.delete();
            _fbo_peel.delete();

            _peeler.delete();
            _peeling.delete();

            _resolve.delete();
            _resolving.delete();
        }
        #endregion
        
        #region Buffer Functions
        protected override void initBuffers()
        {
            for (int i = 0; i < _sizeMRT; i++)
            {
                // Create Peel Texture
                _tex_peel[i] = new Texture(TextureTarget.TextureRectangle);
                _tex_peel[i].bind();
                _tex_peel[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if packing
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory+=RES_MB*16;
#else
                _tex_peel[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_peel[i].unbind();
            }

            // Create FrameBuffer 
            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            {
                for (int i = 0; i < _sizeMRT; i++)
                    _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0 + i, ref _tex_peel[i], 0);
                _fbo_peel.checkStatus();
            }
            FrameBuffer.unbind();

#if multipass
            // Create Depth Texture
#if multisample
            _tex_depth = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_depth=new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_depth.bind();
            _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_depth.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_depth.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            _memory+=RES_MB*4;
#endif
            _tex_depth.unbind();

            // Create Depth FrameBuffer 
            _fbo_depth=new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth, 0);
            _fbo_depth.checkStatus();
#endif
            // Create Color Texture
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            {
                _fbo_color.bind();
                _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
#if multipass            
            _fbo_depth.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.setMask(0, true, false, false, false);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(0, true, true, true, true);
#endif
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            // peel
            _peeler=new Shader("peeling/kb_multi/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling=new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);               
            }
            Shading.close();

            // render
            _resolve=new Shader("peeling/kb_multi/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving=new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

#if multipass
            // depth
            _peeler_depth=new Shader("peeling/kb_multi/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth=new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Texture.vertex.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
               // _peeling_depth.bindUniform1("bufferSize", _bufferSize);
            }
            Shading.close();
#endif
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            int  num = 0;
            bool Final, S;
            FPS.beginLocal();
            {
                _fbo_peel.bind();
                Buffer.draw(_sizeMRT, 0);
#if packing
                Buffer.clear(0.0f, 1.0f, 0.0f, 1.0f);
#else
                Buffer.setMask(true, true, false, false);
                Buffer.clear(0.0f, 1.0f, 0.0f, 0.0f);
#endif
                Final = false;
                while (true)
                {
                    Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                    {
                        _peeling.use();
                        {
                            if (Example._scene.instancing)
                            {
                                _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            if (Example._scene.tessellation)
                            {
                                _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            Texture.active(TextureUnit.Texture0);
                            _tex_peel[0].bind();
                            Texture.active(TextureUnit.Texture1);
                            _tex_peel[1].bind();
                            for (int i = 4; i < _sizeMRT + 2; i++)
                            {
                                Texture.active(TextureUnit.Texture0 + i);
                                _tex_peel[i - 2].bind();
                            }
#if multipass
                            Texture.active(TextureUnit.Texture10);
                            _tex_depth.bind();
#endif
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();
                    }
                    S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(false);
#if !packing
                    Buffer.setMask(true, true, true, true);
#endif
                    num++;
                    Example._scene.multiFragmentRendering.passes++;
                    if (S)
                    {
                        if (num == 1)
                            Final = true;
                        break;
                    }
                    else if (Example._scene.multiFragmentRendering.passes % _sizeMRT == 0)
                        break;
                }
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");

            return Final;
        }
        protected override void peel_color()
        {
#if multipass
            //1st pass - depth from last peeled tex
            FPS.beginLocal();
            {
                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, false, false, false);
                Buffer.clear(0, 0, 0, 0);

                _peeling_depth.use();
                {
                    for (int i = 0; i < _sizeMRT; i++)
                    {
                        Texture.active(TextureUnit.Texture0+i);
                        _tex_peel[i].bind();
                    }
                    Texture.image.draw();
                }
                Shading.close();

                Buffer.setMask(0, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");
#endif
            //2nd pass - color
            FPS.beginLocal();
            {
                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.clear(0, 0, 0, 0);

                _resolving.use();
                {
#if packing
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % (_sizeMRT * 2));
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeMRT);
#endif
                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);

                    for (int i = 0; i < _sizeMRT; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i);
                        _tex_peel[i].bind();
                    }
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            
            // 0. Rendering
            clearBuffers();

            int p = 0, passes = 0;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = p++ % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    peel_color();
#if packing
                    passes += _sizeMRT * 2;
#else
                    passes += _sizeMRT;
#endif

#if !multipass
                    break;
#endif
                }
                else
                    break;
            }

            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.enableTest();
                Depth.setMask(true);
             
                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }
            FPS.endLocal("#. Final Draw");       
        }
        #endregion

        #region Empty functions
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class KB_SR : Peeling
    {
        #region Private Properties

        Shader _peeler, _resolve;
        Shading _peeling, _resolving;

        Texture _tex_stencil;
        Texture _tex_color;
        Texture _tex_peel;

        FrameBuffer _fbo_peel;
        FrameBuffer _fbo_color;

#if multipass
        FrameBuffer _fbo_depth;
        Texture     _tex_depth;

        Shader  _peeler_depth;
        Shading _peeling_depth;
#endif
        #endregion

        #region Constructor
        public KB_SR() : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _tex_peel.delete();
            _tex_color.delete();
            _tex_stencil.delete();

            _fbo_color.delete();
            _fbo_peel.delete();

            _peeler.delete();
            _peeling.delete();

            _resolve.delete();
            _resolving.delete();

#if multipass
            _fbo_depth.delete();
            _tex_depth.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();
#endif
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Stencil Texture
            _tex_stencil = new Texture(TextureTarget.Texture2DMultisample);
            _tex_stencil.bind();
            {
                _tex_stencil.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_stencil.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_stencil.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_stencil.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_stencil.image2DMS(_sizeStencil, (PixelInternalFormat)0x8D48, false);
            }
            _tex_stencil.unbind();
            _memory += RES_MB * _sizeStencil / 4;

            // Create Peel Texture
            _tex_peel = new Texture(TextureTarget.Texture2DMultisample);
            _tex_peel.bind();
            {
                _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.image2DMS(_sizeStencil, PixelInternalFormat.Rg32f, false);
            }
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeStencil;

            // Create Peel FrameBuffer 
            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            {
                _fbo_peel.attachTexture2D(FramebufferAttachment.StencilAttachment, ref _tex_stencil, 0);
                _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_peel, 0);
            }
            _fbo_peel.checkStatus();
            FrameBuffer.unbind();

#if multipass
            // Create Depth Texture
            _tex_depth=new Texture(TextureTarget.TextureRectangle);
            _tex_depth.bind();
            _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_depth.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            _tex_depth.unbind();
            _memory+=RES_MB*4;

            // Create Depth FrameBuffer 
            _fbo_depth=new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth, 0);
            _fbo_depth.checkStatus();
#endif
            // Create Color Texture
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, sRGB.enabled ? PixelInternalFormat.Srgb8 : PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
#if multipass
            _fbo_depth.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.setMask(0, true, false, false, false);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(0, true, true, true, true);
#endif
        }
        #endregion 

        #region Shader Functions
        protected override void initShaders()
        {
            // peel
            _peeler=new Shader("peeling/kb_sr/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling=new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            // render
            _resolve=new Shader("peeling/kb_sr/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving=new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);               
            }
            Shading.close();

#if multipass
            // depth
            _peeler_depth=new Shader("peeling/kb_stencil/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth=new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Texture.vertex.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                //_peeling_depth.bindUniform1("max_samples", _max_samples);
            }
            Shading.close();
#endif
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            FPS.beginLocal();
            {
                _fbo_peel.bind();
                Buffer.draw(DrawBufferMode.None);
                Buffer.setMask(false, false, false, false);

                Sampling.enableMulti();
                Sampling.enableMask();
                Sampling.setMask(0, 0);
                Stencil.clear(2);

                Stencil.enable();
                Stencil.operation(StencilOp.Replace, StencilOp.Replace, StencilOp.Replace);

                Depth.setMask(false);

                for (int i = 1; i < _sizeStencil; ++i)
                {
                    Sampling.setMask(0, 1 << i);
                    Stencil.func(StencilFunction.Always, 2 + i, 0xFFFFFFFF);
                    Texture.rendering.use();
                    {
#if multipass
                        Texture.active(TextureUnit.Texture0); _tex_depth.bind();
#endif
                        Texture.image.draw();
                    }
                    Shading.close();
                }
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Init (Stencil)");

            bool S=false;
            FPS.beginLocal();
            {
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, true, false, false);
                Buffer.clear(0.0f, 1.0f, 0.0f, 0.0f);

                Sampling.disableMulti();
                Sampling.disableMask();

                Stencil.operation(StencilOp.DecrWrap, StencilOp.DecrWrap, StencilOp.DecrWrap);
                Stencil.func(StencilFunction.Equal, 2, 0xFFFFFFFF);

                //Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling.use();
                    {
                        if (Example._scene.instancing)
                        {
                            _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                            _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                        }
                        if (Example._scene.tessellation)
                        {
                            _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }
#if multipass
                        Texture.active(TextureUnit.Texture0); _tex_depth.bind();
#endif
                        Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                    }
                    Shading.close();
                }
               // S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(0, true, true, true, true);

                Stencil.disable();
                Depth.setMask(true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");

            return S;
        }
        protected override void peel_color()
        {
#if multipass
            // 1st pass - depth from last peeled tex
            FPS.beginLocal();
            {
                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.clear(0, 0, 0, 0);
                Buffer.setMask(0, true, false, false, false);

                _peeling_depth.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_peel.bind();
                    Texture.image.draw();
                }
                Shading.close();

                Buffer.setMask(0, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");
#endif
            //2. Resolve
            FPS.beginLocal();
            {
                sRGB.enable();

                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeStencil);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.active(TextureUnit.Texture0); _tex_peel.bind();
                    Texture.image.draw();
                }
                Shading.close();

                sRGB.disable();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");
        }
        #endregion 

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);
            
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;

            // 0. Rendering
            clearBuffers();
            int passes = 0;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                if(!peel_depth())
                {
                    peel_color();

                    passes += _sizeStencil;
                    Example._scene.multiFragmentRendering.passes++;
#if !multipass
                    break;
#endif
                }
                else
                    break;
            }

            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.enableTest();
                Depth.setMask(true);

                sRGB.enable();
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
                sRGB.disable();
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty Functions
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    /// <summary>
    /// Fixed-sized K-buffer [OpenGL 4+]
    /// </summary>

    public class KB_Heap_Max : Peeling
    {
        #region Private Properties

        Shader      _peel, _resolve;
        Shading     _peeling, _resolving;

        FrameBuffer _fbo_color;
        Texture     _tex_peel, _tex_counter;
#if !GPU_MUTEX
        Texture     _tex_semaphore;
#endif

#if multipass
        FrameBuffer _fbo_depth;
        Texture     _tex_depth, _tex_color;
        Shader      _peeler_depth;
        Shading     _peeling_depth;
#endif
        #endregion

        #region Constructor
        public KB_Heap_Max() : base()
        {
#if multipass
            _weightSum = Example._scene.weightSumF2B;
#endif
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_peel.delete();
            _tex_counter.delete();
#if !GPU_MUTEX
            _tex_semaphore.delete();
#endif
            _fbo_color.delete();

#if multipass
            _fbo_depth.delete();
            _tex_depth.delete();
            _tex_color.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();
#endif
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
            _tex_peel = new Texture(TextureTarget.Texture2DArray);
            _tex_peel.bind();
            {
                _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.image3D(0, PixelInternalFormat.Rg32f, _sizeHeap, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            }
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeHeap;

            // Create Semaphore Texture
#if !GPU_MUTEX
            _tex_semaphore = new Texture(TextureTarget.TextureRectangle);
            _tex_semaphore.bind();
            {
                _tex_semaphore.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_semaphore.unbind();
            _memory += RES_MB * 4;
#endif
            // Create Count Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _memory += RES_MB * 4;

            // Create Color Texture
#if multipass
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _memory+=RES_MB*4;
#endif
            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
#if multipass
                _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
#else
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
#endif
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

#if multipass
            // Create Depth Texture
            _tex_depth = new Texture(TextureTarget.TextureRectangle);
            _tex_depth.bind();
            {
                _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_depth.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            }
            _tex_depth.unbind();
            _memory += RES_MB * 4;         

            // Create Depth FrameBuffer 
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            {
                _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth, 0);
                _fbo_depth.checkStatus();
            }
            FrameBuffer.unbind();
#endif
        }
        protected override void clearBuffers()
        {
#if multipass
            _fbo_depth.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.setMask(0, true, false, false, false);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(0, true, true, true, true);
#endif
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/kb_heap_max/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();

            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_heap_max/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

#if multipass
            // depth
            _peeler_depth = new Shader("peeling/kb_heap_max/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Texture.vertex.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
#endif
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S = false;
#if multipass
            if (Example._scene.multiFragmentRendering.passes == 0)
                return false;

            FPS.beginLocal();
            {
                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, false, false, false);
                Buffer.clear(1.0f, 0.0f, 0.0f, 0.0f);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        Texture.image.draw();
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);
                
                Buffer.setMask(0, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling(Depth)");
#endif
            return S;
        }
        protected override void peel_color()
        {
#if multipass
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);
#endif
            //1. Clear Buffer
            FPS.beginLocal();
            {
                //1.1 Clear Counter
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();
                
                //1.2 Clear Semaphore
#if !GPU_MUTEX
                _tex_semaphore.bind();
                _tex_semaphore.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_semaphore.unbind();
#endif
                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("0. Clear Buffer");

            //2. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
#if multipass
                    Texture.active(TextureUnit.Texture6); _tex_depth.bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //3. Resolve 
            FPS.beginLocal();
            {
#if multipass
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);
#else
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
#endif
                _resolving.use();
                {
#if multipass
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeHeap);
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
#endif
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multipass          
            Depth.disableTest();
            Depth.setMask(false);
#endif
            GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#if !GPU_MUTEX
            GL.BindImageTexture(1, _tex_semaphore.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#endif
            GL.BindImageTexture(4, _tex_peel.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.updateShaders(ref _peeling);

#if multipass
            //0. Depth Peeling
            clearBuffers();

            int passes = 0;
            Example._scene.multiFragmentRendering.passes = 0;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    passes += _sizeHeap;
                    Example._scene.multiFragmentRendering.passes++;
                }
                else
                    break;
            }
            //#. Final Draw
            draw_final();
            
            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes;
#else
            peel_color();
            Example._scene.multiFragmentRendering.total_passes = 1;
#endif
        }
        protected override void draw_final()
        {
#if multipass
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }
            FPS.endLocal("#. Final Draw");
#endif
        }
        #endregion

        #region Empty Functions
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class KB_Array_Max : Peeling
    {
        #region Private Properties

        Shader _init, _peel, _resolve;
        Shading _initing, _peeling, _resolving;

        FrameBuffer _fbo_color;
        Texture     _tex_peel, _tex_counter;
#if !GPU_MUTEX
        Texture     _tex_semaphore;//, _tex_counterrr;
#endif

#if multipass
        FrameBuffer _fbo_depth;
        Texture _tex_depth, _tex_color;
        Shader _peeler_depth;
        Shading _peeling_depth;
#endif
        #endregion

        #region Constructor
        public KB_Array_Max() : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _init.delete();
            _peeling.delete();
            _resolving.delete();
            _initing.delete();

            _tex_peel.delete();
            _tex_counter.delete();
#if !GPU_MUTEX
            _tex_semaphore.delete();
#endif
            _fbo_color.delete();

#if multipass
            _fbo_depth.delete();
            _tex_depth.delete();
            _tex_color.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();
#endif
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
            _tex_peel = new Texture(TextureTarget.Texture2DArray);
            _tex_peel.bind();
            {
                _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.image3D(0, PixelInternalFormat.Rg32f, _sizeHeap, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            }
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeHeap;

            // Create Semaphore Texture
#if !GPU_MUTEX
            _tex_semaphore = new Texture(TextureTarget.TextureRectangle);
            _tex_semaphore.bind();
            {
                _tex_semaphore.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_semaphore.unbind();
            }
            _memory += RES_MB * 4;
#endif
            // Create Count Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _memory += RES_MB * 4;

            /*
            // Create Counterrr Texture 
            _tex_counterrr = new Texture(TextureTarget.TextureRectangle);
            _tex_counterrr.bind();
            _tex_counterrr.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_counterrr.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_counterrr.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_counterrr.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_counterrr.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
            _tex_counterrr.unbind();
            */
            // Create Color Texture
#if multipass
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _memory += RES_MB * 4;
            
#endif
            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
#if multipass
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
#else
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
#endif
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

#if multipass
            // Create Depth Texture
            _tex_depth = new Texture(TextureTarget.TextureRectangle);
            _tex_depth.bind();
            {
                _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_depth.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            }
            _tex_depth.unbind();
            _memory += RES_MB * 4;

            // Create Depth FrameBuffer 
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth, 0);
            _fbo_depth.checkStatus();
            FrameBuffer.unbind();
#endif
        }
        protected override void clearBuffers()
        {
#if multipass
            _fbo_depth.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.setMask(0, true, false, false, false);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(0, true, true, true, true);
#endif
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/kb_array_max/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_array_max/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_array_max/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

#if multipass
            // depth
            _peeler_depth = new Shader("peeling/kb_array_max/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Texture.vertex.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
#endif
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S = false;
#if multipass
            if (Example._scene.multiFragmentRendering.passes == 0)
                return false;

            FPS.beginLocal();
            {
                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, false, false, false);
                Buffer.clear(1.0f, 0.0f, 0.0f, 0.0f);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        Texture.image.draw();
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(0, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling(Depth)");
#endif
            return S;
        }
        protected override void peel_color()
        {
#if multipass
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);
#endif
            //1. Clear K-Buffer
            FPS.beginLocal();
            {
                //1.1 Clear Counter
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

                //1.2 Clear Semaphore
#if !GPU_MUTEX
                _tex_semaphore.bind();
                _tex_semaphore.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_semaphore.unbind();
#endif
                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
                
                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0. Clear Buffer" + Example._scene.multiFragmentRendering.passes.ToString());

            //Example._scene.multiFragmentRendering.beginSamplesQuery();

            //Depth.disableTest();

            //2. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
#if multipass
                    Texture.active(TextureUnit.Texture6); _tex_depth.bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling" + Example._scene.multiFragmentRendering.passes.ToString());

            //Example._scene.multiFragmentRendering.endSamplesQuery();

            //uint _total_fragments = Example._scene.multiFragmentRendering.samplesQuery.samples;

            //Depth.enableTest();

            //3. Resolve 
            FPS.beginLocal();
            {               
#if multipass
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);
#else
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
#endif
                _resolving.use();
                {
#if multipass
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeHeap);
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
#endif
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Resolve" + Example._scene.multiFragmentRendering.passes.ToString());
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multipass
            Depth.disableTest();
            Depth.setMask(false);
#endif
            GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#if !GPU_MUTEX
            GL.BindImageTexture(1, _tex_semaphore.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#endif
            GL.BindImageTexture(4, _tex_peel.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);
            //GL.BindImageTexture(6, _tex_counterrr.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.updateShaders(ref _peeling);
#if multipass
            //0. Depth Peeling
            clearBuffers();

            int passes = 0;
            Example._scene.multiFragmentRendering.passes = 0;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    passes += _sizeHeap;
                    Example._scene.multiFragmentRendering.passes++;

                }
                else
                    break;
            }
            
            //#. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes;
#else
            peel_color();
            Example._scene.multiFragmentRendering.total_passes = 1;
#endif
        }
        protected override void draw_final()
        {
#if multipass
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }
            FPS.endLocal("#. Final Draw");
#endif
        }
        #endregion

        #region Empty Functions
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class KB_Array_Max_V2 : Peeling
    {
        #region Private Properties

        Shader _init, _peel, _resolve;
        Shading _initing, _peeling, _resolving;

        FrameBuffer _fbo_color;
        Texture     _tex_peel, _tex_counter;
#if !GPU_MUTEX
        Texture _tex_semaphore;
#endif

#if multipass
        FrameBuffer _fbo_depth;
        Texture _tex_depth, _tex_color;
        Shader _peeler_depth;
        Shading _peeling_depth;
#endif
        #endregion

        #region Constructor
        public KB_Array_Max_V2()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _init.delete();
            _peeling.delete();
            _resolving.delete();
            _initing.delete();

            _tex_peel.delete();
            _tex_counter.delete();
#if !GPU_MUTEX
            _tex_semaphore.delete();
#endif
            _fbo_color.delete();

#if multipass
            _fbo_depth.delete();
            _tex_depth.delete();
            _tex_color.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();
#endif
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
            _tex_peel = new Texture(TextureTarget.Texture2DArray);
            _tex_peel.bind();
            {
                _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.image3D(0, PixelInternalFormat.Rg32f, _sizeHeap, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            }
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeHeap;

            // Create Semaphore Texture 
#if !GPU_MUTEX
            _tex_semaphore = new Texture(TextureTarget.TextureRectangle);
            _tex_semaphore.bind();
            {
                _tex_semaphore.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_semaphore.unbind();
            _memory += RES_MB * 4;
#endif
            // Create Count Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _memory += RES_MB * 4;

            // Create Color Texture
#if multipass
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tex_color.unbind();
            _memory += RES_MB * 4;
#endif
            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
#if multipass
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
#else
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
#endif
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

#if multipass
            // Create Depth Texture
#if multisample
            _tex_depth = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_depth = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_depth.bind();
            _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_depth.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_depth.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_depth.unbind();

            // Create Depth FrameBuffer 
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth, 0);
            _fbo_depth.checkStatus();
            FrameBuffer.unbind();
#endif
        }
        protected override void clearBuffers()
        {
#if multipass
            _fbo_depth.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.setMask(0, true, false, false, false);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(0, true, true, true, true);
#endif
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/kb_array_max_v2/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_array_max_v2/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_array_max_v2/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

#if multipass
            // depth
            _peeler_depth = new Shader("peeling/kb_array_max_v2/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Texture.vertex.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
#endif
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S = false;
#if multipass
            if (Example._scene.multiFragmentRendering.passes == 0)
                return false;

            FPS.beginLocal();
            {
                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, false, false, false);
                Buffer.clear(1.0f, 0.0f, 0.0f, 0.0f);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        Texture.image.draw();
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(0, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling(Depth)");
#endif
            return S;
        }
        protected override void peel_color()
        {
#if multipass
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);
#endif
            //1. Clear K-Buffer
            FPS.beginLocal();
            {
                //1.1 Clear Counter
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

                //1.2 Clear Semaphore
#if !GPU_MUTEX
                _tex_semaphore.bind();
                _tex_semaphore.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_semaphore.unbind();
#endif
                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0. Clear Buffer");

            //2. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
#if multipass
                    Texture.active(TextureUnit.Texture6); _tex_depth.bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //3. Resolve 
            FPS.beginLocal();
            {
#if multipass
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);
#else
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
#endif
                _resolving.use();
                {
#if multipass
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeHeap);
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
#endif
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multipass
            Depth.disableTest();
            Depth.setMask(false);
#endif
            GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#if !GPU_MUTEX
            GL.BindImageTexture(1, _tex_semaphore.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#endif
            GL.BindImageTexture(4, _tex_peel.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.updateShaders(ref _peeling);
#if multipass
            //0. Depth Peeling
            clearBuffers();

            int passes = 0;
            Example._scene.multiFragmentRendering.passes = 0;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    passes += _sizeHeap;
                    Example._scene.multiFragmentRendering.passes++;
                }
                else
                    break;
            }
            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes;
#else
            peel_color();
            Example._scene.multiFragmentRendering.total_passes = 1;
#endif
            draw_final();
        }
        protected override void draw_final()
        {
#if multipass
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }
            FPS.endLocal("#. Final Draw");
#endif
        }
        #endregion

        #region Empty Functions
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class KB_Array_Ins : Peeling
    {
        #region Private Properties

        Shader _init, _peel, _resolve;
        Shading _initing, _peeling, _resolving;

        FrameBuffer _fbo_color;
        Texture     _tex_peel;
#if !GPU_MUTEX
        Texture     _tex_semaphore;
#endif
        #endregion

        #region Constructor
        public KB_Array_Ins()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _init.delete();
            _peeling.delete();
            _resolving.delete();
            _initing.delete();

            _tex_peel.delete();
#if !GPU_MUTEX
            _tex_semaphore.delete();
#endif
            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
            _tex_peel = new Texture(TextureTarget.Texture2DArray);
            _tex_peel.bind();
            {
                _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.image3D(0, PixelInternalFormat.Rg32f, _sizeHeap, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            }
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeHeap;

            // Create Semaphore Texture 
#if !GPU_MUTEX
            _tex_semaphore = new Texture(TextureTarget.TextureRectangle);
            _tex_semaphore.bind();
            {
                _tex_semaphore.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_semaphore.unbind();
            _memory += RES_MB * 4;
#endif
            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/kb_array_ins/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_array_ins/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_array_ins/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override void peel_color()
        {
            //1. Clear K-Buffer
            FPS.beginLocal();
            {
                //1.1 Clear Semaphore
#if !GPU_MUTEX
                _tex_semaphore.bind();
                _tex_semaphore.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_semaphore.unbind();
#endif
                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                //1.1 Clear Depths
                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0. Clear Buffer");

            //2. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }

                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //3. Resolve 
            FPS.beginLocal();
            {
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeArray);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            GL.BindImageTexture(0, _tex_peel.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);
#if !GPU_MUTEX
            GL.BindImageTexture(1, _tex_semaphore.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#endif
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 1;

            peel_color();
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    /// <summary>
    /// Linked-Lists-based K-buffer [OpenGL 4+]
    /// </summary>

    public class KB_LL : Peeling
    {
        #region Private Properties
        
        uint _K;
        uint _total_fragments;
        uint _init_fragments = (uint)(4 * Example._scene.width * Example._scene.height);

        float _tmp_memory;

        Shader _peel, _resolve, _init;
        Shading _peeling, _resolving, _initing;

        Buffer _atomic_counter;

        Buffer _buf_peel = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);
        Buffer _buf_pointers = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);

        Texture _tex_peel = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_pointers = new Texture(TextureTarget.TextureBuffer);

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public KB_LL()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _init.delete();
            _peeling.delete();
            _resolving.delete();
            _initing.delete();

            _tex_peel.delete();
            _tex_pointers.delete();

            _buf_peel.delete();
            _buf_pointers.delete();

            _atomic_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _K = _init_fragments + 1U;
            
            _tmp_memory = 0f;
            _total_fragments = (uint)(Example._scene.width * Example._scene.height) + _init_fragments;
            
            // Create Atomic Counter FrameBuffer 
            _atomic_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _atomic_counter.bind();
            {
                _atomic_counter.storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
            }
            _atomic_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Page List Buffer
            _buf_peel.bind();
            _buf_peel.data(new IntPtr(sizeof(float) * 2 * _total_fragments));
            {
                _tex_peel.bind();
                {
                    Texture.buffer(SizedInternalFormat.Rg32f, _buf_peel.index);
                }
                _tex_peel.unbind();
            }
            _buf_peel.unbind();
            _memory += MB * 8 * _total_fragments;

            // Create Shared Linked List Buffer
            _buf_pointers.bind();
            _buf_pointers.data(new IntPtr(sizeof(uint) * _total_fragments));
            {
                _tex_pointers.bind();
                {
                    Texture.buffer(SizedInternalFormat.R32ui, _buf_pointers.index);
                }
                _tex_pointers.unbind();
            }
            _buf_pointers.unbind();
            _memory += MB * 4 * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/kb_ll/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _initing.bindUniform1("width_2", 2 * Example._scene.width);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_ll/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                //_peeling.bindUniform1("wh_2", _init_fragments + 1);
                _peeling.bindUniform1("width", Example._scene.width);
                _peeling.bindUniform1("width_2", Example._scene.width * 2);

            }
            Shading.close();

            _resolve = new Shader("peeling/kb_ll/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform1("width_2", 2 * Example._scene.width);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 0, _atomic_counter.index);
            GL.BindImageTexture(1, _tex_pointers.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.multiFragmentRendering.total_passes = 1;
            Example._scene.updateShaders(ref _peeling);

            bool S = false, First = true;
            while (true)
            {
                //0. Clear A-Buffer
                FPS.beginLocal();
                {
                    _atomic_counter.bind();
                    _atomic_counter.clearsubdata<uint>(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, ref _K);
                    _atomic_counter.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);

                    _initing.use();
                    {
                        Texture.image.draw();
                    }
                    Shading.close();
                    GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Clear Buffer");

                //1. Render the model into the A-Buffer
                FPS.beginLocal();
                {
                    if (First)
                        Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _peeling.use();
                        {
                            if (Example._scene.instancing)
                            {
                                _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            if (Example._scene.tessellation)
                            {
                                _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();
                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                    }
                    if (First)
                        S = Example._scene.multiFragmentRendering.endSamplesQuery();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Peeling");

                //2. Resize shared pool dynamically
                if (S || !First)
                    break;
                else
                {
                    First = false;
                    _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples;
                    initSharedPool();
                    FPS.resetLocal();
                }
                Example._scene.multiFragmentRendering.total_passes++;
            }

            //4. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();

                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class KB_LL_Sync : Peeling
    {
        #region Private Properties

        Shader _init, _peel, _resolve;
        Shading _initing, _peeling, _resolving;

        Buffer _atomic_counter;
        Texture _tex_peel, _tex_pointers, _tex_next, _tex_counter, _tex_semaphore;

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public KB_LL_Sync()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _init.delete();
            _peel.delete();
            _resolve.delete();

            _peeling.delete();
            _resolving.delete();
            _initing.delete();

            _tex_next.delete();
            _tex_counter.delete();
            _tex_semaphore.delete();

            _tex_peel.delete();
            _tex_pointers.delete();

            _atomic_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _memory = 0f;

            // Create Peel Texture 
            _tex_peel = new Texture(TextureTarget.Texture2DArray);
            _tex_peel.bind();
            {
                _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.image3D(0, PixelInternalFormat.Rg32f, _sizeHeap, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            }
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeHeap;

            // Create Pointers Texture 
            _tex_pointers = new Texture(TextureTarget.Texture2DArray);
            _tex_pointers.bind();
            {
                _tex_pointers.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_pointers.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_pointers.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_pointers.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_pointers.image3D(0, PixelInternalFormat.R32ui, _sizeHeap, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_pointers.unbind();
            _memory += RES_MB * 4 * _sizeHeap;

            // Create Page ID Texture 
            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _memory += RES_MB * 4;

            // Create Semaphore Texture 
            _tex_semaphore = new Texture(TextureTarget.TextureRectangle);
            _tex_semaphore.bind();
            {
                _tex_semaphore.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_semaphore.unbind();
            _memory += RES_MB * 4;

            // Create Counter Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _memory += RES_MB * 4;

            // Create Atomic Counter
            _atomic_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _atomic_counter.bind();
            {
                _atomic_counter.storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
            }
            _atomic_counter.unbind();
            _memory += MB * sizeof(uint);

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/kb_ll_sync/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_ll_sync/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_ll_sync/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            GL.BindImageTexture(1, _tex_semaphore.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(5, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(6, _tex_pointers.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(7, _tex_peel.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.multiFragmentRendering.total_passes = 1;
            Example._scene.updateShaders(ref _peeling);

            //1. Clear A-buffer
            FPS.beginLocal();
            {
                //1.1 Clear Atomic Counter
                _atomic_counter.bind();
                _atomic_counter.clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                _atomic_counter.unbind();
                GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);

                //1.2 Clear Counter
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

                //1.3 Clear Counter
                _tex_semaphore.bind();
                _tex_semaphore.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_semaphore.unbind();

                //1.4 Clear Next
                _tex_next.bind();
                _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_next.unbind();
                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                //1.1 Clear Depths
                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0. Clear Buffer");

            //2. Render the model into the A-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //3. Resolve
            FPS.beginLocal();
            {
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling() { ;}
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    /// <summary>
    /// Multiple-depth-test [OpenGL 4+]
    /// </summary>

    public class KB_MDT_32 : Peeling
    {
        #region Private Properties

        Shader _init, _peel_depth, _peel_color, _resolve;
        Shading _initing, _peeling_depth, _peeling_color, _resolving;

        FrameBuffer _fbo_color;
        Texture _tex_peel_color, _tex_peel_depth;

        #endregion

        #region Constructor
        public KB_MDT_32()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel_depth.delete();
            _peel_color.delete();
            _resolve.delete();
            _init.delete();
            _peeling_depth.delete();
            _peeling_color.delete();
            _resolving.delete();
            _initing.delete();

            _tex_peel_color.delete();
            _tex_peel_depth.delete();
            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
            _tex_peel_depth = new Texture(TextureTarget.Texture2DArray);
            _tex_peel_depth.bind();
            {
                _tex_peel_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_depth.image3D(0, PixelInternalFormat.R32ui, _sizeHeap, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_peel_depth.unbind();
            _memory += RES_MB * 4 * _sizeHeap;


            // Create Peel Texture 
            _tex_peel_color = new Texture(TextureTarget.Texture2DArray);
            _tex_peel_color.bind();
            {
                _tex_peel_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_color.image3D(0, PixelInternalFormat.R32ui, _sizeHeap, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_peel_color.unbind();
            _memory += RES_MB * 4 * _sizeHeap;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/kb_mdt_32/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel_depth = new Shader("peeling/kb_mdt_32/peel_depth", ShaderType.FragmentShader);
            _peel_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            if (Example._scene.tessellation)
            {
                _peeling_depth.attachShader(Example._scene.renderVertexTess.id);
                _peeling_depth.attachShader(Example._scene.renderTessellationControl.id);
                _peeling_depth.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peel_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peel_color = new Shader("peeling/kb_mdt_32/peel_color", ShaderType.FragmentShader);
            _peel_color.complile(ShaderType.FragmentShader);

            _peeling_color = new Shading();
            _peeling_color.create();
            if (Example._scene.tessellation)
            {
                _peeling_color.attachShader(Example._scene.renderVertexTess.id);
                _peeling_color.attachShader(Example._scene.renderTessellationControl.id);
                _peeling_color.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling_color.attachShader(Example._scene.renderVertex.id);
            _peeling_color.attachShader(Example._scene.renderGeometry.id);
            _peeling_color.attachShader(Example._scene.phongFragment.id);
            _peeling_color.attachShader(Example._scene.computePixelColor.id);
            _peeling_color.attachShader(_peel_color.id);
            _peeling_color.link();

            _peeling_color.use();
            {
                _peeling_color.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_color.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_mdt_32/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override void peel_color()
        {
            //1. Clear zK-Buffer
            FPS.beginLocal();
            {
                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0. Clear Buffer");

            //2. Render the model into the zK-Buffer
            FPS.beginLocal();
            {
                _peeling_depth.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling_depth.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling_depth.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling_depth.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling_depth.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling Depth");

            //3. Render the model into the cK-Buffer
            FPS.beginLocal();
            {
                _peeling_color.use();
                {
                    if (Example._scene.tessellation)
                    {
                        _peeling_color.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling_color.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    if (Example._scene.instancing)
                    {
                        _peeling_color.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling_color.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling_color, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("2. Peeling Color");

            //4. Resolve 
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_peel_depth.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_peel_color.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.updateShaders(ref _peeling_color);
            Example._scene.multiFragmentRendering.total_passes = 2;

            peel_color();
        }
        #endregion

        #region Empty Functions
        protected override void blending_depth()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void clearBuffers()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class KB_MDT_64 : Peeling
    {
        #region Private Properties

        Shader _init, _peel, _resolve;
        Shading _initing, _peeling, _resolving;

        int     _node_KBsize, _total_fragments;
        Buffer  _nodes_KB = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);
        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public KB_MDT_64()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _init.delete();
            _peeling.delete();
            _resolving.delete();
            _initing.delete();

            _nodes_KB.delete();
            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
            _node_KBsize = sizeof(UInt64);
            _total_fragments = Example._scene.width * Example._scene.height * _sizeHeap;
            
            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 0, _nodes_KB.index);
            _nodes_KB.data(new IntPtr(_total_fragments * _node_KBsize));

            _memory += MB * _node_KBsize * _total_fragments;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("peeling/kb_mdt_64/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _initing.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_mdt_64/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();
            
            _resolve = new Shader("peeling/kb_mdt_64/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform1("width", Example._scene.width);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override void peel_color()
        {
            //1. Clear zK-Buffer
            FPS.beginLocal();
            {
                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderStorageBarrierBit);
            }
            FPS.endLocal("0. Clear Buffer");

            //2. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderStorageBarrierBit);
            }
            FPS.endLocal("1. Peeling Depth");

            //3. Resolve 
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 1;

            peel_color();
        }
        #endregion

        #region Empty Functions
        protected override void blending_depth()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void clearBuffers()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    /// <summary>
    /// S-buffer-based K-buffer [OpenGL 4+]
    /// </summary>

    public class KB_SB : Peeling
    {
        #region Private Properties

        uint  _N = (uint)Example._scene.width * (uint)Example._scene.height;
        uint  _total_fragments;
        float _tmp_memory;

        Shader  _compute_hash_next  , _compute_mapping  , _blend_counter   , _peel, _resolve;
        Shading _computing_hash_next, _computing_mapping, _blending_counter, _peeling, _resolving;

        Texture _tex_count_countT_next_sem;
        Texture _tex_peel = new Texture(TextureTarget.TextureBuffer);
        Buffer  _buf_peel = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);

        const int _num_counters = 32;
        Buffer _shared_counters = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public KB_SB()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _blend_counter.delete();
            _peel.delete();
            _resolve.delete();
            _compute_hash_next.delete();
            _compute_mapping.delete();

            _blending_counter.delete();
            _peeling.delete();
            _resolving.delete();
            _computing_hash_next.delete();
            _computing_mapping.delete();

            _tex_count_countT_next_sem.delete();
            _tex_peel.delete();
            _buf_peel.delete();

            _shared_counters.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments = _N;

            // Create Peel Texture 
            _tex_count_countT_next_sem = new Texture(TextureTarget.Texture2DArray);
            _tex_count_countT_next_sem.bind();
            {
                _tex_count_countT_next_sem.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count_countT_next_sem.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count_countT_next_sem.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count_countT_next_sem.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if !GPU_MUTEX
                _tex_count_countT_next_sem.image3D(0, PixelInternalFormat.R32ui, 4, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tmp_memory += RES_MB * 4 * 4;
#else
                _tex_count_countT_next_sem.image3D(0, PixelInternalFormat.R32ui, 3, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tmp_memory += RES_MB * 4 * 3;
#endif
            }
            _tex_count_countT_next_sem.unbind();

            // Create Shared Counters
            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 5, _shared_counters.index);
            _shared_counters.data(new IntPtr(2 * _num_counters * sizeof(uint)));
            _tmp_memory += MB * sizeof(uint) * 2 * _num_counters;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Depth Buffer
            _buf_peel.bind();
            {
                _buf_peel.data(new IntPtr(sizeof(float) * 2*  _total_fragments));
                _tex_peel.bind();
                {
                    Texture.buffer(SizedInternalFormat.Rg32f, _buf_peel.index);
                }
                _tex_peel.unbind();
            }
            _buf_peel.unbind();

            _memory += MB * 8 * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _blend_counter = new Shader("peeling/kb_sb/blend_counter", ShaderType.FragmentShader);
            _blend_counter.complile(ShaderType.FragmentShader);

            _blending_counter = new Shading();
            _blending_counter.create();
            if (Example._scene.tessellation)
            {
                _blending_counter.attachShader(Example._scene.renderVertexTess.id);
                _blending_counter.attachShader(Example._scene.renderTessellationControl.id);
                _blending_counter.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _blending_counter.attachShader(Example._scene.renderVertex.id);
            _blending_counter.attachShader(Example._scene.renderGeometry.id);
            _blending_counter.attachShader(_blend_counter.id);
            _blending_counter.link();

            _blending_counter.use();
            {
                _blending_counter.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending_counter.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _compute_hash_next = new Shader("peeling/kb_sb/compute_hash_next", ShaderType.FragmentShader);
            _compute_hash_next.complile(ShaderType.FragmentShader);

            _computing_hash_next = new Shading();
            _computing_hash_next.create();
            _computing_hash_next.attachShader(Texture.vertex.id);
            _computing_hash_next.attachShader(_compute_hash_next.id);
            _computing_hash_next.link();

            _computing_hash_next.use();
            {
                _computing_hash_next.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _compute_mapping = new Shader("peeling/kb_sb/compute_mapping", ShaderType.FragmentShader);
            _compute_mapping.complile(ShaderType.FragmentShader);

            _computing_mapping = new Shading();
            _computing_mapping.create();
            _computing_mapping.attachShader(Texture.vertex.id);
            _computing_mapping.attachShader(_compute_mapping.id);
            _computing_mapping.link();

            _computing_mapping.use();
            {
                _computing_mapping.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_sb/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_sb/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_count_countT_next_sem.index , 0, true , 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel.index                  , 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);
            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 5, _shared_counters.index);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            //0. Init 
            FPS.beginLocal();
            {
                _tex_count_countT_next_sem.bind();
                _tex_count_countT_next_sem.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_count_countT_next_sem.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                _shared_counters.bind();
                _shared_counters.clear(PixelInternalFormat.R8ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                _shared_counters.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderStorageBarrierBit);
            }
            FPS.endLocal("0. Initing");

            //1. Compute Counter
            FPS.beginLocal();
            {
                Example._scene.multiFragmentRendering.beginSamplesQuery();
                {
                    _blending_counter.use();
                    {
                        if (Example._scene.instancing)
                        {
                            _blending_counter.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                            _blending_counter.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                        }
                        if (Example._scene.tessellation)
                        {
                            _blending_counter.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _blending_counter.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }
                        Example._scene.meshAnimation.drawModels(ref _blending_counter, false, false);
                    }
                    Shading.close();
                    GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                }
                if (!Example._scene.multiFragmentRendering.endSamplesQuery())
                {
                    _total_fragments = Example._scene.multiFragmentRendering.samplesQuery.samples + 1U;
                    initSharedPool();
                }
            }
            FPS.endLocal("1. Compute Counter");

            //2. Compute Hashing-Address
            FPS.beginLocal();
            {
                _computing_hash_next.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("2. Compute Hashing-Address");

            //3. Compute Mapping
            FPS.beginLocal();
            {
                _computing_mapping.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Compute Mapping");

            //4. Render the model into the S-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("5. Peeling");

            //5. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();

                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("6. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    /// <summary>
    /// K+-buffer with Dynamic Computation of K [OpenGL 4+]
    /// </summary>

    public class KB_Array_Max_DynK : Peeling
    {
        #region Private Properties

        float   _tmp_memory;
        int     _total_fragments;
        const int _sizeHistogram = 1024;
        int[]   _histogram = new int[_sizeHistogram];
        uint[]  _H = new uint[_sizeHistogram];

        Shader _init, _peel, _resolve, _blend_counter, _compute_histogram;
        Shading _initing, _peeling, _resolving, _blending_counter, _computing_histogram;

        Texture _tex_peel, _tex_counter;
#if !GPU_MUTEX
        Texture _tex_semaphore;
#endif
        Buffer      _histogram_counters;
        FrameBuffer _fbo_color;

#if multipass
        FrameBuffer _fbo_depth;
        Texture     _tex_depth, _tex_color;
        Shader      _peeler_depth;
        Shading     _peeling_depth;
#endif
        #endregion

        #region Constructor
        public KB_Array_Max_DynK()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _compute_histogram.delete();
            _blend_counter.delete();
            _peel.delete();
            _resolve.delete();
            _init.delete();
            _peeling.delete();
            _resolving.delete();
            _initing.delete();
            _blending_counter.delete();
            _computing_histogram.delete();

            _tex_peel.delete();
            _tex_counter.delete();
#if !GPU_MUTEX
            _tex_semaphore.delete();
#endif
            _histogram_counters.delete();

            _fbo_color.delete();
#if multipass
            _fbo_depth.delete();
            _tex_depth.delete();
            _tex_color.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();
#endif
        }
        #endregion

        #region Buffer Functions
        protected override void clearBuffers()
        {
#if multipass
            _fbo_depth.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.setMask(0, true, false, false, false);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(0, true, true, true, true);
#endif
        }
        protected override void initBuffers()
        {
            _sizeHeap = 1;

            _tmp_memory = 0f;
            for (int I = 0; I < _sizeHistogram; I++)
                _H[I] = 0U;

            // Create Semaphore Texture 
#if !GPU_MUTEX
            _tex_semaphore = new Texture(TextureTarget.TextureRectangle);
            _tex_semaphore.bind();
            {
                _tex_semaphore.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_semaphore.unbind();
            _tmp_memory += RES_MB * 4;
#endif
            // Create Count Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Depth Histogram
            _histogram_counters = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _histogram_counters.bind();
            {
                _histogram_counters.data(new IntPtr(sizeof(uint) * _sizeHistogram));
            }
            _histogram_counters.unbind();
            _tmp_memory += MB * sizeof(uint) * _sizeHistogram;

            // Create Color Texture
#if multipass
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _memory += RES_MB * 4;
            
#endif

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
#if multipass
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
#else
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
#endif
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

#if multipass
            // Create Depth Texture
            _tex_depth = new Texture(TextureTarget.TextureRectangle);
            _tex_depth.bind();
            {
                _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_depth.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            }
            _tex_depth.unbind();
            _memory += RES_MB * 4;

            // Create Depth FrameBuffer 
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth, 0);
            _fbo_depth.checkStatus();
            FrameBuffer.unbind();
#endif
            _memory = _tmp_memory;

            // Create Peel Texture 
            _tex_peel = new Texture(TextureTarget.Texture2DArray);
            _tex_peel.bind();
            {
                _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.image3D(0, PixelInternalFormat.Rg32f, _sizeHeap, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            }
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeHeap;
        }
        private void initSharedPool(int K)
        {
            _memory = _tmp_memory;

            // ReAlloc Peel Texture 
            _tex_peel.bind();
            {
                _tex_peel.image3D(0, PixelInternalFormat.Rg32f, K, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            }
            _tex_peel.unbind();

            _memory += RES_MB * 8 * K;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _blend_counter = new Shader("peeling/kb_array_max_dynk/blend_counter", ShaderType.FragmentShader);
            _blend_counter.complile(ShaderType.FragmentShader);

            _blending_counter = new Shading();
            _blending_counter.create();
            _blending_counter.attachShader(Example._scene.renderVertex.id);
            _blending_counter.attachShader(Example._scene.renderGeometry.id);
            _blending_counter.attachShader(_blend_counter.id);
            _blending_counter.link();

            _blending_counter.use();
            {
                _blending_counter.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending_counter.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending_counter.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _init = new Shader("peeling/kb_array_max_dynk/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _compute_histogram = new Shader("peeling/kb_array_max_dynk/compute_histogram", ShaderType.FragmentShader);
            _compute_histogram.complile(ShaderType.FragmentShader);

            _computing_histogram = new Shading();
            _computing_histogram.create();
            _computing_histogram.attachShader(Texture.vertex.id);
            _computing_histogram.attachShader(_compute_histogram.id);
            _computing_histogram.link();

            _computing_histogram.use();
            {
                _computing_histogram.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_array_max_dynk/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_array_max_dynk/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

#if multipass
            // depth
            _peeler_depth = new Shader("peeling/kb_array_max_dynk/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Texture.vertex.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
#endif
        }
        #endregion

        #region Peeling Functions
        private void peel_compute_K()
        {
#if multipass
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);
#endif
            //1. Clear Counter
            FPS.beginLocal();
            {
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureFetchBarrierBit);
            }
            FPS.endLocal("0. Clear Counter");

            //1. Compute Counter
            FPS.beginLocal();
            {
                Example._scene.multiFragmentRendering.beginSamplesQuery();
                {
                    _blending_counter.use();
                    {
                        if (Example._scene.tessellation)
                        {
                            if (Example._scene.meshAnimation.selectedPose == -1)
                                for (int i = 0; i < Example._scene.meshAnimation.poses.Count; i++)
                                    Example._scene.meshAnimation.poses[i].primitiveMode = PrimitiveType.Triangles;
                            else
                                Example._scene.meshAnimation.pose.primitiveMode = PrimitiveType.Triangles;
                        }

                        // Render
                        {
                            if (Example._scene.instancing)
                            {
                                _blending_counter.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _blending_counter.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            Example._scene.meshAnimation.drawModels(ref _blending_counter, false, false);
                        }

                        if (Example._scene.tessellation)
                        {
                            if (Example._scene.meshAnimation.selectedPose == -1)
                                for (int i = 0; i < Example._scene.meshAnimation.poses.Count; i++)
                                    Example._scene.meshAnimation.poses[i].primitiveMode = PrimitiveType.Patches;
                            else
                                Example._scene.meshAnimation.pose.primitiveMode = PrimitiveType.Patches;
                        }
                    }
                    Shading.close();
                    GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                }

                if (!Example._scene.multiFragmentRendering.endSamplesQuery())
                    _total_fragments = (int)Example._scene.multiFragmentRendering.samplesQuery.samples;
            }
            FPS.endLocal("1. Compute Counter");

            //2. Compute Histogram
            int maxK = 1;
            if (_total_fragments > 0)
            {
                maxK = Example._scene.multiFragmentRendering.maxK;

                FPS.beginLocal();
                {
                    {
                        // Reset Histogram Values to Zero
                        //FPS.beginLocal();
                        {
                            _histogram_counters.bind();
                            _histogram_counters.subdata(ref _H);
                            _histogram_counters.unbind();
                            GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);
                        }
                        //FPS.endLocal("2.1 Reset Histogram");

                        // Compute Histogram Values
                        //FPS.beginLocal();
                        {
                            _computing_histogram.use();
                            {
                                Texture.image.draw();
                            }
                            Shading.close();
                            GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);
                        }
                        //FPS.endLocal("2.2 Compute Histogram");

                        // Get Histogram Values
                        //FPS.beginLocal();
                        {
                            _histogram_counters.bind();
                            {
                                IntPtr _histogramValues = GL.MapBufferRange(BufferTarget.AtomicCounterBuffer, IntPtr.Zero, new IntPtr(sizeof(uint) * _sizeHistogram), BufferAccessMask.MapReadBit);
                                System.Runtime.InteropServices.Marshal.Copy(_histogramValues, _histogram, 0, _sizeHistogram);
                                GL.UnmapBuffer(BufferTarget.AtomicCounterBuffer);
                            }
                            _histogram_counters.unbind();
                        }
                        //FPS.endLocal("2.3 Get Histogram");

                        int _discarded_fragments = 0, _discarded_fragments_new, _inc = 0;
                        for (int maxJ = _sizeHistogram - 1; maxJ >= 0; --maxJ)
                        {
                            // Dynamic Memory
                            int maxJ_1 = maxJ + 1;
                            if (maxJ_1 > Example._scene.multiFragmentRendering.maxK)
                            {
                                _discarded_fragments_new = (maxJ_1-Example._scene.multiFragmentRendering.maxK) * _histogram[maxJ];
                                _discarded_fragments += _discarded_fragments_new;
                                _inc += _histogram[maxJ];
                            }
                            else
                            {
                                _peelingError  = ((float)(_discarded_fragments) / (float)_total_fragments) * 100.0f;
                                _peelingMemory = _tmp_memory + RES_MB * 8 * maxJ_1;
                                if (_peelingError  >= Example._scene.multiFragmentRendering.maxKerror && 
                                    _peelingMemory <= Example._scene.multiFragmentRendering.maxKmemory)
                                {
                                    maxK = maxJ_1;
                                    break;
                                }
                                _inc                 += _histogram[maxJ];
                                _discarded_fragments += _inc;
                            }
                        }
                    }
                }
                FPS.endLocal("2. Compute Histogram");
            }
            //2.1 Alloc Memory
            if (!Example._scene.multiFragmentRendering.maxKfixed || _sizeHeap < maxK)
            {
                _sizeHeap = maxK;
                initSharedPool(_sizeHeap);
            }      
        }
        protected override bool peel_depth()
        {
            bool S = false;
#if multipass
            if (Example._scene.multiFragmentRendering.passes == 0)
                return false;

            FPS.beginLocal();
            {
                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, false, false, false);
                Buffer.clear(1.0f, 0.0f, 0.0f, 0.0f);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        Texture.image.draw();
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Buffer.setMask(0, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling(Depth)");
#endif
            return S;
        }
        protected override void peel_color()
        {
            //3. Clear K-Buffer
            FPS.beginLocal();
            {
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

#if !GPU_MUTEX
                _tex_semaphore.bind();
                _tex_semaphore.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_semaphore.unbind();
#endif
                GL.MemoryBarrier(MemoryBarrierFlags.TextureFetchBarrierBit);

                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("3. Clear Buffer");

            //4. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    _peeling.bindUniform1("K_SIZE", _sizeHeap);
#if multipass
                    Texture.active(TextureUnit.Texture6); _tex_depth.bind();
#endif
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("4. Peeling");

            //3. Resolve 
            FPS.beginLocal();
            {
#if multipass
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);
#else
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
#endif
                _resolving.use();
                {
                    _resolving.bindUniform1("K_SIZE", _sizeHeap);
#if multipass
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeHeap);
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
#endif
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("4. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);
            
            GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#if !GPU_MUTEX
            GL.BindImageTexture(1, _tex_semaphore.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#endif
            GL.BindImageTexture(4, _tex_peel.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);
            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 5, _histogram_counters.index);

            Example._scene.updateShaders(ref _peeling);
#if multipass
            //0. Depth Peeling
            clearBuffers();
            peel_compute_K();

            int passes = 0;
            Example._scene.multiFragmentRendering.passes = 1;
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    passes += _sizeHeap;
                    Example._scene.multiFragmentRendering.passes++;
                }
                else
                    break;
            }
            
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes;
#else
            peel_compute_K();
            peel_color();
            Example._scene.multiFragmentRendering.total_passes = 2;
#endif
        }
        protected override void draw_final()
        {
#if multipass
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }
            FPS.endLocal("#. Final Draw");
#endif
        }
        #endregion

        #region Empty Functions
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class KB_SB_DynK : Peeling
    {
        #region Private Properties

        uint    _N = (uint)Example._scene.width * (uint)Example._scene.height;
        uint    _total_fragments;
        float   _tmp_memory;
                
        // Histogram
        const int _histogramSize = 1024;
        int [] _histogram   = new int[_histogramSize];
        uint[] _H           = new uint[_histogramSize];

        Shader  _compute_histogram, _compute_hash_next, _compute_mapping, _init_depth, _blend_counter, _peel, _resolve;
        Shading _computing_histogram, _computing_hash_next, _computing_mapping, _initing_depth, _blending_counter, _peeling, _resolving;

        Texture _tex_count_countT_next_sem;
        Texture _tex_peel = new Texture(TextureTarget.TextureBuffer);
        Buffer  _buf_peel = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);
        Buffer  _histogram_counters;

        const int _num_counters = 32;
        Buffer _shared_counters = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public KB_SB_DynK()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _blend_counter.delete();
            _peel.delete();
            _resolve.delete();
            _compute_hash_next.delete();
            _init_depth.delete();
            _compute_mapping.delete();
            _compute_histogram.delete();

            _blending_counter.delete();
            _peeling.delete();
            _resolving.delete();
            _initing_depth.delete();
            _computing_hash_next.delete();
            _computing_mapping.delete();
            _computing_histogram.delete();

            _tex_count_countT_next_sem.delete();
            _tex_peel.delete();
            _buf_peel.delete();

            _histogram_counters.delete();
            _shared_counters.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments = _N;

            for (int I = 0; I < _histogramSize; I++)
                _H[I] = 0U;

            // Create Depth Histogram
            _histogram_counters = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _histogram_counters.bind();
            {
                _histogram_counters.data(new IntPtr(sizeof(uint) * _histogramSize));
            }
            _histogram_counters.unbind();
            _tmp_memory += MB * sizeof(uint) * _histogramSize;

            // Create Peel Texture 
            _tex_count_countT_next_sem = new Texture(TextureTarget.Texture2DArray);
            _tex_count_countT_next_sem.bind();
            {
                _tex_count_countT_next_sem.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count_countT_next_sem.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count_countT_next_sem.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count_countT_next_sem.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if !GPU_MUTEX
                _tex_count_countT_next_sem.image3D(0, PixelInternalFormat.R32ui, 4, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tmp_memory += RES_MB * 4 * 4;
#else
                _tex_count_countT_next_sem.image3D(0, PixelInternalFormat.R32ui, 3, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tmp_memory += RES_MB * 4 * 3;
#endif
            }
            _tex_count_countT_next_sem.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            // Create Shared Counters
            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 5, _shared_counters.index);
            _shared_counters.data(new IntPtr(2 * _num_counters * sizeof(uint)));
            _tmp_memory += MB * sizeof(uint) * 2 * _num_counters;

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Peel Buffer
            _buf_peel.bind();
            {
                _buf_peel.data(new IntPtr(sizeof(float) * 2 * _total_fragments));
                _tex_peel.bind();
                {
                    Texture.buffer(SizedInternalFormat.Rg32f, _buf_peel.index);
                }
                _tex_peel.unbind();
            }
            _buf_peel.unbind();

            _memory += MB * 8 * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _blend_counter = new Shader("peeling/kb_sb_dynk/blend_counter", ShaderType.FragmentShader);
            _blend_counter.complile(ShaderType.FragmentShader);

            _blending_counter = new Shading();
            _blending_counter.create();
            if (Example._scene.tessellation)
            {
                _blending_counter.attachShader(Example._scene.renderVertexTess.id);
                _blending_counter.attachShader(Example._scene.renderTessellationControl.id);
                _blending_counter.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _blending_counter.attachShader(Example._scene.renderVertex.id);
            _blending_counter.attachShader(Example._scene.renderGeometry.id);
            _blending_counter.attachShader(_blend_counter.id);
            _blending_counter.link();

            _blending_counter.use();
            {
                _blending_counter.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending_counter.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _compute_histogram = new Shader("peeling/kb_sb_dynk/compute_histogram", ShaderType.FragmentShader);
            _compute_histogram.complile(ShaderType.FragmentShader);

            _computing_histogram = new Shading();
            _computing_histogram.create();
            _computing_histogram.attachShader(Texture.vertex.id);
            _computing_histogram.attachShader(_compute_histogram.id);
            _computing_histogram.link();

            _computing_histogram.use();
            {
                _computing_histogram.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _compute_hash_next = new Shader("peeling/kb_sb_dynk/compute_hash_next", ShaderType.FragmentShader);
            _compute_hash_next.complile(ShaderType.FragmentShader);

            _computing_hash_next = new Shading();
            _computing_hash_next.create();
            _computing_hash_next.attachShader(Texture.vertex.id);
            _computing_hash_next.attachShader(_compute_hash_next.id);
            _computing_hash_next.link();

            _computing_hash_next.use();
            {
                _computing_hash_next.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _compute_mapping = new Shader("peeling/kb_sb_dynk/compute_mapping", ShaderType.FragmentShader);
            _compute_mapping.complile(ShaderType.FragmentShader);

            _computing_mapping = new Shading();
            _computing_mapping.create();
            _computing_mapping.attachShader(Texture.vertex.id);
            _computing_mapping.attachShader(_compute_mapping.id);
            _computing_mapping.link();

            _computing_mapping.use();
            {
                _computing_mapping.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _init_depth = new Shader("peeling/kb_sb_dynk/init_depth", ShaderType.FragmentShader);
            _init_depth.complile(ShaderType.FragmentShader);

            _initing_depth = new Shading();
            _initing_depth.create();
            _initing_depth.attachShader(Texture.vertex.id);
            _initing_depth.attachShader(_init_depth.id);
            _initing_depth.link();

            _initing_depth.use();
            {
                _initing_depth.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_sb_dynk/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_sb_dynk/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_count_countT_next_sem.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);
            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 5, _shared_counters.index);
            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 6, _histogram_counters.index);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            //0. Init 
            FPS.beginLocal();
            {
                _tex_count_countT_next_sem.bind();
                _tex_count_countT_next_sem.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_count_countT_next_sem.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                _shared_counters.bind();
                _shared_counters.clear(PixelInternalFormat.R8ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                _shared_counters.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderStorageBarrierBit);
            }
            FPS.endLocal("0. Initing");

            //1. Compute Counter
            FPS.beginLocal();
            {
                Example._scene.multiFragmentRendering.beginSamplesQuery();
                {
                    _blending_counter.use();
                    {
                        if (Example._scene.instancing)
                        {
                            _blending_counter.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                            _blending_counter.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                        }
                        if (Example._scene.tessellation)
                        {
                            _blending_counter.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _blending_counter.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }
                        Example._scene.meshAnimation.drawModels(ref _blending_counter, false, false);
                    }
                    Shading.close();
                    GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                }
                if (!Example._scene.multiFragmentRendering.endSamplesQuery())
                    _total_fragments = Example._scene.multiFragmentRendering.samplesQuery.samples + 1;
            }
            FPS.endLocal("1. Compute Counter");

            //2. Compute Histogram
            int maxK = 1;
            if (_total_fragments > 0)
            {
                maxK = Example._scene.multiFragmentRendering.maxK;

                FPS.beginLocal();
                {
                    {
                        // Reset Histogram Values to Zero
                        //FPS.beginLocal();
                        {
                            _histogram_counters.bind();
                            _histogram_counters.subdata(ref _H);
                            _histogram_counters.unbind();
                            GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);
                        }
                        //FPS.endLocal("2.1 Reset Histogram");

                        // Compute Histogram Values
                        //FPS.beginLocal();
                        {
                            _computing_histogram.use();
                            {
                                Texture.image.draw();
                            }
                            Shading.close();
                            GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);
                        }
                        //FPS.endLocal("2.2 Compute Histogram");

                        // Get Histogram Values
                        //FPS.beginLocal();
                        {
                            _histogram_counters.bind();
                            {
                                IntPtr _histogramValues = GL.MapBufferRange(BufferTarget.AtomicCounterBuffer, IntPtr.Zero, new IntPtr(sizeof(uint) * _histogramSize), BufferAccessMask.MapReadBit);
                                System.Runtime.InteropServices.Marshal.Copy(_histogramValues, _histogram, 0, _histogramSize);
                                GL.UnmapBuffer(BufferTarget.AtomicCounterBuffer);
                            }
                            _histogram_counters.unbind();
                        }
                        //FPS.endLocal("2.3 Get Histogram");

                        int _discarded_fragments = 0, _discarded_fragments_new, _inc = 0;
                        for (int maxJ = _histogramSize - 1; maxJ >= 0; --maxJ)
                           // if (_histogram[maxJ] > 0)
                            {
                                // Dynamic Memory
                                int maxJ_1 = maxJ + 1;
                                if (maxJ_1 > Example._scene.multiFragmentRendering.maxK)
                                {
                                    _discarded_fragments_new = (maxJ_1 - Example._scene.multiFragmentRendering.maxK) * _histogram[maxJ];
                                    _discarded_fragments += _discarded_fragments_new;
                                    _inc += _histogram[maxJ];
                                }
                                else
                                {
                                    _peelingError = ((float)(_discarded_fragments) / (float)_total_fragments) * 100.0f;
                                    _peelingMemory = _tmp_memory + MB * 8 * (_total_fragments-(uint)_discarded_fragments);
                                    if (_peelingError  >= Example._scene.multiFragmentRendering.maxKerror && 
                                        _peelingMemory <= Example._scene.multiFragmentRendering.maxKmemory)
                                    {
                                        maxK = maxJ_1;
                                        _total_fragments -= (uint)_discarded_fragments;
                                        break;
                                    }
                                    _inc                 += _histogram[maxJ];
                                    _discarded_fragments += _inc;
                                }
                            }
                    }
                }
                FPS.endLocal("2. Compute Histogram");
            }

            //2.1 Alloc Memory
            FPS.beginLocal();
            {
                if (!Example._scene.multiFragmentRendering.maxKfixed || _sizeHeap < maxK)
                {
                    _sizeHeap = maxK;
                    initSharedPool();
                }
            }
            FPS.endLocal("2.1 Alloc Memory");

            //2. Compute Hashing-Address
            FPS.beginLocal();
            {
                _computing_hash_next.use();
                {
                    _computing_hash_next.bindUniform1("K_SIZE", _sizeHeap);
                    Texture.image.draw();
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("3. Compute Hashing-Address");

            //3. Compute Mapping
            FPS.beginLocal();
            {
                _computing_mapping.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("4. Compute Mapping");

            //4. Init Depth
            FPS.beginLocal();
            {
                _initing_depth.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("5. Init Counter - Depth");

            //4. Render the model into the S-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    _peeling.bindUniform1("K_SIZE", _sizeHeap);
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("6.Peeling");

            //5. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();

                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("7. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    /// <summary>
    /// A-buffer-based K-buffer [OpenGL 4+]
    /// </summary>

    public class KB_AB_Array : Peeling
    {
        #region Private Properties

        Shader      _peel, _resolve;
        Shading     _peeling, _resolving;

        FrameBuffer _fbo_color;
        Texture     _tex_peel, _tex_counter;

        #endregion

        #region Constructor
        public KB_AB_Array()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_peel.delete();
            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
            _tex_peel = new Texture(TextureTarget.Texture2DArray);
            _tex_peel.bind();
            {
                _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.image3D(0, PixelInternalFormat.Rg32f, _sizeArray, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            }
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeArray;

            // Create Count Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/kb_ab_array/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_ab_array/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override void peel_color()
        {
            //1. Clear K-Buffer
            FPS.beginLocal();
            {
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("0. Clear Buffer");

            //2. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //3. Resolve 
            FPS.beginLocal();
            {
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    _resolving.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                    _resolving.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 1;

            peel_color();
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class KB_AB_SB : Peeling
    {
        #region Private Properties

        uint    _N = (uint)Example._scene.width * (uint)Example._scene.height;
        uint    _total_fragments;
        float   _tmp_memory;

        Shader  _compute_hash_next, _compute_mapping, _blend_counter, _peel, _resolve;
        Shading _computing_hash_next, _computing_mapping, _blending_counter, _peeling, _resolving;

        Texture _tex_counter, _tex_next;
        Texture _tex_peel = new Texture(TextureTarget.TextureBuffer);
        Buffer  _buf_peel = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);

        const int _num_counters = 32;
        UInt64[] _next_address = new UInt64[_num_counters];
        Buffer[] _shared_counters = new Buffer[_num_counters];

        UInt64[] _final_address = new UInt64[_num_counters];
        Buffer[] _shared_counters_final = new Buffer[_num_counters];

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public KB_AB_SB()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _blend_counter.delete();
            _peel.delete();
            _resolve.delete();
            _compute_hash_next.delete();
            _compute_mapping.delete();

            _blending_counter.delete();
            _peeling.delete();
            _resolving.delete();
            _computing_hash_next.delete();
            _computing_mapping.delete();

            _tex_next.delete();
            _tex_counter.delete();
            _tex_peel.delete();
            _buf_peel.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments = _N;

            // Create Next Address Texture 
            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Counter Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            // Create Shared Counters
            for (int i = 0; i < _num_counters; i++)
            {
                _shared_counters[i] = new Buffer(BufferTarget.UniformBuffer, BufferUsageHint.DynamicDraw);
                _shared_counters[i].bind();
                {
                    _shared_counters[i].storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
                    GL.NV.MakeBufferResident((NvShaderBufferLoad)BufferTarget.UniformBuffer, (NvShaderBufferLoad)TextureAccess.ReadWrite);
                    GL.NV.GetBufferParameter((NvShaderBufferLoad)BufferTarget.UniformBuffer, NvShaderBufferLoad.BufferGpuAddressNv, out _next_address[i]);
                }
                _shared_counters[i].unbind();
                _tmp_memory += MB * sizeof(uint);
            }

            for (int i = 0; i < _num_counters; i++)
            {
                _shared_counters_final[i] = new Buffer(BufferTarget.UniformBuffer, BufferUsageHint.DynamicDraw);
                _shared_counters_final[i].bind();
                {
                    _shared_counters_final[i].storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
                    GL.NV.MakeBufferResident((NvShaderBufferLoad)BufferTarget.UniformBuffer, (NvShaderBufferLoad)TextureAccess.ReadWrite);
                    GL.NV.GetBufferParameter((NvShaderBufferLoad)BufferTarget.UniformBuffer, NvShaderBufferLoad.BufferGpuAddressNv, out _final_address[i]);
                }
                _shared_counters_final[i].unbind();
                _tmp_memory += MB * sizeof(uint);
            }

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            _buf_peel.bind();
            {
                _buf_peel.data(new IntPtr(sizeof(float) * 2 * _total_fragments));
                _tex_peel.bind();
                {
                    Texture.buffer(SizedInternalFormat.Rg32f, _buf_peel.index);
                }
                _tex_peel.unbind();
            }
            _buf_peel.unbind();

            _memory += MB * 8 * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _blend_counter = new Shader("peeling/kb_ab_sb/blend_counter", ShaderType.FragmentShader);
            _blend_counter.complile(ShaderType.FragmentShader);

            _blending_counter = new Shading();
            _blending_counter.create();
            if (Example._scene.tessellation)
            {
                _blending_counter.attachShader(Example._scene.renderVertexTess.id);
                _blending_counter.attachShader(Example._scene.renderTessellationControl.id);
                _blending_counter.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _blending_counter.attachShader(Example._scene.renderVertex.id);
            _blending_counter.attachShader(Example._scene.renderGeometry.id);
            _blending_counter.attachShader(_blend_counter.id);
            _blending_counter.link();

            _blending_counter.use();
            {
                _blending_counter.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending_counter.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending_counter.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _compute_hash_next = new Shader("peeling/kb_ab_sb/compute_hash_next", ShaderType.FragmentShader);
            _compute_hash_next.complile(ShaderType.FragmentShader);

            _computing_hash_next = new Shading();
            _computing_hash_next.create();
            _computing_hash_next.attachShader(Texture.vertex.id);
            _computing_hash_next.attachShader(_compute_hash_next.id);
            _computing_hash_next.link();

            _computing_hash_next.use();
            {
                _computing_hash_next.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _computing_hash_next.bindUniform1_64("next_address", _num_counters, _next_address);
            }
            Shading.close();

            _compute_mapping = new Shader("peeling/kb_ab_sb/compute_mapping", ShaderType.FragmentShader);
            _compute_mapping.complile(ShaderType.FragmentShader);

            _computing_mapping = new Shading();
            _computing_mapping.create();
            _computing_mapping.attachShader(Texture.vertex.id);
            _computing_mapping.attachShader(_compute_mapping.id);
            _computing_mapping.link();

            _computing_mapping.use();
            {
                _computing_mapping.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _computing_mapping.bindUniform1_64("next_address", _num_counters, _next_address);
                _computing_mapping.bindUniform1_64("final_address", _num_counters, _final_address);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_ab_sb/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);

                _peeling.bindUniform1_64("final_address", _num_counters, _final_address);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_ab_sb/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform1_64("final_address", _num_counters, _final_address);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            //0. Init Counter-Next
            FPS.beginLocal();
            {
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                for (int i = 0; i < _num_counters; i++)
                {
                    _shared_counters[i].bind();
                    _shared_counters[i].clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                    _shared_counters[i].unbind();
                }
            }
            FPS.endLocal("0. Initing Counter-Next");

            //1. Compute Counter
            FPS.beginLocal();
            {
                Example._scene.multiFragmentRendering.beginSamplesQuery();
                {
                    _blending_counter.use();
                    {/*
                        if (Example._scene.tessellation)
                        {
                            if (Example._scene.meshAnimation.selectedPose == -1)
                                for (int i = 0; i < Example._scene.meshAnimation.poses.Count; i++)
                                    Example._scene.meshAnimation.poses[i].primitiveMode = PrimitiveType.Triangles;
                            else
                                Example._scene.meshAnimation.pose.primitiveMode = PrimitiveType.Triangles;
                        }*/

                        // Render
                        {
                            if (Example._scene.instancing)
                            {
                                _blending_counter.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _blending_counter.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            if (Example._scene.tessellation)
                            {
                                _blending_counter.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _blending_counter.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            Example._scene.meshAnimation.drawModels(ref _blending_counter, false, false);
                        }
                        /*
                        if (Example._scene.tessellation)
                        {
                            if (Example._scene.meshAnimation.selectedPose == -1)
                                for (int i = 0; i < Example._scene.meshAnimation.poses.Count; i++)
                                    Example._scene.meshAnimation.poses[i].primitiveMode = PrimitiveType.Patches;
                            else
                                Example._scene.meshAnimation.pose.primitiveMode = PrimitiveType.Patches;
                        }*/
                    }
                    Shading.close();

                    GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                }
                if (!Example._scene.multiFragmentRendering.endSamplesQuery())
                {
                    _total_fragments = Example._scene.multiFragmentRendering.samplesQuery.samples + 1;
                    initSharedPool();
                }
            }
            FPS.endLocal("1. Compute Counter");

            //2. Compute Hashing-Address
            FPS.beginLocal();
            {
                _computing_hash_next.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("2. Compute Hashing-Address");

            //3. Compute Mapping
            FPS.beginLocal();
            {
                _computing_mapping.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Compute Mapping");

            //4. Render the model into the S-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("4. Peeling");

            //5. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();

                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("5. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }
    
    public class KB_AB_LL : Peeling
    {
        #region Private Properties

        int     _node_LLsize;
        uint    _total_fragments;
        float   _tmp_memory;

        Shader _peel, _resolve;
        Shading _peeling, _resolving;

        Buffer _atomic_counter;
        Buffer _nodes_LL = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        Texture _tex_next;

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public KB_AB_LL() : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_next.delete();
            _nodes_LL.delete();

            _atomic_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _node_LLsize = sizeof(float) + 2 * sizeof(uint);
            _total_fragments = (uint)(Example._scene.width * Example._scene.height);

            // Create Page ID Texture 
            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            _atomic_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _atomic_counter.bind();
            {
                _atomic_counter.storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
            }
            _atomic_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 1, _nodes_LL.index);
            _nodes_LL.data(new IntPtr(_total_fragments * _node_LLsize));

            _memory += MB * _node_LLsize * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/kb_ab_ll/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_ab_ll/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 4, _atomic_counter.index);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 1;

            bool S = false, First = true;
            while (true)
            {
                //0. Clear A-Buffer
                FPS.beginLocal();
                {
                    //0.1 Init Global Shared Counter
                    _atomic_counter.bind();
                    _atomic_counter.clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                    _atomic_counter.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);

                    //0.2 Clear Next
                    _tex_next.bind();
                    _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_next.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Clear Buffer");

                //1. Render the model into the A-Buffer
                FPS.beginLocal();
                {
                    if (First)
                        Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _peeling.use();
                        {
                            if (Example._scene.instancing)
                            {
                                _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            if (Example._scene.tessellation)
                            {
                                _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();
                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit | MemoryBarrierFlags.ShaderStorageBarrierBit);
                    }
                    if (First)
                        S = Example._scene.multiFragmentRendering.endSamplesQuery();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Peeling");

                //2. Resize shared pool dynamically
                if (S || !First)
                    break;
                else
                {
                    First = false;
                    _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples;
                    initSharedPool();
                    FPS.resetLocal();
                }
                Example._scene.multiFragmentRendering.total_passes++;
            }

            //4. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    /// <summary>
    /// find the kth fragment and then perform efficient clipping
    /// </summary>

    #region K-BUFFER Algorithms with Clipping

    public class KB_Clipping : Peeling
    {
        #region Private Properties

        Shader  _depth_bounds_compute, _histogram_compute, _histogram_resolve, _depth_bounds_clear,_peeler, _resolve;
        Shading _depth_bounds_computing, _histogram_computing, _histogram_resolving, _depth_bounds_clearing, _peeling, _resolving;

        Texture[]   _tex_peel = new Texture[8];
        Texture     _tex_color, _tex_depth_k, _tex_histogram, _tex_min_max;

        FrameBuffer _fbo_peel, _fbo_color;

#if multipass
        Texture     _tex_depth;
        FrameBuffer _fbo_depth;

        Shader      _peeler_depth;
        Shading     _peeling_depth;
#endif
        #endregion

        #region Constructors
        public KB_Clipping()
            : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _depth_bounds_clear.delete();
            _depth_bounds_compute.delete();
            _histogram_compute.delete();
            _histogram_resolve.delete();
            _peeler.delete();
            _resolve.delete();

            _depth_bounds_clearing.delete();
            _depth_bounds_computing.delete();
            _histogram_computing.delete();
            _histogram_resolving.delete();
            _peeling.delete();
            _resolving.delete();

            for (int i = 0; i < _sizeMRT; i++)
                _tex_peel[i].delete();

            _tex_depth_k.delete();
            _tex_histogram.delete();
            _tex_min_max.delete();

            _fbo_peel.delete();
            _fbo_color.delete();

#if multipass
            _tex_depth.delete();
            _fbo_depth.delete();

            _peeler_depth.delete();
            _peeling_depth.delete();
#endif
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create k-th Depth Texture 
            _tex_depth_k = new Texture(TextureTarget.TextureRectangle);
            _tex_depth_k.bind();
            _tex_depth_k.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth_k.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth_k.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_k.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_k.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            _tex_depth_k.unbind();
            _memory += RES_MB * 4;

            // Create Histogram-Peel-Color Texture 
            _tex_histogram = new Texture(TextureTarget.Texture2DArray);
            _tex_histogram.bind();
            _tex_histogram.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_histogram.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_histogram.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_histogram.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_histogram.image3D(0, PixelInternalFormat.R32ui, _sizeBucketCL, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tex_histogram.unbind();
            _memory += RES_MB * 4 * _sizeBucketCL;

            // Create Counter-Semaphore-MinMaxDepth Texture Array
            _tex_min_max = new Texture(TextureTarget.Texture2DArray);
            _tex_min_max.bind();
            _tex_min_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_min_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_min_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_min_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_min_max.image3D(0, PixelInternalFormat.R32ui, 2, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tex_min_max.unbind();
            _memory += RES_MB * 4 * 2;

            for (int i = 0; i < _sizeMRT; i++)
            {
                // Create Peel Texture
#if multisample
                _tex_peel[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_peel[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_peel[i].bind();
                _tex_peel[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
#if packing
                _tex_peel[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_peel[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f  , false);
                _memory += RES_MB * 8  * _multisamples;
#endif
#else
#if packing
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#else
                _tex_peel[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
#endif
                _tex_peel[i].unbind();
            }
            // Create Peel FrameBuffer 
            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            for (int i = 0; i < _sizeMRT; i++)
                _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0 + i, ref _tex_peel[i], 0);
            _fbo_peel.checkStatus();
            FrameBuffer.unbind();

            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_color.image2D(0, sRGB.enabled ? PixelInternalFormat.Srgb8 : PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tex_color.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth_k, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _depth_bounds_clear = new Shader("peeling/kb_clipping/depth_bounds_clear", ShaderType.FragmentShader);
            _depth_bounds_clear.complile(ShaderType.FragmentShader);

            _depth_bounds_clearing = new Shading();
            _depth_bounds_clearing.create();
            _depth_bounds_clearing.attachShader(Texture.vertex.id);
            _depth_bounds_clearing.attachShader(_depth_bounds_clear.id);
            _depth_bounds_clearing.link();

            _depth_bounds_clearing.use();
            {
                _depth_bounds_clearing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _depth_bounds_compute = new Shader("peeling/kb_clipping/depth_bounds_compute", ShaderType.FragmentShader);
            _depth_bounds_compute.complile(ShaderType.FragmentShader);

            _depth_bounds_computing = new Shading();
            _depth_bounds_computing.create();
            _depth_bounds_computing.attachShader(Example._scene.renderVertex.id);
            _depth_bounds_computing.attachShader(Example._scene.renderGeometry.id);
            _depth_bounds_computing.attachShader(_depth_bounds_compute.id);
            _depth_bounds_computing.link();

            _depth_bounds_computing.use();
            {
                _depth_bounds_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _depth_bounds_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _depth_bounds_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_compute = new Shader("peeling/kb_clipping/histogram_compute", ShaderType.FragmentShader);
            _histogram_compute.complile(ShaderType.FragmentShader);

            _histogram_computing = new Shading();
            _histogram_computing.create();
            if (Example._scene.tessellation)
            {
                _histogram_computing.attachShader(Example._scene.renderVertexTess.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationControl.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _histogram_computing.attachShader(Example._scene.renderVertex.id);
            _histogram_computing.attachShader(Example._scene.renderGeometry.id);
            _histogram_computing.attachShader(_histogram_compute.id);
            _histogram_computing.link();

            _histogram_computing.use();
            {
                _histogram_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _histogram_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_resolve = new Shader("peeling/kb_clipping/histogram_resolve", ShaderType.FragmentShader);
            _histogram_resolve.complile(ShaderType.FragmentShader);

            _histogram_resolving = new Shading();
            _histogram_resolving.create();
            _histogram_resolving.attachShader(Texture.vertex.id);
            _histogram_resolving.attachShader(_histogram_resolve.id);
            _histogram_resolving.link();

            _histogram_resolving.use();
            {
                _histogram_resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _histogram_resolving.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_resolving.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();
            
            // peel
            _peeler = new Shader("peeling/kb_clipping/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();

            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            // render
            _resolve = new Shader("peeling/kb_clipping/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

#if multipass
            // depth
            _peeler_depth = new Shader("peeling/kb/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Texture.vertex.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
#endif
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            FPS.beginLocal();
            {
                _depth_bounds_clearing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.0 Clear Depth Bounds");

            FPS.beginLocal();
            {
                _depth_bounds_computing.use();
                {
                    //Example._scene.meshAnimation.drawAABBs(ref _depth_bounds_computing);
                    Example._scene.meshAnimation.drawConvexHulls(ref _depth_bounds_computing);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.1 Compute Depth Bounds");

            FPS.beginLocal();
            {
                _tex_histogram.bind();
                _tex_histogram.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_histogram.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("0.2 Clear Depth Histogram");

            //0.3 Compute Depth Histogram
            FPS.beginLocal();
            {
                _histogram_computing.use();
                {
                    if (Example._scene.instancing)
                    {
                        _histogram_computing.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _histogram_computing.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _histogram_computing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _histogram_computing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _histogram_computing, false, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.3 Compute Depth Histogram");

            //0.4 Resolve Depth 
            Depth.enableTest();
            Depth.setMask(true);
            Depth.clear();

            FPS.beginLocal();
            {
                _histogram_resolving.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("0.4 Resolve k-th Depth");

            Depth.setMask(false);
            Depth.disableTest();
        }
        protected override void peel_color()
        {
            // 1. Peeling
            FPS.beginLocal();
            {
                _fbo_peel.bind();
                Buffer.draw(_sizeMRT, 0);
#if !packing
                Buffer.setMask(true, true, false, false);
#else
                Buffer.setMask(true, true, true, true);
#endif
                Buffer.clear(0.0f, 1.0f, 0.0f, 1.0f);

                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }

                    Texture.active(TextureUnit.Texture0); _tex_peel[0].bind();
                    Texture.active(TextureUnit.Texture1); _tex_peel[1].bind();
                    for (int i = 4; i < _sizeMRT + 2; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i); _tex_peel[i - 2].bind();
                    }
                    Texture.active(TextureUnit.Texture10); _tex_depth_k.bind();

                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
#if !packing
                Buffer.setMask(true, true, true, true);
#endif

            }
            FPS.endLocal("1. Peeling");

            //2. Resolve
            FPS.beginLocal();
            {
                sRGB.enable();

                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
#if packing
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % (_sizeMRT * 2));
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeMRT);
#endif
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    for (int i = 0; i < _sizeMRT; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i);
                        _tex_peel[i].bind();
                    }
                    Texture.image.draw();
                }
                Shading.close();

                sRGB.disable();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_min_max.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_histogram.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 1;

            init_depth();
            peel_color();
            draw_final();
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                sRGB.enable();
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
                sRGB.disable();

                Example._scene.multiFragmentRendering.total_passes = 1;
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty functions
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void clearBuffers()
        {
            ;
        }
        #endregion
    }

    public class KB_SR_Clipping : Peeling
    {
        #region Private Properties

        Shader _depth_bounds_compute, _histogram_compute, _histogram_resolve, _depth_bounds_clear, _peeler, _resolve;
        Shading _depth_bounds_computing, _histogram_computing, _histogram_resolving, _depth_bounds_clearing, _peeling, _resolving;

        Texture _tex_stencil, _tex_peel, _tex_color, _tex_depth_k, _tex_histogram, _tex_min_max;
        FrameBuffer _fbo_peel, _fbo_color;

        #endregion

        #region Constructors
        public KB_SR_Clipping()
            : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _depth_bounds_clear.delete();
            _depth_bounds_compute.delete();
            _histogram_compute.delete();
            _histogram_resolve.delete();
            _peeler.delete();
            _resolve.delete();

            _depth_bounds_clearing.delete();
            _depth_bounds_computing.delete();
            _histogram_computing.delete();
            _histogram_resolving.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_peel.delete();
            _tex_stencil.delete();

            _tex_depth_k.delete();
            _tex_histogram.delete();
            _tex_min_max.delete();

            _fbo_peel.delete();
            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create k-th Depth Texture 
            _tex_depth_k = new Texture(TextureTarget.TextureRectangle);
            _tex_depth_k.bind();
            _tex_depth_k.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth_k.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth_k.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_k.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_k.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            _tex_depth_k.unbind();
            _memory += RES_MB * 4;

            // Create Histogram-Peel-Color Texture 
            _tex_histogram = new Texture(TextureTarget.Texture2DArray);
            _tex_histogram.bind();
            _tex_histogram.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_histogram.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_histogram.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_histogram.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_histogram.image3D(0, PixelInternalFormat.R32ui, _sizeBucketCL, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tex_histogram.unbind();
            _memory += RES_MB * 4 * _sizeBucketCL;

            // Create Counter-Semaphore-MinMaxDepth Texture Array
            _tex_min_max = new Texture(TextureTarget.Texture2DArray);
            _tex_min_max.bind();
            _tex_min_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_min_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_min_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_min_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_min_max.image3D(0, PixelInternalFormat.R32ui, 2, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tex_min_max.unbind();
            _memory += RES_MB * 4 * 2;

            // Create Stencil Texture
            _tex_stencil = new Texture(TextureTarget.Texture2DMultisample);
            _tex_stencil.bind();
            _tex_stencil.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_stencil.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_stencil.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_stencil.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_stencil.image2DMS(_sizeStencil, (PixelInternalFormat) 0x8D48, false);
            //_tex_stencil.image2DMS(_sizeStencil, PixelInternalFormat.Depth32fStencil8, false);
            _tex_stencil.unbind();
            _memory += RES_MB * _sizeStencil / 4;

            // Create Peel Texture
            _tex_peel = new Texture(TextureTarget.Texture2DMultisample);
            _tex_peel.bind();
            _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_peel.image2DMS(_sizeStencil, PixelInternalFormat.Rg32f, false);
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeStencil;

            // Create Peel FrameBuffer 
            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            _fbo_peel.attachTexture2D(FramebufferAttachment.StencilAttachment, ref _tex_stencil, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_peel, 0);
            _fbo_peel.checkStatus();
            FrameBuffer.unbind();

            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_color.image2D(0, sRGB.enabled ? PixelInternalFormat.Srgb8 : PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tex_color.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth_k, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _depth_bounds_clear = new Shader("peeling/kb_sr_clipping/depth_bounds_clear", ShaderType.FragmentShader);
            _depth_bounds_clear.complile(ShaderType.FragmentShader);

            _depth_bounds_clearing = new Shading();
            _depth_bounds_clearing.create();
            _depth_bounds_clearing.attachShader(Texture.vertex.id);
            _depth_bounds_clearing.attachShader(_depth_bounds_clear.id);
            _depth_bounds_clearing.link();

            _depth_bounds_clearing.use();
            {
                _depth_bounds_clearing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _depth_bounds_compute = new Shader("peeling/kb_sr_clipping/depth_bounds_compute", ShaderType.FragmentShader);
            _depth_bounds_compute.complile(ShaderType.FragmentShader);

            _depth_bounds_computing = new Shading();
            _depth_bounds_computing.create();
            _depth_bounds_computing.attachShader(Example._scene.renderVertex.id);
            _depth_bounds_computing.attachShader(Example._scene.renderGeometry.id);
            _depth_bounds_computing.attachShader(_depth_bounds_compute.id);
            _depth_bounds_computing.link();

            _depth_bounds_computing.use();
            {
                _depth_bounds_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _depth_bounds_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _depth_bounds_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_compute = new Shader("peeling/kb_sr_clipping/histogram_compute", ShaderType.FragmentShader);
            _histogram_compute.complile(ShaderType.FragmentShader);

            _histogram_computing = new Shading();
            _histogram_computing.create();
            if (Example._scene.tessellation)
            {
                _histogram_computing.attachShader(Example._scene.renderVertexTess.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationControl.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _histogram_computing.attachShader(Example._scene.renderVertex.id);
            _histogram_computing.attachShader(Example._scene.renderGeometry.id);
            _histogram_computing.attachShader(_histogram_compute.id);
            _histogram_computing.link();

            _histogram_computing.use();
            {
                _histogram_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _histogram_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_resolve = new Shader("peeling/kb_sr_clipping/histogram_resolve", ShaderType.FragmentShader);
            _histogram_resolve.complile(ShaderType.FragmentShader);

            _histogram_resolving = new Shading();
            _histogram_resolving.create();
            _histogram_resolving.attachShader(Texture.vertex.id);
            _histogram_resolving.attachShader(_histogram_resolve.id);
            _histogram_resolving.link();

            _histogram_resolving.use();
            {
                _histogram_resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _histogram_resolving.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_resolving.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            // peel
            _peeler = new Shader("peeling/kb_sr_clipping/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            // render
            _resolve = new Shader("peeling/kb_sr_clipping/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            FPS.beginLocal();
            {
                _depth_bounds_clearing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.0 Clear Depth Bounds");

            FPS.beginLocal();
            {
                _depth_bounds_computing.use();
                {
                    //Example._scene.meshAnimation.drawAABBs(ref _depth_bounds_computing);
                    Example._scene.meshAnimation.drawConvexHulls(ref _depth_bounds_computing);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.1 Compute Depth Bounds");

            FPS.beginLocal();
            {
                _tex_histogram.bind();
                _tex_histogram.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_histogram.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("0.2 Clear Depth Histogram");

            //0.3 Compute Depth Histogram
            FPS.beginLocal();
            {
                _histogram_computing.use();
                {
                    if (Example._scene.instancing)
                    {
                        _histogram_computing.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _histogram_computing.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _histogram_computing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _histogram_computing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }

                    Example._scene.meshAnimation.drawModels(ref _histogram_computing, false, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.3 Compute Depth Histogram");

            //0.4 Resolve Depth 
            Depth.enableTest();
            Depth.setMask(true);
            Depth.clear();

            FPS.beginLocal();
            {
                _histogram_resolving.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("0.4 Resolve k-th Depth");

            Depth.setMask(false);
            Depth.disableTest();
        }
        protected override void peel_color()
        {
            //1. Init
            FPS.beginLocal();
            {
                _fbo_peel.bind();

                Sampling.enableMulti();
                Sampling.enableMask();
                Sampling.setMask(0, 0);
                Stencil.clear(2);

                Stencil.enable();
                Stencil.operation(StencilOp.Replace, StencilOp.Replace, StencilOp.Replace);

                for (int i = 1; i < _sizeStencil; ++i)
                {
                    Sampling.setMask(0, 1 << i);
                    Stencil.func(StencilFunction.Always, 2 + i, 0xFFFFFFFF);
                    Texture.rendering.use();
                    {
                        Texture.image.draw();
                    }
                    Shading.close();
                }
            }
            FPS.endLocal("1. Init (Stencil)");

            //2. Peel
            FPS.beginLocal();
            {
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, true, false, false);
                Buffer.clear(0.0f, 1.0f, 0.0f, 0.0f);

                Sampling.disableMulti();
                Sampling.disableMask();

                Stencil.operation(StencilOp.DecrWrap, StencilOp.DecrWrap, StencilOp.DecrWrap);
                Stencil.func(StencilFunction.Equal, 2, 0xFFFFFFFF);

                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Texture.active(TextureUnit.Texture0); _tex_depth_k.bind();

                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                Buffer.setMask(0, true, true, true, true);

                Stencil.disable();
                Depth.setMask(true);
            }
            FPS.endLocal("2. Peeling (Color)");

            //2. Resolve
            FPS.beginLocal();
            {
                sRGB.enable();

                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeStencil);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.active(TextureUnit.Texture0); _tex_peel.bind();
                    Texture.image.draw();
                }
                Shading.close();

                sRGB.disable();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_min_max.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_histogram.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            init_depth();
            peel_color();
            draw_final();
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                sRGB.enable();
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
                sRGB.disable();
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty functions
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void clearBuffers()
        {
            ;
        }
        #endregion
    }

    public class KB_Array_Max_Clipping : Peeling
    {
        #region Private Properties

        Shader      _depth_bounds_compute, _histogram_compute, _histogram_resolve, _depth_bounds_clear, _peel, _resolve;
        Shading     _depth_bounds_computing, _histogram_computing, _histogram_resolving, _depth_bounds_clearing, _peeling, _resolving;

        FrameBuffer _fbo_color;
        Texture     _tex_depth_k, _tex_histogram, _tex_count_sem_min_max, _tex_peel, _tex_color;

        #endregion

        #region Constructor
        public KB_Array_Max_Clipping()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _depth_bounds_clear.delete();
            _depth_bounds_compute.delete();
            _histogram_compute.delete();
            _histogram_resolve.delete();

            _peeling.delete();
            _resolving.delete();
            _depth_bounds_clearing.delete();
            _depth_bounds_computing.delete();
            _histogram_computing.delete();
            _histogram_resolving.delete();

            _tex_depth_k.delete();
            _tex_histogram.delete();
            _tex_peel.delete();
            _tex_count_sem_min_max.delete();
            _tex_color.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create k-th Depth Texture 
            _tex_depth_k = new Texture(TextureTarget.TextureRectangle);
            _tex_depth_k.bind();
            _tex_depth_k.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth_k.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth_k.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_k.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_k.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            _tex_depth_k.unbind();
            _memory += RES_MB * 4;

            // Create Histogram-Peel-Color Texture 
            _tex_histogram = new Texture(TextureTarget.Texture2DArray);
            _tex_histogram.bind();
            _tex_histogram.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_histogram.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_histogram.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_histogram.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_histogram.image3D(0, PixelInternalFormat.R32ui, _sizeBucketCL, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tex_histogram.unbind();
            //_memory += RES_MB * 4 * _sizeBucketCL;

            // Create Peel Depth Texture 
            _tex_peel = new Texture(TextureTarget.Texture2DArray);
            _tex_peel.bind();
            _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_peel.image3D(0, PixelInternalFormat.Rg32f, _sizeHeap, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeHeap;
           
            // Create Counter-Semaphore-MinMaxDepth Texture Array
            _tex_count_sem_min_max = new Texture(TextureTarget.Texture2DArray);
            _tex_count_sem_min_max.bind();
            _tex_count_sem_min_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_count_sem_min_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_count_sem_min_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_count_sem_min_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_count_sem_min_max.image3D(0, PixelInternalFormat.R32ui, 4, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tex_count_sem_min_max.unbind();
            _memory += RES_MB * 4 * 4;

            // Create Color Texture 
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_color.image2D(0, sRGB.enabled ? PixelInternalFormat.Srgb8 : PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tex_color.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth_k, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _depth_bounds_clear = new Shader("peeling/kb_array_max_clipping/depth_bounds_clear", ShaderType.FragmentShader);
            _depth_bounds_clear.complile(ShaderType.FragmentShader);

            _depth_bounds_clearing = new Shading();
            _depth_bounds_clearing.create();
            _depth_bounds_clearing.attachShader(Texture.vertex.id);
            _depth_bounds_clearing.attachShader(_depth_bounds_clear.id);
            _depth_bounds_clearing.link();

            _depth_bounds_clearing.use();
            {
                _depth_bounds_clearing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _depth_bounds_compute = new Shader("peeling/kb_array_max_clipping/depth_bounds_compute", ShaderType.FragmentShader);
            _depth_bounds_compute.complile(ShaderType.FragmentShader);

            _depth_bounds_computing = new Shading();
            _depth_bounds_computing.create();
            _depth_bounds_computing.attachShader(Example._scene.renderVertex.id);
            _depth_bounds_computing.attachShader(Example._scene.renderGeometry.id);
            _depth_bounds_computing.attachShader(_depth_bounds_compute.id);
            _depth_bounds_computing.link();

            _depth_bounds_computing.use();
            {
                _depth_bounds_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _depth_bounds_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _depth_bounds_computing.bindUniform1("zFar" , Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_compute = new Shader("peeling/kb_array_max_clipping/histogram_compute", ShaderType.FragmentShader);
            _histogram_compute.complile(ShaderType.FragmentShader);

            _histogram_computing = new Shading();
            _histogram_computing.create();
            if (Example._scene.tessellation)
            {
                _histogram_computing.attachShader(Example._scene.renderVertexTess.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationControl.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _histogram_computing.attachShader(Example._scene.renderVertex.id);
            _histogram_computing.attachShader(Example._scene.renderGeometry.id);
            _histogram_computing.attachShader(_histogram_compute.id);
            _histogram_computing.link();

            _histogram_computing.use();
            {
                _histogram_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _histogram_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_resolve = new Shader("peeling/kb_array_max_clipping/histogram_resolve", ShaderType.FragmentShader);
            _histogram_resolve.complile(ShaderType.FragmentShader);

            _histogram_resolving = new Shading();
            _histogram_resolving.create();
            _histogram_resolving.attachShader(Texture.vertex.id);
            _histogram_resolving.attachShader(_histogram_resolve.id);
            _histogram_resolving.link();

            _histogram_resolving.use();
            {
                _histogram_resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _histogram_resolving.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_resolving.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_array_max_clipping/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_array_max_clipping/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);
            
            FPS.beginLocal();
            {               
                _depth_bounds_clearing.use();
                {
                      Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            //FPS.endLocal("0.0 Clear Depth Bounds");

            //FPS.beginLocal();
            {
                _depth_bounds_computing.use();
                {
                    //Example._scene.meshAnimation.drawAABBs(ref _depth_bounds_computing);
                    Example._scene.meshAnimation.drawConvexHulls(ref _depth_bounds_computing);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
           // FPS.endLocal("0.1 Compute Depth Bounds");

           // FPS.beginLocal();
            {
                _tex_histogram.bind();
                _tex_histogram.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_histogram.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
           // FPS.endLocal("0.2 Clear Depth Histogram");

            //0.3 Compute Depth Histogram
           // FPS.beginLocal();
            {
                _histogram_computing.use();
                {
                    if (Example._scene.instancing)
                    {
                        _histogram_computing.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _histogram_computing.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _histogram_computing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _histogram_computing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }

                    Example._scene.meshAnimation.drawModels(ref _histogram_computing, false, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
           // FPS.endLocal("0.3 Compute Depth Histogram");

            //0.4 Resolve Depth 
            Depth.enableTest();
            Depth.setMask(true);
            Depth.clear();

           // FPS.beginLocal();
            {
                _histogram_resolving.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("0.4 Resolve k-th Depth");

            Depth.setMask(false);
        }
        protected override void peel_color()
        {
            //Example._scene.multiFragmentRendering.beginSamplesQuery();
            
            //Depth.func(DepthFunction.Gequal);

            //2. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit | MemoryBarrierFlags.AtomicCounterBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //Example._scene.multiFragmentRendering.endSamplesQuery();

            //uint _total_fragments = Example._scene.multiFragmentRendering.samplesQuery.samples;

            //Depth.func(DepthFunction.Lequal);

            //3. Resolve
            FPS.beginLocal();
            {
                sRGB.enable();

                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();

                sRGB.disable();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_count_sem_min_max.index , 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_histogram.index   , 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel.index        , 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            init_depth();
            peel_color();
            draw_final();
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                sRGB.enable();
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
                sRGB.disable();
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class KB_Array_Ins_Clipping : Peeling
    {
        #region Private Properties

        Shader _depth_bounds_compute, _histogram_compute, _histogram_resolve, _depth_bounds_clear, _peel, _resolve;
        Shading _depth_bounds_computing, _histogram_computing, _histogram_resolving, _depth_bounds_clearing, _peeling, _resolving;

        FrameBuffer _fbo_color;
        Texture _tex_depth_k, _tex_histogram, _tex_min_max_sem, _tex_peel, _tex_color;

        #endregion

        #region Constructor
        public KB_Array_Ins_Clipping()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _depth_bounds_clear.delete();
            _depth_bounds_compute.delete();
            _histogram_compute.delete();
            _histogram_resolve.delete();
            _peel.delete();
            _resolve.delete();

            _depth_bounds_clearing.delete();
            _depth_bounds_computing.delete();
            _histogram_computing.delete();
            _histogram_resolving.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_depth_k.delete();
            _tex_histogram.delete();
            _tex_peel.delete();
            _tex_min_max_sem.delete();
            _tex_color.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create k-th Depth Texture 
            _tex_depth_k = new Texture(TextureTarget.TextureRectangle);
            _tex_depth_k.bind();
            _tex_depth_k.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth_k.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth_k.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_k.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_k.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            _tex_depth_k.unbind();
            _memory += RES_MB * 4;

            // Create Histogram-Peel-Color Texture 
            _tex_histogram = new Texture(TextureTarget.Texture2DArray);
            _tex_histogram.bind();
            _tex_histogram.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_histogram.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_histogram.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_histogram.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_histogram.image3D(0, PixelInternalFormat.R32ui, _sizeBucketCL, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tex_histogram.unbind();
            //_memory += RES_MB * 4 * _sizeBucketCL;

            // Create Peel Depth Texture 
            _tex_peel = new Texture(TextureTarget.Texture2DArray);
            _tex_peel.bind();
            _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_peel.image3D(0, PixelInternalFormat.Rg32f, _sizeHeap, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeHeap;

            // Create Min Max Depth Texture Array
            _tex_min_max_sem = new Texture(TextureTarget.Texture2DArray);
            _tex_min_max_sem.bind();
            _tex_min_max_sem.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_min_max_sem.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_min_max_sem.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_min_max_sem.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_min_max_sem.image3D(0, PixelInternalFormat.R32ui, 3, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tex_min_max_sem.unbind();
            _memory += RES_MB * 4 * 3;

            // Create Color Texture 
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_color.image2D(0, sRGB.enabled ? PixelInternalFormat.Srgb8 : PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tex_color.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth_k, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _depth_bounds_clear = new Shader("peeling/kb_array_ins_clipping/depth_bounds_clear", ShaderType.FragmentShader);
            _depth_bounds_clear.complile(ShaderType.FragmentShader);

            _depth_bounds_clearing = new Shading();
            _depth_bounds_clearing.create();
            _depth_bounds_clearing.attachShader(Texture.vertex.id);
            _depth_bounds_clearing.attachShader(_depth_bounds_clear.id);
            _depth_bounds_clearing.link();

            _depth_bounds_clearing.use();
            {
                _depth_bounds_clearing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _depth_bounds_compute = new Shader("peeling/kb_array_ins_clipping/depth_bounds_compute", ShaderType.FragmentShader);
            _depth_bounds_compute.complile(ShaderType.FragmentShader);

            _depth_bounds_computing = new Shading();
            _depth_bounds_computing.create();
            _depth_bounds_computing.attachShader(Example._scene.renderVertex.id);
            _depth_bounds_computing.attachShader(Example._scene.renderGeometry.id);
            _depth_bounds_computing.attachShader(_depth_bounds_compute.id);
            _depth_bounds_computing.link();

            _depth_bounds_computing.use();
            {
                _depth_bounds_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _depth_bounds_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _depth_bounds_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_compute = new Shader("peeling/kb_array_ins_clipping/histogram_compute", ShaderType.FragmentShader);
            _histogram_compute.complile(ShaderType.FragmentShader);

            _histogram_computing = new Shading();
            _histogram_computing.create();
            if (Example._scene.tessellation)
            {
                _histogram_computing.attachShader(Example._scene.renderVertexTess.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationControl.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _histogram_computing.attachShader(Example._scene.renderVertex.id);
            _histogram_computing.attachShader(Example._scene.renderGeometry.id);
            _histogram_computing.attachShader(_histogram_compute.id);
            _histogram_computing.link();

            _histogram_computing.use();
            {
                _histogram_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _histogram_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_resolve = new Shader("peeling/kb_array_ins_clipping/histogram_resolve", ShaderType.FragmentShader);
            _histogram_resolve.complile(ShaderType.FragmentShader);

            _histogram_resolving = new Shading();
            _histogram_resolving.create();
            _histogram_resolving.attachShader(Texture.vertex.id);
            _histogram_resolving.attachShader(_histogram_resolve.id);
            _histogram_resolving.link();

            _histogram_resolving.use();
            {
                _histogram_resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _histogram_resolving.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_resolving.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_array_ins_clipping/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_array_ins_clipping/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            FPS.beginLocal();
            {
                _depth_bounds_clearing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.0 Clear Depth Bounds");

            FPS.beginLocal();
            {
                _depth_bounds_computing.use();
                {
                    //Example._scene.meshAnimation.drawAABBs(ref _depth_bounds_computing);
                    Example._scene.meshAnimation.drawConvexHulls(ref _depth_bounds_computing);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.1 Compute Depth Bounds");

            FPS.beginLocal();
            {
                _tex_histogram.bind();
                _tex_histogram.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_histogram.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("0.2 Clear Depth Histogram");

            //0.3 Compute Depth Histogram
            FPS.beginLocal();
            {
                _histogram_computing.use();
                {
                    if (Example._scene.instancing)
                    {
                        _histogram_computing.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _histogram_computing.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _histogram_computing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _histogram_computing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _histogram_computing, false, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.3 Compute Depth Histogram");

            //0.4 Resolve Depth 
            Depth.enableTest();
            Depth.setMask(true);
            Depth.clear();

            FPS.beginLocal();
            {
                _histogram_resolving.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("0.4 Resolve k-th Depth");

            Depth.setMask(false);
        }
        protected override void peel_color()
        {
            //2. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit | MemoryBarrierFlags.AtomicCounterBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //3. Resolve 
            FPS.beginLocal();
            {
                sRGB.enable();

                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeArray);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();

                sRGB.disable();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_min_max_sem.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_histogram.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;
            
            init_depth();
            peel_color();
            draw_final();
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                sRGB.enable();
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
                sRGB.disable();
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        #endregion
    }

    public class KB_MDT_32_Clipping : Peeling
    {
        #region Private Properties

        Shader  _depth_bounds_compute, _histogram_compute, _histogram_resolve, _depth_bounds_clear, _peel_depth, _peel_color, _resolve;
        Shading _depth_bounds_computing, _histogram_computing, _histogram_resolving, _depth_bounds_clearing, _peeling_depth, _peeling_color, _resolving;

        FrameBuffer _fbo_color;
        Texture _tex_peel_color, _tex_peel_depth, _tex_min_max, _tex_histogram, _tex_depth_k, _tex_color;

        #endregion

        #region Constructor
        public KB_MDT_32_Clipping()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel_depth.delete();
            _peel_color.delete();
            _resolve.delete();
            _depth_bounds_clear.delete();
            _depth_bounds_compute.delete();
            _histogram_compute.delete();
            _histogram_resolve.delete();

            _peeling_depth.delete();
            _peeling_color.delete();
            _resolving.delete();
            _depth_bounds_clearing.delete();
            _depth_bounds_computing.delete();
            _histogram_computing.delete();
            _histogram_resolving.delete();

            _tex_peel_color.delete();
            _tex_peel_depth.delete();
            _fbo_color.delete();
            _tex_color.delete();
            _tex_depth_k.delete();
            _tex_min_max.delete();
            _tex_histogram.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create k-th Depth Texture 
            _tex_depth_k = new Texture(TextureTarget.TextureRectangle);
            _tex_depth_k.bind();
            {
                _tex_depth_k.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth_k.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth_k.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth_k.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_depth_k.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            }
            _tex_depth_k.unbind();
            _memory += RES_MB * 4;

            // Create Counter-Semaphore-MinMaxDepth Texture Array
            _tex_min_max = new Texture(TextureTarget.Texture2DArray);
            {
                _tex_min_max.bind();
                _tex_min_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.image3D(0, PixelInternalFormat.R32ui, 2, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_min_max.unbind();
            _memory += RES_MB * 4 * 2;

            // Create Histogram-Peel-Color Texture 
            _tex_histogram = new Texture(TextureTarget.Texture2DArray);
            _tex_histogram.bind();
            {
                _tex_histogram.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_histogram.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_histogram.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram.image3D(0, PixelInternalFormat.R32ui, _sizeBucketCL, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_histogram.unbind();
            //_memory += RES_MB * 4 * _sizeBucketCL;

            // Create Peel Texture 
            _tex_peel_depth = new Texture(TextureTarget.Texture2DArray);
            _tex_peel_depth.bind();
            {
                _tex_peel_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_depth.image3D(0, PixelInternalFormat.R32ui, _sizeHeap, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_peel_depth.unbind();
            _memory += RES_MB * 4 * _sizeHeap;

            // Create Peel Texture 
            _tex_peel_color = new Texture(TextureTarget.Texture2DArray);
            _tex_peel_color.bind();
            {
                _tex_peel_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_color.image3D(0, PixelInternalFormat.R32ui, _sizeHeap, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_peel_color.unbind();
            _memory += RES_MB * 4 * _sizeHeap;

            // Create Color Texture 
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, sRGB.enabled ? PixelInternalFormat.Srgb8 : PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth_k, 0);
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _depth_bounds_clear = new Shader("peeling/kb_mdt_32_clipping/depth_bounds_clear", ShaderType.FragmentShader);
            _depth_bounds_clear.complile(ShaderType.FragmentShader);

            _depth_bounds_clearing = new Shading();
            _depth_bounds_clearing.create();
            _depth_bounds_clearing.attachShader(Texture.vertex.id);
            _depth_bounds_clearing.attachShader(_depth_bounds_clear.id);
            _depth_bounds_clearing.link();

            _depth_bounds_clearing.use();
            {
                _depth_bounds_clearing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _depth_bounds_compute = new Shader("peeling/kb_mdt_32_clipping/depth_bounds_compute", ShaderType.FragmentShader);
            _depth_bounds_compute.complile(ShaderType.FragmentShader);

            _depth_bounds_computing = new Shading();
            _depth_bounds_computing.create();
            _depth_bounds_computing.attachShader(Example._scene.renderVertex.id);
            _depth_bounds_computing.attachShader(Example._scene.renderGeometry.id);
            _depth_bounds_computing.attachShader(_depth_bounds_compute.id);
            _depth_bounds_computing.link();

            _depth_bounds_computing.use();
            {
                _depth_bounds_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _depth_bounds_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _depth_bounds_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_compute = new Shader("peeling/kb_mdt_32_clipping/histogram_compute", ShaderType.FragmentShader);
            _histogram_compute.complile(ShaderType.FragmentShader);

            _histogram_computing = new Shading();
            _histogram_computing.create();
            if (Example._scene.tessellation)
            {
                _histogram_computing.attachShader(Example._scene.renderVertexTess.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationControl.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _histogram_computing.attachShader(Example._scene.renderVertex.id);
            _histogram_computing.attachShader(Example._scene.renderGeometry.id);
            _histogram_computing.attachShader(_histogram_compute.id);
            _histogram_computing.link();

            _histogram_computing.use();
            {
                _histogram_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _histogram_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_resolve = new Shader("peeling/kb_mdt_32_clipping/histogram_resolve", ShaderType.FragmentShader);
            _histogram_resolve.complile(ShaderType.FragmentShader);

            _histogram_resolving = new Shading();
            _histogram_resolving.create();
            _histogram_resolving.attachShader(Texture.vertex.id);
            _histogram_resolving.attachShader(_histogram_resolve.id);
            _histogram_resolving.link();

            _histogram_resolving.use();
            {
                _histogram_resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _histogram_resolving.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_resolving.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _peel_depth = new Shader("peeling/kb_mdt_32_clipping/peel_depth", ShaderType.FragmentShader);
            _peel_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            if (Example._scene.tessellation)
            {
                _peeling_depth.attachShader(Example._scene.renderVertexTess.id);
                _peeling_depth.attachShader(Example._scene.renderTessellationControl.id);
                _peeling_depth.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling_depth.attachShader(Example._scene.renderVertex.id);
            _peeling_depth.attachShader(Example._scene.renderGeometry.id);
            _peeling_depth.attachShader(_peel_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peel_color = new Shader("peeling/kb_mdt_32_clipping/peel_color", ShaderType.FragmentShader);
            _peel_color.complile(ShaderType.FragmentShader);

            _peeling_color = new Shading();
            _peeling_color.create();
            if (Example._scene.tessellation)
            {
                _peeling_color.attachShader(Example._scene.renderVertexTess.id);
                _peeling_color.attachShader(Example._scene.renderTessellationControl.id);
                _peeling_color.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling_color.attachShader(Example._scene.renderVertex.id);
            _peeling_color.attachShader(Example._scene.renderGeometry.id);
            _peeling_color.attachShader(Example._scene.phongFragment.id);
            _peeling_color.attachShader(Example._scene.computePixelColor.id);
            _peeling_color.attachShader(_peel_color.id);
            _peeling_color.link();

            _peeling_color.use();
            {
                _peeling_color.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_color.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_mdt_32_clipping/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            FPS.beginLocal();
            {
                _depth_bounds_clearing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.0 Clear Depth Bounds");

            FPS.beginLocal();
            {
                _depth_bounds_computing.use();
                {
                    //Example._scene.meshAnimation.drawAABBs(ref _depth_bounds_computing);
                    Example._scene.meshAnimation.drawConvexHulls(ref _depth_bounds_computing);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.1 Compute Depth Bounds");

            FPS.beginLocal();
            {
                _tex_histogram.bind();
                _tex_histogram.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_histogram.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("0.2 Clear Depth Histogram");

            //0.3 Compute Depth Histogram
            FPS.beginLocal();
            {
                _histogram_computing.use();
                {
                    if (Example._scene.instancing)
                    {
                        _histogram_computing.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _histogram_computing.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _histogram_computing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _histogram_computing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }

                    Example._scene.meshAnimation.drawModels(ref _histogram_computing, false, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.3 Compute Depth Histogram");

            //0.4 Resolve Depth 
            Depth.enableTest();
            Depth.setMask(true);
            Depth.clear();

            FPS.beginLocal();
            {
                _histogram_resolving.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("0.4 Resolve k-th Depth");

            Depth.setMask(false);
        }
        protected override void peel_color()
        {
            //2. Render the model into the zK-Buffer
            FPS.beginLocal();
            {
                _peeling_depth.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling_depth.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling_depth.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling_depth.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling_depth.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling_depth, false, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling Depth");

            //3. Render the model into the cK-Buffer
            FPS.beginLocal();
            {
                _peeling_color.use();
                {
                    if (Example._scene.tessellation)
                    {
                        _peeling_color.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling_color.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    if (Example._scene.instancing)
                    {
                        _peeling_color.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling_color.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling_color, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("2. Peeling Color");

            //4. Resolve 
            FPS.beginLocal();
            {
                sRGB.enable();

                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();

                sRGB.disable();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_min_max.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_histogram.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel_depth.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(5, _tex_peel_color.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.updateShaders(ref _peeling_color);
            Example._scene.multiFragmentRendering.total_passes = 3;

            init_depth();
            peel_color();
            draw_final();
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                sRGB.enable();
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
                sRGB.disable();
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty Functions
        protected override void blending_depth()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void clearBuffers()
        {
            ;
        }
        #endregion
    }

    public class KB_MDT_64_Clipping : Peeling
    {
        #region Private Properties

        Shader _depth_bounds_compute, _histogram_compute, _histogram_resolve, _depth_bounds_clear, _peel, _resolve;
        Shading _depth_bounds_computing, _histogram_computing, _histogram_resolving, _depth_bounds_clearing, _peeling, _resolving;

        int         _node_KBsize, _total_fragments;
        Buffer      _nodes_KB = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        FrameBuffer _fbo_color;
        Texture     _tex_min_max, _tex_histogram, _tex_depth_k, _tex_color;

        #endregion

        #region Constructor
        public KB_MDT_64_Clipping()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _depth_bounds_clear.delete();
            _depth_bounds_compute.delete();
            _histogram_compute.delete();
            _histogram_resolve.delete();

            _peeling.delete();
            _resolving.delete();
            _depth_bounds_clearing.delete();
            _depth_bounds_computing.delete();
            _histogram_computing.delete();
            _histogram_resolving.delete();

            _fbo_color.delete();
            _tex_color.delete();
            _tex_depth_k.delete();
            _tex_min_max.delete();
            _tex_histogram.delete();

            _nodes_KB.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create k-th Depth Texture 
            _tex_depth_k = new Texture(TextureTarget.TextureRectangle);
            _tex_depth_k.bind();
            {
                _tex_depth_k.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth_k.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth_k.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth_k.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_depth_k.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            }
            _tex_depth_k.unbind();
            _memory += RES_MB * 4;

            // Create Counter-Semaphore-MinMaxDepth Texture Array
            _tex_min_max = new Texture(TextureTarget.Texture2DArray);
            {
                _tex_min_max.bind();
                _tex_min_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.image3D(0, PixelInternalFormat.R32ui, 2, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_min_max.unbind();
            _memory += RES_MB * 4 * 2;

            // Create Histogram-Peel-Color Texture 
            _tex_histogram = new Texture(TextureTarget.Texture2DArray);
            _tex_histogram.bind();
            {
                _tex_histogram.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_histogram.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_histogram.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram.image3D(0, PixelInternalFormat.R32ui, _sizeBucketCL, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_histogram.unbind();
            //_memory += RES_MB * 4 * _sizeBucketCL;

            // Create Peel Texture 
            _node_KBsize = sizeof(UInt64);
            _total_fragments = Example._scene.width * Example._scene.height * _sizeHeap;

            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 4, _nodes_KB.index);
            _nodes_KB.data(new IntPtr(_total_fragments * _node_KBsize));

            _memory += MB * _node_KBsize * _total_fragments;

            // Create Color Texture 
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, sRGB.enabled ? PixelInternalFormat.Srgb8 : PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth_k, 0);
                _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _depth_bounds_clear = new Shader("peeling/kb_mdt_64_clipping/depth_bounds_clear", ShaderType.FragmentShader);
            _depth_bounds_clear.complile(ShaderType.FragmentShader);

            _depth_bounds_clearing = new Shading();
            _depth_bounds_clearing.create();
            _depth_bounds_clearing.attachShader(Texture.vertex.id);
            _depth_bounds_clearing.attachShader(_depth_bounds_clear.id);
            _depth_bounds_clearing.link();

            _depth_bounds_clearing.use();
            {
                _depth_bounds_clearing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _depth_bounds_clearing.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _depth_bounds_compute = new Shader("peeling/kb_mdt_64_clipping/depth_bounds_compute", ShaderType.FragmentShader);
            _depth_bounds_compute.complile(ShaderType.FragmentShader);

            _depth_bounds_computing = new Shading();
            _depth_bounds_computing.create();
            _depth_bounds_computing.attachShader(Example._scene.renderVertex.id);
            _depth_bounds_computing.attachShader(Example._scene.renderGeometry.id);
            _depth_bounds_computing.attachShader(_depth_bounds_compute.id);
            _depth_bounds_computing.link();

            _depth_bounds_computing.use();
            {
                _depth_bounds_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _depth_bounds_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _depth_bounds_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_compute = new Shader("peeling/kb_mdt_64_clipping/histogram_compute", ShaderType.FragmentShader);
            _histogram_compute.complile(ShaderType.FragmentShader);

            _histogram_computing = new Shading();
            _histogram_computing.create();
            if (Example._scene.tessellation)
            {
                _histogram_computing.attachShader(Example._scene.renderVertexTess.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationControl.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _histogram_computing.attachShader(Example._scene.renderVertex.id);
            _histogram_computing.attachShader(Example._scene.renderGeometry.id);
            _histogram_computing.attachShader(_histogram_compute.id);
            _histogram_computing.link();

            _histogram_computing.use();
            {
                _histogram_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _histogram_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_resolve = new Shader("peeling/kb_mdt_64_clipping/histogram_resolve", ShaderType.FragmentShader);
            _histogram_resolve.complile(ShaderType.FragmentShader);

            _histogram_resolving = new Shading();
            _histogram_resolving.create();
            _histogram_resolving.attachShader(Texture.vertex.id);
            _histogram_resolving.attachShader(_histogram_resolve.id);
            _histogram_resolving.link();

            _histogram_resolving.use();
            {
                _histogram_resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _histogram_resolving.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_resolving.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_mdt_64_clipping/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_mdt_64_clipping/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform1("width", Example._scene.width);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            FPS.beginLocal();
            {
                _depth_bounds_clearing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.0 Clear Depth Bounds");

            FPS.beginLocal();
            {
                _depth_bounds_computing.use();
                {
                    //Example._scene.meshAnimation.drawAABBs(ref _depth_bounds_computing);
                    Example._scene.meshAnimation.drawConvexHulls(ref _depth_bounds_computing);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.1 Compute Depth Bounds");

            FPS.beginLocal();
            {
                _tex_histogram.bind();
                _tex_histogram.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_histogram.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("0.2 Clear Depth Histogram");

            //0.3 Compute Depth Histogram
            FPS.beginLocal();
            {
                _histogram_computing.use();
                {
                    if (Example._scene.instancing)
                    {
                        _histogram_computing.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _histogram_computing.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _histogram_computing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _histogram_computing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }

                    Example._scene.meshAnimation.drawModels(ref _histogram_computing, false, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.3 Compute Depth Histogram");

            //0.4 Resolve Depth 
            Depth.enableTest();
            Depth.setMask(true);
            Depth.clear();

            FPS.beginLocal();
            {
                _histogram_resolving.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("0.4 Resolve k-th Depth");

            Depth.setMask(false);
        }
        protected override void peel_color()
        {
            //3. Render the model into the K-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("2. Peeling Color");

            //4. Resolve 
            FPS.beginLocal();
            {
                sRGB.enable();

                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();

                sRGB.disable();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_min_max.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_histogram.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            init_depth();
            peel_color();
            draw_final();
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                sRGB.enable();
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
                sRGB.disable();
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty Functions
        protected override void blending_depth()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void clearBuffers()
        {
            ;
        }
        #endregion
    }

    public class KB_AB_LL_Clipping : Peeling
    {
        #region Private Properties

        int _node_LLsize;
        uint _total_fragments;
        float _tmp_memory;

        Shader _depth_bounds_compute, _histogram_compute, _histogram_resolve, _depth_bounds_clear, _peel, _resolve;
        Shading _depth_bounds_computing, _histogram_computing, _histogram_resolving, _depth_bounds_clearing, _peeling, _resolving;

        Buffer _atomic_counter;
        Buffer _nodes_LL = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        Texture _tex_min_max, _tex_histogram, _tex_depth_k, _tex_color, _tex_next;

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public KB_AB_LL_Clipping()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _depth_bounds_clear.delete();
            _depth_bounds_compute.delete();
            _histogram_compute.delete();
            _histogram_resolve.delete();

            _peeling.delete();
            _resolving.delete();
            _depth_bounds_clearing.delete();
            _depth_bounds_computing.delete();
            _histogram_computing.delete();
            _histogram_resolving.delete();

            _tex_next.delete();
            _tex_color.delete();
            _tex_depth_k.delete();
            _tex_min_max.delete();
            _tex_histogram.delete();
            _nodes_LL.delete();

            _atomic_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create k-th Depth Texture 
            _tex_depth_k = new Texture(TextureTarget.TextureRectangle);
            _tex_depth_k.bind();
            {
                _tex_depth_k.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth_k.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth_k.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth_k.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_depth_k.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            }
            _tex_depth_k.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Counter-Semaphore-MinMaxDepth Texture Array
            _tex_min_max = new Texture(TextureTarget.Texture2DArray);
            {
                _tex_min_max.bind();
                _tex_min_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.image3D(0, PixelInternalFormat.R32ui, 2, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_min_max.unbind();
            _tmp_memory += RES_MB * 4 * 2;

            // Create Histogram-Peel-Color Texture 
            _tex_histogram = new Texture(TextureTarget.Texture2DArray);
            _tex_histogram.bind();
            {
                _tex_histogram.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_histogram.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_histogram.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram.image3D(0, PixelInternalFormat.R32ui, _sizeBucketCL, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_histogram.unbind();
            //_tmp_memory += RES_MB * 4 * _sizeBucketCL;

            _tmp_memory = 0f;
            _node_LLsize = sizeof(float) + 2 * sizeof(uint);
            _total_fragments = (uint)(Example._scene.width * Example._scene.height);

            // Create Page ID Texture 
            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Color Texture 
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, sRGB.enabled ? PixelInternalFormat.Srgb8 : PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth_k, 0);
                _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            _atomic_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _atomic_counter.bind();
            {
                _atomic_counter.storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
            }
            _atomic_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 4, _nodes_LL.index);
            _nodes_LL.data(new IntPtr(_total_fragments * _node_LLsize));

            _memory += MB * _node_LLsize * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _depth_bounds_clear = new Shader("peeling/kb_ab_ll_clipping/depth_bounds_clear", ShaderType.FragmentShader);
            _depth_bounds_clear.complile(ShaderType.FragmentShader);

            _depth_bounds_clearing = new Shading();
            _depth_bounds_clearing.create();
            _depth_bounds_clearing.attachShader(Texture.vertex.id);
            _depth_bounds_clearing.attachShader(_depth_bounds_clear.id);
            _depth_bounds_clearing.link();

            _depth_bounds_clearing.use();
            {
                _depth_bounds_clearing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _depth_bounds_compute = new Shader("peeling/kb_ab_ll_clipping/depth_bounds_compute", ShaderType.FragmentShader);
            _depth_bounds_compute.complile(ShaderType.FragmentShader);

            _depth_bounds_computing = new Shading();
            _depth_bounds_computing.create();
            _depth_bounds_computing.attachShader(Example._scene.renderVertex.id);
            _depth_bounds_computing.attachShader(Example._scene.renderGeometry.id);
            _depth_bounds_computing.attachShader(_depth_bounds_compute.id);
            _depth_bounds_computing.link();

            _depth_bounds_computing.use();
            {
                _depth_bounds_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _depth_bounds_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _depth_bounds_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_compute = new Shader("peeling/kb_ab_ll_clipping/histogram_compute", ShaderType.FragmentShader);
            _histogram_compute.complile(ShaderType.FragmentShader);

            _histogram_computing = new Shading();
            _histogram_computing.create();
            if (Example._scene.tessellation)
            {
                _histogram_computing.attachShader(Example._scene.renderVertexTess.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationControl.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _histogram_computing.attachShader(Example._scene.renderVertex.id);
            _histogram_computing.attachShader(Example._scene.renderGeometry.id);
            _histogram_computing.attachShader(_histogram_compute.id);
            _histogram_computing.link();

            _histogram_computing.use();
            {
                _histogram_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _histogram_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_resolve = new Shader("peeling/kb_ab_ll_clipping/histogram_resolve", ShaderType.FragmentShader);
            _histogram_resolve.complile(ShaderType.FragmentShader);

            _histogram_resolving = new Shading();
            _histogram_resolving.create();
            _histogram_resolving.attachShader(Texture.vertex.id);
            _histogram_resolving.attachShader(_histogram_resolve.id);
            _histogram_resolving.link();

            _histogram_resolving.use();
            {
                _histogram_resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _histogram_resolving.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_resolving.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_ab_ll_clipping/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_ab_ll_clipping/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            FPS.beginLocal();
            {
                _depth_bounds_clearing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.0 Clear Depth Bounds");

            FPS.beginLocal();
            {
                _depth_bounds_computing.use();
                {
                    //Example._scene.meshAnimation.drawAABBs(ref _depth_bounds_computing);
                    Example._scene.meshAnimation.drawConvexHulls(ref _depth_bounds_computing);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.1 Compute Depth Bounds");

            FPS.beginLocal();
            {
                _tex_histogram.bind();
                _tex_histogram.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_histogram.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                //0.1 Init Global Shared Counter
                _atomic_counter.bind();
                _atomic_counter.clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                _atomic_counter.unbind();
                GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);
            }
            FPS.endLocal("0.2 Clear Depth Histogram");

            //0.3 Compute Depth Histogram
            bool S = false, First = true;
            while (true)
            {
                FPS.beginLocal();
                {
                     if (First)
                        Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _histogram_computing.use();
                        {
                            if (Example._scene.instancing)
                            {
                                _histogram_computing.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _histogram_computing.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            if (Example._scene.tessellation)
                            {
                                _histogram_computing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _histogram_computing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }

                            Example._scene.meshAnimation.drawModels(ref _histogram_computing, false, false);
                        }
                        Shading.close();

                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                    }
                    if (First)
                        S = Example._scene.multiFragmentRendering.endSamplesQuery();
                    //2. Resize shared pool dynamically
                    if (S || !First)
                        break;
                    else
                    {
                        First = false;
                        _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples;
                        initSharedPool();
                        FPS.resetLocal();
                    }
                    Example._scene.multiFragmentRendering.total_passes++;
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ".3 Compute Depth Histogram");
            }

            //0.4 Resolve Depth 
            Depth.enableTest();
            Depth.setMask(true);
            Depth.clear();

            FPS.beginLocal();
            {
                _histogram_resolving.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("0.4 Resolve k-th Depth");

            Depth.setMask(false);
        }
        protected override void peel_color()
        {
            //0. Clear A-Buffer
            FPS.beginLocal();
            {
                //0.1 Init Global Shared Counter
                _atomic_counter.bind();
                _atomic_counter.clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                _atomic_counter.unbind();
                GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);

                //0.2 Clear Next
                _tex_next.bind();
                _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_next.unbind();
                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("1. Clear Buffer");

            //1. Render the model into the A-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit | MemoryBarrierFlags.ShaderStorageBarrierBit);
            }
            FPS.endLocal("2. Peeling");

            //4. Resolve
            FPS.beginLocal();
            {
                sRGB.enable();

                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();

                sRGB.disable();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Drawing Functions
        public    override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_min_max.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_histogram.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(5, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 6, _atomic_counter.index);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            init_depth();
            peel_color();
            draw_final();
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                sRGB.enable();
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
                sRGB.disable();
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }

        #endregion
    }

    public class KB_LL_Clipping : Peeling
    {
        #region Private Properties

        uint _K;
        uint _total_fragments;
        uint _init_fragments = (uint)(4 * Example._scene.width * Example._scene.height);

        float _tmp_memory;

        Shader _depth_bounds_compute, _histogram_compute, _histogram_resolve, _depth_bounds_clear, _peel, _resolve, _init;
        Shading _depth_bounds_computing, _histogram_computing, _histogram_resolving, _depth_bounds_clearing, _peeling, _resolving, _initing;

        Buffer _atomic_counter;

        Buffer _buf_peel = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);
        Buffer _buf_pointers = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);

        Texture _tex_peel = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_pointers = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_min_max, _tex_histogram, _tex_depth_k, _tex_color;

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public KB_LL_Clipping()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _init.delete();
            _depth_bounds_clear.delete();
            _depth_bounds_compute.delete();
            _histogram_compute.delete();
            _histogram_resolve.delete();

            _peeling.delete();
            _resolving.delete();
            _initing.delete();
            _depth_bounds_clearing.delete();
            _depth_bounds_computing.delete();
            _histogram_computing.delete();
            _histogram_resolving.delete();

            _tex_peel.delete();
            _tex_pointers.delete();
            _tex_color.delete();
            _tex_depth_k.delete();
            _tex_min_max.delete();
            _tex_histogram.delete();

            _buf_peel.delete();
            _buf_pointers.delete();

            _atomic_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _K = _init_fragments + 1U;

            _tmp_memory = 0f;
            _total_fragments = (uint)(Example._scene.width * Example._scene.height) + _init_fragments;

            // Create k-th Depth Texture 
            _tex_depth_k = new Texture(TextureTarget.TextureRectangle);
            _tex_depth_k.bind();
            {
                _tex_depth_k.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth_k.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth_k.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth_k.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_depth_k.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            }
            _tex_depth_k.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Counter-Semaphore-MinMaxDepth Texture Array
            _tex_min_max = new Texture(TextureTarget.Texture2DArray);
            {
                _tex_min_max.bind();
                _tex_min_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.image3D(0, PixelInternalFormat.R32ui, 2, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_min_max.unbind();
            _tmp_memory += RES_MB * 4 * 2;

            // Create Histogram-Peel-Color Texture 
            _tex_histogram = new Texture(TextureTarget.Texture2DArray);
            _tex_histogram.bind();
            {
                _tex_histogram.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_histogram.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_histogram.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram.image3D(0, PixelInternalFormat.R32ui, _sizeBucketCL, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_histogram.unbind();
            //_tmp_memory += RES_MB * 4 * _sizeBucketCL;

            // Create Color Texture 
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, sRGB.enabled ? PixelInternalFormat.Srgb8 : PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth_k, 0);
                _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            // Create Atomic Counter FrameBuffer 
            _atomic_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _atomic_counter.bind();
            {
                _atomic_counter.storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
            }
            _atomic_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Page List Buffer
            _buf_peel.bind();
            _buf_peel.data(new IntPtr(sizeof(float) * 2 * _total_fragments));
            {
                _tex_peel.bind();
                {
                    Texture.buffer(SizedInternalFormat.Rg32f, _buf_peel.index);
                }
                _tex_peel.unbind();
            }
            _buf_peel.unbind();
            _memory += MB * 8 * _total_fragments;

            // Create Shared Linked List Buffer
            _buf_pointers.bind();
            _buf_pointers.data(new IntPtr(sizeof(uint) * _total_fragments));
            {
                _tex_pointers.bind();
                {
                    Texture.buffer(SizedInternalFormat.R32ui, _buf_pointers.index);
                }
                _tex_pointers.unbind();
            }
            _buf_pointers.unbind();
            _memory += MB * 4 * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _depth_bounds_clear = new Shader("peeling/kb_ll_clipping/depth_bounds_clear", ShaderType.FragmentShader);
            _depth_bounds_clear.complile(ShaderType.FragmentShader);

            _depth_bounds_clearing = new Shading();
            _depth_bounds_clearing.create();
            _depth_bounds_clearing.attachShader(Texture.vertex.id);
            _depth_bounds_clearing.attachShader(_depth_bounds_clear.id);
            _depth_bounds_clearing.link();

            _depth_bounds_clearing.use();
            {
                _depth_bounds_clearing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _depth_bounds_compute = new Shader("peeling/kb_ll_clipping/depth_bounds_compute", ShaderType.FragmentShader);
            _depth_bounds_compute.complile(ShaderType.FragmentShader);

            _depth_bounds_computing = new Shading();
            _depth_bounds_computing.create();
            _depth_bounds_computing.attachShader(Example._scene.renderVertex.id);
            _depth_bounds_computing.attachShader(Example._scene.renderGeometry.id);
            _depth_bounds_computing.attachShader(_depth_bounds_compute.id);
            _depth_bounds_computing.link();

            _depth_bounds_computing.use();
            {
                _depth_bounds_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _depth_bounds_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _depth_bounds_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_compute = new Shader("peeling/kb_ll_clipping/histogram_compute", ShaderType.FragmentShader);
            _histogram_compute.complile(ShaderType.FragmentShader);

            _histogram_computing = new Shading();
            _histogram_computing.create();
            if (Example._scene.tessellation)
            {
                _histogram_computing.attachShader(Example._scene.renderVertexTess.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationControl.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _histogram_computing.attachShader(Example._scene.renderVertex.id);
            _histogram_computing.attachShader(Example._scene.renderGeometry.id);
            _histogram_computing.attachShader(_histogram_compute.id);
            _histogram_computing.link();

            _histogram_computing.use();
            {
                _histogram_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _histogram_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_resolve = new Shader("peeling/kb_ll_clipping/histogram_resolve", ShaderType.FragmentShader);
            _histogram_resolve.complile(ShaderType.FragmentShader);

            _histogram_resolving = new Shading();
            _histogram_resolving.create();
            _histogram_resolving.attachShader(Texture.vertex.id);
            _histogram_resolving.attachShader(_histogram_resolve.id);
            _histogram_resolving.link();

            _histogram_resolving.use();
            {
                _histogram_resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _histogram_resolving.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_resolving.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _init = new Shader("peeling/kb_ll_clipping/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Texture.vertex.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _initing.bindUniform1("width_2", 2 * Example._scene.width);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_ll_clipping/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
                _peeling.bindUniform1("width_2", Example._scene.width * 2);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_ll_clipping/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform1("width_2", 2 * Example._scene.width);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            FPS.beginLocal();
            {
                _depth_bounds_clearing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.0 Clear Depth Bounds");

            FPS.beginLocal();
            {
                _depth_bounds_computing.use();
                {
                    //Example._scene.meshAnimation.drawAABBs(ref _depth_bounds_computing);
                    Example._scene.meshAnimation.drawConvexHulls(ref _depth_bounds_computing);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0.1 Compute Depth Bounds");

            FPS.beginLocal();
            {
                _tex_histogram.bind();
                _tex_histogram.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_histogram.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                //0.1 Init Global Shared Counter
                _atomic_counter.bind();
                _atomic_counter.clearsubdata<uint>(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, ref _K);
                _atomic_counter.unbind();
                GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);
            }
            FPS.endLocal("0.2 Clear Depth Histogram");

            //0.3 Compute Depth Histogram
            bool S = false, First = true;
            while (true)
            {
                FPS.beginLocal();
                {
                    if (First)
                        Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _histogram_computing.use();
                        {
                            if (Example._scene.instancing)
                            {
                                _histogram_computing.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _histogram_computing.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            if (Example._scene.tessellation)
                            {
                                _histogram_computing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _histogram_computing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }

                            Example._scene.meshAnimation.drawModels(ref _histogram_computing, false, false);
                        }
                        Shading.close();

                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                    }
                    if (First)
                        S = Example._scene.multiFragmentRendering.endSamplesQuery();
                    //2. Resize shared pool dynamically
                    if (S || !First)
                        break;
                    else
                    {
                        First = false;
                        _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples;
                        initSharedPool();
                        FPS.resetLocal();
                    }
                    Example._scene.multiFragmentRendering.total_passes++;
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ".3 Compute Depth Histogram");
            }

            //0.4 Resolve Depth 
            Depth.enableTest();
            Depth.setMask(true);
            Depth.clear();

            FPS.beginLocal();
            {
                _histogram_resolving.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("0.4 Resolve k-th Depth");

            Depth.setMask(false);
        }
        protected override void peel_color()
        {
            //0. Clear A-Buffer
            FPS.beginLocal();
            {
                _atomic_counter.bind();
                _atomic_counter.clearsubdata<uint>(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, ref _K);
                _atomic_counter.unbind();
                GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);

                _initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Clear Buffer");

            //1. Render the model into the A-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("2. Peeling");

            //4. Resolve
            FPS.beginLocal();
            {
                sRGB.enable();

                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();

                sRGB.disable();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_min_max.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_histogram.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);
            GL.BindImageTexture(5, _tex_pointers.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 6, _atomic_counter.index);

            Example._scene.multiFragmentRendering.total_passes = 2;
            Example._scene.updateShaders(ref _peeling);

            init_depth();
            peel_color();
            draw_final();
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                sRGB.enable();
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
                sRGB.disable();
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        #endregion
    }

    public class KB_SB_Clipping : Peeling
    {
        #region Private Properties

        uint _N = (uint)Example._scene.width * (uint)Example._scene.height;
        uint _total_fragments;
        float _tmp_memory;

        Shader _depth_bounds_compute, _histogram_compute, _histogram_resolve, _depth_bounds_clear, _compute_hash_next, _compute_mapping, _peel, _resolve, _init_depth_counter;
        Shading _depth_bounds_computing, _histogram_computing, _histogram_resolving, _depth_bounds_clearing, _computing_hash_next, _computing_mapping, _peeling, _resolving, _initing_depth_counter;

        Texture _tex_count_next_sem, _tex_min_max, _tex_histogram, _tex_depth_k, _tex_color;
        Texture _tex_peel = new Texture(TextureTarget.TextureBuffer);
        Buffer _buf_peel = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);

        const int _num_counters = 32;
        UInt64[] _next_address = new UInt64[_num_counters];
        Buffer[] _shared_counters = new Buffer[_num_counters];

        UInt64[] _final_address = new UInt64[_num_counters];
        Buffer[] _shared_counters_final = new Buffer[_num_counters];

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public KB_SB_Clipping()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _initing_depth_counter.delete();
            _compute_hash_next.delete();
            _compute_mapping.delete();
            _depth_bounds_clear.delete();
            _depth_bounds_compute.delete();
            _histogram_compute.delete();
            _histogram_resolve.delete();

            _peeling.delete();
            _resolving.delete();
            _init_depth_counter.delete();
            _computing_hash_next.delete();
            _computing_mapping.delete();
            _depth_bounds_clearing.delete();
            _depth_bounds_computing.delete();
            _histogram_computing.delete();
            _histogram_resolving.delete();

            _tex_count_next_sem.delete();
            _tex_color.delete();
            _tex_depth_k.delete();
            _tex_min_max.delete();
            _tex_histogram.delete();
            _tex_peel.delete();
            _buf_peel.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments = (uint)(Example._scene.width * Example._scene.height);

            // Create k-th Depth Texture 
            _tex_depth_k = new Texture(TextureTarget.TextureRectangle);
            _tex_depth_k.bind();
            {
                _tex_depth_k.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth_k.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth_k.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth_k.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_depth_k.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            }
            _tex_depth_k.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Counter-Semaphore-MinMaxDepth Texture Array
            _tex_min_max = new Texture(TextureTarget.Texture2DArray);
            {
                _tex_min_max.bind();
                _tex_min_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.image3D(0, PixelInternalFormat.R32ui, 2, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_min_max.unbind();
            _tmp_memory += RES_MB * 4 * 2;

            // Create Histogram-Peel-Color Texture 
            _tex_histogram = new Texture(TextureTarget.Texture2DArray);
            _tex_histogram.bind();
            {
                _tex_histogram.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_histogram.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_histogram.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram.image3D(0, PixelInternalFormat.R32ui, _sizeBucketCL, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_histogram.unbind();
            //_tmp_memory += RES_MB * 4 * _sizeBucketCL;

            // Create Color Texture 
            _tex_color = new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            {
                _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_color.image2D(0, sRGB.enabled ? PixelInternalFormat.Srgb8 : PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            }
            _tex_color.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth_k, 0);
                _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            // Create Peel Texture 
            _tex_count_next_sem = new Texture(TextureTarget.Texture2DArray);
            _tex_count_next_sem.bind();
            {
                _tex_count_next_sem.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_count_next_sem.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_count_next_sem.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_count_next_sem.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_count_next_sem.image3D(0, PixelInternalFormat.R32ui, 3, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_count_next_sem.unbind();
            _tmp_memory += RES_MB * 4 * 3;

            // Create Shared Counters
            for (int i = 0; i < _num_counters; i++)
            {
                _shared_counters[i] = new Buffer(BufferTarget.UniformBuffer, BufferUsageHint.DynamicDraw);
                _shared_counters[i].bind();
                {
                    _shared_counters[i].storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
                    GL.NV.MakeBufferResident((NvShaderBufferLoad)BufferTarget.UniformBuffer, (NvShaderBufferLoad)TextureAccess.ReadWrite);
                    GL.NV.GetBufferParameter((NvShaderBufferLoad)BufferTarget.UniformBuffer, NvShaderBufferLoad.BufferGpuAddressNv, out _next_address[i]);
                }
                _shared_counters[i].unbind();
                _tmp_memory += MB * sizeof(uint);
            }

            for (int i = 0; i < _num_counters; i++)
            {
                _shared_counters_final[i] = new Buffer(BufferTarget.UniformBuffer, BufferUsageHint.DynamicDraw);
                _shared_counters_final[i].bind();
                {
                    _shared_counters_final[i].storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
                    GL.NV.MakeBufferResident((NvShaderBufferLoad)BufferTarget.UniformBuffer, (NvShaderBufferLoad)TextureAccess.ReadWrite);
                    GL.NV.GetBufferParameter((NvShaderBufferLoad)BufferTarget.UniformBuffer, NvShaderBufferLoad.BufferGpuAddressNv, out _final_address[i]);
                }
                _shared_counters_final[i].unbind();
                _tmp_memory += MB * sizeof(uint);
            }

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Depth Buffer
            _buf_peel.bind();
            {
                _buf_peel.data(new IntPtr(sizeof(float) * 2 * _total_fragments));
                _tex_peel.bind();
                {
                    Texture.buffer(SizedInternalFormat.Rg32f, _buf_peel.index);
                }
                _tex_peel.unbind();
            }
            _buf_peel.unbind();

            _memory += MB * 8 * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _depth_bounds_clear = new Shader("peeling/kb_sb_clipping/depth_bounds_clear", ShaderType.FragmentShader);
            _depth_bounds_clear.complile(ShaderType.FragmentShader);

            _depth_bounds_clearing = new Shading();
            _depth_bounds_clearing.create();
            _depth_bounds_clearing.attachShader(Texture.vertex.id);
            _depth_bounds_clearing.attachShader(_depth_bounds_clear.id);
            _depth_bounds_clearing.link();

            _depth_bounds_clearing.use();
            {
                _depth_bounds_clearing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _depth_bounds_compute = new Shader("peeling/kb_sb_clipping/depth_bounds_compute", ShaderType.FragmentShader);
            _depth_bounds_compute.complile(ShaderType.FragmentShader);

            _depth_bounds_computing = new Shading();
            _depth_bounds_computing.create();
            _depth_bounds_computing.attachShader(Example._scene.renderVertex.id);
            _depth_bounds_computing.attachShader(Example._scene.renderGeometry.id);
            _depth_bounds_computing.attachShader(_depth_bounds_compute.id);
            _depth_bounds_computing.link();

            _depth_bounds_computing.use();
            {
                _depth_bounds_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _depth_bounds_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _depth_bounds_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_compute = new Shader("peeling/kb_sb_clipping/histogram_compute", ShaderType.FragmentShader);
            _histogram_compute.complile(ShaderType.FragmentShader);

            _histogram_computing = new Shading();
            _histogram_computing.create();
            if (Example._scene.tessellation)
            {
                _histogram_computing.attachShader(Example._scene.renderVertexTess.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationControl.id);
                _histogram_computing.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _histogram_computing.attachShader(Example._scene.renderVertex.id);
            _histogram_computing.attachShader(Example._scene.renderGeometry.id);
            _histogram_computing.attachShader(_histogram_compute.id);
            _histogram_computing.link();

            _histogram_computing.use();
            {
                _histogram_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _histogram_computing.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_computing.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _histogram_resolve = new Shader("peeling/kb_sb_clipping/histogram_resolve", ShaderType.FragmentShader);
            _histogram_resolve.complile(ShaderType.FragmentShader);

            _histogram_resolving = new Shading();
            _histogram_resolving.create();
            _histogram_resolving.attachShader(Texture.vertex.id);
            _histogram_resolving.attachShader(_histogram_resolve.id);
            _histogram_resolving.link();

            _histogram_resolving.use();
            {
                _histogram_resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _histogram_resolving.bindUniform1("zNear", Example._scene.camera.zNear);
                _histogram_resolving.bindUniform1("zFar", Example._scene.camera.zFar);
            }
            Shading.close();

            _compute_hash_next = new Shader("peeling/kb_sb_clipping/compute_hash_next", ShaderType.FragmentShader);
            _compute_hash_next.complile(ShaderType.FragmentShader);

            _computing_hash_next = new Shading();
            _computing_hash_next.create();
            _computing_hash_next.attachShader(Texture.vertex.id);
            _computing_hash_next.attachShader(_compute_hash_next.id);
            _computing_hash_next.link();

            _computing_hash_next.use();
            {
                _computing_hash_next.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _computing_hash_next.bindUniform1_64("next_address", _num_counters, _next_address);
            }
            Shading.close();

            _compute_mapping = new Shader("peeling/kb_sb_clipping/compute_mapping", ShaderType.FragmentShader);
            _compute_mapping.complile(ShaderType.FragmentShader);

            _computing_mapping = new Shading();
            _computing_mapping.create();
            _computing_mapping.attachShader(Texture.vertex.id);
            _computing_mapping.attachShader(_compute_mapping.id);
            _computing_mapping.link();

            _computing_mapping.use();
            {
                _computing_mapping.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _computing_mapping.bindUniform1_64("next_address", _num_counters, _next_address);
                _computing_mapping.bindUniform1_64("final_address", _num_counters, _final_address);
            }
            Shading.close();

            _init_depth_counter = new Shader("peeling/kb_sb_clipping/init_depth_counter", ShaderType.FragmentShader);
            _init_depth_counter.complile(ShaderType.FragmentShader);

            _initing_depth_counter = new Shading();
            _initing_depth_counter.create();
            _initing_depth_counter.attachShader(Texture.vertex.id);
            _initing_depth_counter.attachShader(_init_depth_counter.id);
            _initing_depth_counter.link();

            _initing_depth_counter.use();
            {
                _initing_depth_counter.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _initing_depth_counter.bindUniform1_64("final_address", _num_counters, _final_address);
            }
            Shading.close();

            _peel = new Shader("peeling/kb_sb_clipping/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);

                _peeling.bindUniform1_64("final_address", _num_counters, _final_address);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/kb_sb_clipping/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform1_64("final_address", _num_counters, _final_address);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            FPS.beginLocal();
            {
                _depth_bounds_clearing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1.0 Clear Depth Bounds");

            FPS.beginLocal();
            {
                _depth_bounds_computing.use();
                {
                    //Example._scene.meshAnimation.drawAABBs(ref _depth_bounds_computing);
                    Example._scene.meshAnimation.drawConvexHulls(ref _depth_bounds_computing);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1.1 Compute Depth Bounds");

            FPS.beginLocal();
            {
                _tex_count_next_sem.bind();
                _tex_count_next_sem.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_count_next_sem.unbind();
                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                _tex_histogram.bind();
                _tex_histogram.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_histogram.unbind();
                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                for (int i = 0; i < _num_counters; i++)
                {
                    _shared_counters[i].bind();
                    _shared_counters[i].clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                    _shared_counters[i].unbind();
                }
            }
            FPS.endLocal("1.2 Clear Depth Histogram");

            //0.3 Compute Depth Histogram
            FPS.beginLocal();
            {
                Example._scene.multiFragmentRendering.beginSamplesQuery();
                {
                    _histogram_computing.use();
                    {
                        if (Example._scene.instancing)
                        {
                            _histogram_computing.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                            _histogram_computing.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                        }
                        if (Example._scene.tessellation)
                        {
                            _histogram_computing.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _histogram_computing.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }

                        Example._scene.meshAnimation.drawModels(ref _histogram_computing, false, false);
                    }
                    Shading.close();

                    GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                }
                if (!Example._scene.multiFragmentRendering.endSamplesQuery())
                {
                    _total_fragments = Example._scene.multiFragmentRendering.samplesQuery.samples + 1U;
                    initSharedPool();
                }
            }
            FPS.endLocal("1.3 Compute Depth Histogram");

            //0.4 Resolve Depth 
            Depth.enableTest();
            Depth.setMask(true);
            Depth.clear();

            FPS.beginLocal();
            {
                _histogram_resolving.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("1.4 Resolve k-th Depth");

            Depth.setMask(false);
        }
        protected override void peel_color()
        {
            //2. Compute Hashing-Address
            FPS.beginLocal();
            {
                _computing_hash_next.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("2. Compute Hashing-Address");

            //3. Compute Mapping
            FPS.beginLocal();
            {
                _computing_mapping.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Compute Mapping");

            //4. Initing Depth + Counter
            FPS.beginLocal();
            {
                _initing_depth_counter.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("4. Initing Depth");

            //4. Render the model into the S-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("4. Peeling");

            //5. Resolve
            FPS.beginLocal();
            {
                sRGB.enable();

                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();

                sRGB.disable();
            }
            FPS.endLocal("5. Resolve");
        }
        #endregion 

        #region Drawing Functions
        public      override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_min_max.index               , 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_histogram.index             , 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_count_next_sem.index        , 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(5, _tex_peel.index                  , 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            init_depth();
            peel_color();
            draw_final();
        }
        protected   override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                sRGB.enable();
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
                sRGB.disable();
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        #endregion
    }

    #endregion 

#endif
    #endregion

    #region BUCKET Algorithms

#if BUCKET
    public class BUN : Peeling
    {
        #region Private Properties

        Shader      _init_depth_bounds, _peeler, _resolve;
        Shading     _initing_depth_bounds, _peeling, _resolving;

        Texture     _tex_depth_bounds;
        FrameBuffer _fbo_depth_bounds;

#if multipass
        Shader      _init;
        Shading     _initing;

        Texture[]   _tex_peel  = new Texture[4];
        Texture[]   _tex_depth = new Texture[8];
        FrameBuffer[] _fbo_peel = new FrameBuffer[2];
#else
        Texture[]   _tex_peel = new Texture[8];
        FrameBuffer _fbo_peel;
#endif
        Texture     _tex_color;
        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public BUN() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
#if multipass
            _init.delete();
            _initing.delete();

            for (int i = 0; i < _bufferSize/2; i++)
                _tex_peel[i].delete();
            for (int i = 0; i < _bufferSize; i++)
                _tex_depth[i].delete();
            _fbo_peel[0].delete();
            _fbo_peel[1].delete();
#else
            _fbo_peel.delete();
            for (int i = 0; i<_sizeMRT; i++)
                _tex_peel[i].delete();
#endif
            _tex_color.delete();
            _fbo_color.delete();

            _tex_depth_bounds.delete();
            _fbo_depth_bounds.delete();

            _init_depth_bounds.delete();
            _initing_depth_bounds.delete();

            _peeler.delete();
            _peeling.delete();

            _resolve.delete();
            _resolving.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Depth Texture
#if multisample
            _tex_depth_bounds = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_depth_bounds=new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_depth_bounds.bind();
            _tex_depth_bounds.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth_bounds.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth_bounds.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_bounds.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_depth_bounds.image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
            _memory += RES_MB * 8 * _multisamples;
#else
            _tex_depth_bounds.image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            _memory+=RES_MB*8;
#endif
            _tex_depth_bounds.unbind();

            // Create Depth FrameBuffer 
            _fbo_depth_bounds=new FrameBuffer();
            _fbo_depth_bounds.bind();
            _fbo_depth_bounds.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth_bounds, 0);
            _fbo_depth_bounds.checkStatus();

            int _bb;
#if multipass
            _bb = _sizeMRT / 2;            
#else
            _bb = _sizeMRT;
#endif
            for (int i = 0; i < _bb; i++)
            {
                // Create Peel Texture
#if multisample
                _tex_peel[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_peel[i]=new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_peel[i].bind();
                _tex_peel[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_peel[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false); 
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_peel[i].unbind();
            }
            // Create Peel FrameBuffer 
#if multipass
            for (int i = 0; i < _bufferSize; i++)
            {
                // Create Peel Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false); 
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_depth[i].unbind();
            }
            
            _fbo_peel[0] = new FrameBuffer();
            _fbo_peel[0].bind();
            for (int i = 0; i < 4; i++) _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment0 + i, ref _tex_depth[i], 0);
            for (int i = 0; i < 4; i++) _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment4 + i, ref _tex_peel[i], 0);
            _fbo_peel[0].checkStatus();

            _fbo_peel[1] = new FrameBuffer();
            _fbo_peel[1].bind();
            for (int i = 0; i < 4; i++) _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment0 + i, ref _tex_depth[4 + i], 0);
            for (int i = 0; i < 4; i++) _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment4 + i, ref _tex_peel[i], 0);
            _fbo_peel[1].checkStatus();
#else
            _fbo_peel=new FrameBuffer();
            _fbo_peel.bind();
            for (int i = 0; i < _sizeMRT; i++)
                _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0+i, ref _tex_peel[i], 0);
            _fbo_peel.checkStatus();
#endif

            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color=new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory+=RES_MB*4;
#endif
            _tex_color.unbind();

            // Create Color FrameBuffer 
            _fbo_color=new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init_depth_bounds = new Shader("peeling/bun/init_depth_bounds", ShaderType.FragmentShader);
            _init_depth_bounds.complile(ShaderType.FragmentShader);

            _initing_depth_bounds=new Shading();
            _initing_depth_bounds.create();
            _initing_depth_bounds.attachShader(Example._scene.renderVertex.id);
            _initing_depth_bounds.attachShader(Example._scene.renderGeometry.id);
            _initing_depth_bounds.attachShader(_init_depth_bounds.id);
            _initing_depth_bounds.link();

            _initing_depth_bounds.use();
            {
                _initing_depth_bounds.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

#if multipass
            _init = new Shader("peeling/bun/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing= new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();
#endif
            // peel
            _peeler=new Shader("peeling/bun/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling=new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            // resolve
            _resolve=new Shader("peeling/bun/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving=new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            Depth.disableTest();
            Depth.setMask(false);

            //0. Init Depth Bounds
            FPS.beginLocal();
            {
                _fbo_depth_bounds.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, true, false, false);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                Blend.equation(0, BlendEquationMode.Max);
                Blend.enable(0);

                _initing_depth_bounds.use();
                {
                    Example._scene.meshAnimation.drawAABBs(ref _initing_depth_bounds);
                }
                Shading.close();

                Blend.disable(0);
                Buffer.setMask(0, true, true, true, true);
            }
            FPS.endLocal("0. Init Depth Bounds");

#if multipass
            //1. Init Bucket Depths
            FPS.beginLocal();
            {
                _fbo_peel[1].bind();
                Buffer.draw(4, 0);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, -(float)Depth.depth, -(float)Depth.depth);

                Blend.equation(BlendEquationMode.Max);
                Blend.enable();

                _initing.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_depth_bounds.bind();
                    Example._scene.meshAnimation.drawModels(ref _initing, false, false);
                }
                Shading.close();

                Blend.disable();
            }
            FPS.endLocal("1. Init Bucket Depths");
#endif
        }
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
#if multipass
                _fbo_peel[_currID].bind();
                Buffer.draw(4, 0);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, -(float)Depth.depth, -(float)Depth.depth);
                Buffer.draw(4, 4);
                Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);
                Buffer.draw(8, 0);
#else
                _fbo_peel.bind();
                Buffer.draw(_sizeMRT, 0);
                Buffer.clear(0.0f, -(float)Depth.depth, 0.0f, 0.0f);
#endif
                Blend.equation(BlendEquationMode.Max);
                Blend.enable();

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling.use();
                    {
                        if (Example._scene.instancing)
                        {
                            _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                            _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                        }
                        if (Example._scene.tessellation)
                        {
                            _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }

#if multipass
                        int p = 4 * _prevID;
                        Texture.active(TextureUnit.Texture0); _tex_depth[p    ].bind();
                        Texture.active(TextureUnit.Texture1); _tex_depth[p + 1].bind();
                        Texture.active(TextureUnit.Texture4); _tex_depth[p + 2].bind();
                        Texture.active(TextureUnit.Texture5); _tex_depth[p + 3].bind();
#endif
                        Texture.active(TextureUnit.Texture10); _tex_depth_bounds.bind();
                        Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Blend.disable();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling");

            return S;
        }
        protected override void peel_color()
        {
            FPS.beginLocal();
            {
                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.clear(0, 0, 0, 0);

                _resolving.use();
                {
#if multipass
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeMRT);
#else
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % (_sizeMRT * 4));
#endif
                    _resolving.bindUniform1("useFront", Example._scene.multiFragmentRendering.useFront ? 0 : 1);
                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
#if multipass
                    for(int i = 0; i < 4; i++)
#else
                    for (int i = 0; i < 8; i++)
#endif
                    {
                        Texture.active(TextureUnit.Texture0 + i);
                        _tex_peel[i].bind();
                    }
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");
        }
        #endregion

        #region Drawing functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();

            // *. Peeling Samples - Begin
            Example._scene.multiFragmentRendering.beginComputePeelingSamples();

            // 0. Rendering
            init_depth();
            int passes = 0;
            Example._scene.multiFragmentRendering.passes = 0;
            Example._scene.updateShaders(ref _peeling);
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();
#if multipass
                    passes += _sizeMRT;
#else
                    passes += _sizeMRT * 4;
#endif
                    Example._scene.multiFragmentRendering.passes++;

                    // *. Peeling Samples - End
#if multipass
                    for (int i = 0; i < 4; i++)
#else
                    for (int i = 0; i < 8; i++)
#endif
                        Example._scene.multiFragmentRendering.endComputePeelingSamples(ref _tex_peel[i]);

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent) _weightSum.compute(_tex_color);
#if !multipass
                    break;
#endif
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.enableTest();
                Depth.setMask(true);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling() { ;}
        #endregion
    }
  
    public class BUN_3P : Peeling
    {
        #region Private Properties

        Shader _init_depth_bounds, _peeler, _peeler_color, _blend, _resolve;
        Shading _initing_depth_bounds, _peeling, _peeling_color, _blending, _resolving;

        Texture     _tex_depth_bounds;
        FrameBuffer _fbo_depth_bounds;

        Texture     _tex_color;
        FrameBuffer _fbo_color;

        Texture[]     _tex_peel_color = new Texture[8];
        FrameBuffer   _fbo_peel_color;

        Texture[]     _tex_peel = new Texture[16];
        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        #endregion

        #region Constructor
        public BUN_3P() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            for(int i = 0; i<16; i++)
                _tex_peel[i].delete();
            for (int i = 0; i < 8; i++)
                _tex_peel_color[i].delete();
            _fbo_peel_color.delete();
         
            _fbo_peel[0].delete();
            _fbo_peel[1].delete();

            _tex_color.delete();
            _fbo_color.delete();
            _tex_depth_bounds.delete();
            _fbo_depth_bounds.delete();

            _init_depth_bounds.delete();
            _initing_depth_bounds.delete();

            _peeler.delete();
            _peeling.delete();

            _peeler_color.delete();
            _peeling_color.delete();

            _blend.delete();
            _blending.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Depth Texture
#if multisample
            _tex_depth_bounds = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_depth_bounds=new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_depth_bounds.bind();
            _tex_depth_bounds.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth_bounds.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth_bounds.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_bounds.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_depth_bounds.image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
            _memory += RES_MB * 8 * _multisamples;
#else
            _tex_depth_bounds.image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            _memory+=RES_MB*8;
#endif
            _tex_depth_bounds.unbind();

            // Create FrameBuffer 
            _fbo_depth_bounds=new FrameBuffer();
            _fbo_depth_bounds.bind();
            _fbo_depth_bounds.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth_bounds, 0);
            _fbo_depth_bounds.checkStatus();

            for (int i = 0; i < _sizeMRT * 2; i++)
            {
                // Create Peel Texture
#if multisample
                _tex_peel[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_peel[i]=new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_peel[i].bind();
                _tex_peel[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_peel[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory+=RES_MB*16;
#endif
                _tex_peel[i].unbind();
            }
            // Create FrameBuffer 
            _fbo_peel[0]=new FrameBuffer();
            _fbo_peel[0].bind();
            for (int i = 0; i < _sizeMRT; i++)
                _fbo_peel[0].attachTexture2D(FramebufferAttachment.ColorAttachment0+i, ref _tex_peel[i], 0);
            _fbo_peel[0].checkStatus();

            _fbo_peel[1]=new FrameBuffer();
            _fbo_peel[1].bind();
            for (int i = 0; i < _sizeMRT; i++)
                _fbo_peel[1].attachTexture2D(FramebufferAttachment.ColorAttachment0+i, ref _tex_peel[i+8], 0);
            _fbo_peel[1].checkStatus();

            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color=new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory+=RES_MB*4;
#endif
            _tex_color.unbind();

            // Create FrameBuffer 
            _fbo_color=new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

            for (int i = 0; i < _sizeMRT; i++)
            {
                // Create Peel Texture
#if multisample
                _tex_peel_color[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_peel_color[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_peel_color[i].bind();
                _tex_peel_color[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel_color[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel_color[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel_color[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_peel_color[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_peel_color[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_peel_color[i].unbind();
            }
            _fbo_peel_color = new FrameBuffer();
            _fbo_peel_color.bind();
            for (int i = 0; i < _sizeMRT; i++)
                _fbo_peel_color.attachTexture2D(FramebufferAttachment.ColorAttachment0 + i, ref _tex_peel_color[i], 0);
            _fbo_peel_color.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_peel[1].bind();
            Buffer.draw(_sizeMRT, 0);
            Buffer.clear(0.0f, 0.0f, 0.0f, 0.0f);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init_depth_bounds = new Shader("peeling/bun_3p/init_depth_bounds", ShaderType.FragmentShader);
            _init_depth_bounds.complile(ShaderType.FragmentShader);

            _initing_depth_bounds=new Shading();
            _initing_depth_bounds.create();
            _initing_depth_bounds.attachShader(Example._scene.renderVertex.id);
            _initing_depth_bounds.attachShader(Example._scene.renderGeometry.id);
            _initing_depth_bounds.attachShader(_init_depth_bounds.id);
            _initing_depth_bounds.link();

            _initing_depth_bounds.use();
            {
                _initing_depth_bounds.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            // peel
            _peeler = new Shader("peeling/bun_3p/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling=new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("bufferSize", _sizeMRT);
            }
            Shading.close();

            // blend
            _blend = new Shader("peeling/bun_3p/blend", ShaderType.FragmentShader);
            _blend.complile(ShaderType.FragmentShader);

            _blending=new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blend.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending.bindUniform1("bufferSize", _sizeMRT);
            }
            Shading.close();

            // peeling color
            _peeler_color = new Shader("peeling/bun_3p/peel_color", ShaderType.FragmentShader);
            _peeler_color.complile(ShaderType.FragmentShader);

            _peeling_color=new Shading();
            _peeling_color.create();
            _peeling_color.attachShader(Example._scene.renderVertex.id);
            _peeling_color.attachShader(Example._scene.renderGeometry.id);
            _peeling_color.attachShader(Example._scene.phongFragment.id);
            _peeling_color.attachShader(Example._scene.computePixelColor.id);
            _peeling_color.attachShader(_peeler_color.id);
            _peeling_color.link();

            _peeling_color.use();
            {
                _peeling_color.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_color.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling_color.bindUniform1("bufferSize", _sizeMRT);
            }
            Shading.close();

            // resolve
            _resolve = new Shader("peeling/bun_3p/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform1("bufferSize", _sizeMRT);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void init_depth()
        {
            Depth.disableTest();
            Depth.setMask(false);

            //0. Init Depth Bounds
            FPS.beginLocal();
            {
                _fbo_depth_bounds.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, true, false, false);
                Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

                Blend.equation(0, BlendEquationMode.Max);
                Blend.enable(0);

                _initing_depth_bounds.use();
                {
                    Example._scene.meshAnimation.drawAABBs(ref _initing_depth_bounds);
                }
                Shading.close();

                Blend.disable(0);
                Buffer.setMask(0, true, true, true, true);
            }
            FPS.endLocal("0. Init Depth Bounds");
        }
        protected override bool peel_depth()
        {
            bool S;
            FPS.beginLocal();
            {
                _fbo_peel[0].bind();
                Buffer.draw(_sizeMRT, 0);
                Buffer.clear(-(float)Depth.depth, float.MinValue, 0.0f, 0.0f);

                Blend.enable();
                Blend.equation(BlendEquationMode.Max);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling.use();
                    {
                        for (int i = 0; i < _sizeMRT; i++)
                        {
                            Texture.active(TextureUnit.Texture0 + i);
                            _tex_peel[8 + i].bind();
                        }
                        Texture.active(TextureUnit.Texture8);
                        _tex_depth_bounds.bind();
                        Example._scene.meshAnimation.drawModels(ref _peeling, false, false);
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);

                Blend.disable();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Depth)");

            return S;
        }
        protected override void blending_depth()
        {
            FPS.beginLocal();
            {
                _fbo_peel[1].bind();
                Buffer.draw(_sizeMRT, 0);
                Buffer.clear(-(float)Depth.depth, float.MinValue, 0.0f, 0.0f);

                Blend.equationSeparate(BlendEquationMode.Max, BlendEquationMode.FuncAdd);
                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.enable();

                _blending.use();
                {
                    for (int i = 0; i < _sizeMRT; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i);
                        _tex_peel[i].bind();
                    }
                    Texture.active(TextureUnit.Texture8);
                    _tex_depth_bounds.bind();
                    Example._scene.meshAnimation.drawModels(ref _blending, false, false);
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Blending");
        }
        protected override void peel_color()
        {
            // 1. Peeling Color
            FPS.beginLocal();
            {
                _fbo_peel_color.bind();
                Buffer.draw(_sizeMRT, 0);
                Buffer.setMask(true, true, false, false);
                Buffer.clear(0, 0, 0, 0);

                Blend.equation(BlendEquationMode.Max);

                _peeling_color.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_peel[8].bind();
                    Texture.active(TextureUnit.Texture1); _tex_peel[9].bind();
                    for (int i = 4; i < _sizeMRT + 2; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i);
                        _tex_peel[6 + i].bind();
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling_color, true, false);
                }
                Shading.close();

                Buffer.setMask(true, true, true, true);

                Blend.disable();
                Depth.enableTest();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling (Color)");

            // 2. Resolve
            FPS.beginLocal();
            {
                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.clear(0, 0, 0, 0);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1) % _sizeMRT);
                    _resolving.bindUniform1("useMax", Example._scene.multiFragmentRendering.useMax ? 1 : 0);
                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    for (int i = 0; i < _sizeMRT; i++)
                    {
                        Texture.active(TextureUnit.Texture0 + i); _tex_peel_color[i].bind();
                    }
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            // 1. Transparency
            if (Example._scene.multiFragmentRendering.transparent)
                _weightSum.clearBuffers();

            // 0. Rendering
            clearBuffers();
            init_depth();
            int passes = 0;
            Example._scene.multiFragmentRendering.passes = 0;
            Example._scene.updateShaders(ref _peeling_color);
            while (passes < Example._scene.multiFragmentRendering.layers)
            {
                if (!peel_depth())
                {
                    Example._scene.multiFragmentRendering.beginConditionalRenderQuery();
                    {
                        blending_depth();
                        peel_color();
                    }
                    Example._scene.multiFragmentRendering.endConditionalRenderQuery();

                    passes += _sizeMRT;
                    Example._scene.multiFragmentRendering.passes++;

                    // 1. Transparency
                    if (Example._scene.multiFragmentRendering.transparent) _weightSum.compute(_tex_color);
                }
                else
                    break;
            }
#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 3*Example._scene.multiFragmentRendering.passes;
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.enableTest();
                Depth.setMask(true);

                // 1. Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                    _weightSum.draw(Example._scene.useBackgroundTexture);
                // 0. Rendering
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion
        
        #region Empty functions
        protected override void peel_culling() { ;}
        #endregion
    }

    /*
    public class BAD : Peeling
    {
        #region Private Properties

        int passes;
        const int _size = 8;

        Shader _init, _peeler, _resolve, _histogram_init, _histogram_resolve;
        Shading _initing, _peeling, _resolving, _histogram_initing, _histogram_resolving;

        Texture _tex_depth;
        FrameBuffer _fbo_depth;

        Texture[]   _tex_histogram_init = new Texture[8];
        FrameBuffer _fbo_histogram_init;

        Texture[]   _tex_histogram_resolve = new Texture[8];
        FrameBuffer _fbo_histogram_resolve;

        Texture[]   _tex_peel = new Texture[8];
        FrameBuffer _fbo_peel;

        Texture     _tex_color;
        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public BAD() : base()
        {
            _weightSum = Example._scene.weightSumF2B;
            initShaders();
            initBuffers();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for(int i = 0; i<_size; i++)
            {
                _tex_peel[i].delete();
                _tex_histogram_init[i].delete();
                _tex_histogram_resolve[i].delete();
            }

            _fbo_peel.delete();
            _tex_color.delete();
            _fbo_color.delete();
            _tex_depth.delete();
            _fbo_depth.delete();

            _fbo_histogram_init.delete();
            _fbo_histogram_resolve.delete();

            _init.delete();
            _initing.delete();

            _peeler.delete();
            _peeling.delete();

            _resolve.delete();
            _resolving.delete();

            _histogram_init.delete();
            _histogram_initing.delete();

            _histogram_resolve.delete();
            _histogram_resolving.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Depth Texture
            _tex_depth=new Texture(TextureTarget.TextureRectangle);
            _tex_depth.bind();
            _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_depth.image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            _memory+=((Example._scene.width*Example._scene.height*sizeof(float)*2)/1024.0f)/1024.0f;

            // Create FrameBuffer 
            _fbo_depth=new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth, 0);
            _fbo_depth.checkStatus();

            // Create Histogram Texture
            for(int i = 0; i<_size; i++)
            {
                _tex_histogram_init[i]=new Texture(TextureTarget.TextureRectangle);
                _tex_histogram_init[i].bind();
                _tex_histogram_init[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_histogram_init[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_histogram_init[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram_init[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram_init[i].image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory+=((Example._scene.width*Example._scene.height*sizeof(float)*4)/1024.0f)/1024.0f;
            }
            // Create FrameBuffer 
            _fbo_histogram_init=new FrameBuffer();
            _fbo_histogram_init.bind();
            for(int i = 0; i<_size; i++)
                _fbo_histogram_init.attachTexture2D(FramebufferAttachment.ColorAttachment0+i, ref _tex_histogram_init[i], 0);
            _fbo_histogram_init.checkStatus();

            for(int i = 0; i<_size; i++)
            {
                // Create Histogram Texture
                _tex_histogram_resolve[i]=new Texture(TextureTarget.TextureRectangle);
                _tex_histogram_resolve[i].bind();
                _tex_histogram_resolve[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_histogram_resolve[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_histogram_resolve[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram_resolve[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_histogram_resolve[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory+=((Example._scene.width*Example._scene.height*sizeof(float)*4)/1024.0f)/1024.0f;
            }
            // Create FrameBuffer 
            _fbo_histogram_resolve=new FrameBuffer();
            _fbo_histogram_resolve.bind();
            for(int i = 0; i<_size; i++)
                _fbo_histogram_resolve.attachTexture2D(FramebufferAttachment.ColorAttachment0+i, ref _tex_histogram_resolve[i], 0);
            _fbo_histogram_resolve.checkStatus();

            for(int i = 0; i<_size; i++)
            {
                // Create Peel Texture
                _tex_peel[i]=new Texture(TextureTarget.TextureRectangle);
                _tex_peel[i].bind();
                _tex_peel[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory+=((Example._scene.width*Example._scene.height*sizeof(float)*4)/1024.0f)/1024.0f;
            }
            // Create FrameBuffer 
            _fbo_peel=new FrameBuffer();
            _fbo_peel.bind();
            for(int j = 0; j<_size; j++)
                _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0+j, ref _tex_peel[j], 0);
            _fbo_peel.checkStatus();

            // Create Color Texture
            _tex_color=new Texture(TextureTarget.TextureRectangle);
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tex_color.unbind();
            _memory+=((Example._scene.width*Example._scene.height*sizeof(byte)*4)/1024)/1024.0f;

            // Create FrameBuffer 
            _fbo_color=new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init=new Shader("peeling/bad/init_depth_bounds", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing=new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _histogram_init=new Shader("peeling/bad/init_histogram", ShaderType.FragmentShader);
            _histogram_init.complile(ShaderType.FragmentShader);

            _histogram_initing=new Shading();
            _histogram_initing.create();
            _histogram_initing.attachShader(Example._scene.renderVertex.id);
            _histogram_initing.attachShader(Example._scene.renderGeometry.id);
            _histogram_initing.attachShader(_histogram_init.id);
            _histogram_initing.link();

            _histogram_initing.use();
            {
                _histogram_initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _histogram_initing.bindUniform1("tex_depth", 0);
            }
            Shading.close();

            _histogram_resolve=new Shader("peeling/bad/resolve_histogram", ShaderType.FragmentShader);
            _histogram_resolve.complile(ShaderType.FragmentShader);

            _histogram_resolving=new Shading();
            _histogram_resolving.create();
            _histogram_resolving.attachShader(Texture.vertex.id);
            _histogram_resolving.attachShader(_histogram_resolve.id);
            _histogram_resolving.link();

            _histogram_resolving.use();
            {
                _histogram_resolving.bindUniform1("size", _size);
                _histogram_resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                for(int i = 0; i<_size; i++)
                    _histogram_resolving.bindUniform1("tex_histogram_"+i.ToString(), i);
                _histogram_resolving.bindUniform1("tex_depth", 8);
            }
            Shading.close();

            // peel
            _peeler=new Shader("peeling/bad/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling=new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferTarget.UniformBuffer);

                _peeling.bindUniform1("size", _size);
                _peeling.bindUniform1("tex_histogram_0", 0);
                _peeling.bindUniform1("tex_histogram_1", 1);
                for(int i = 4; i<_size+2; i++)
                    _peeling.bindUniform1("tex_histogram_"+(i-2).ToString(), i);
            }
            Shading.close();

            // render
            _resolve=new Shader("peeling/bad/resolve_color", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving=new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniform1("size", _size);
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                for(int i = 0; i<_size; i++)
                    _resolving.bindUniform1("tex_peel_"+i.ToString(), i);
            }
            Shading.close();
        }
        #endregion
       
        #region Peeling Functions
        private void initDepth()
        {
            _fbo_depth.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.setMask(0, true, true, false, false);
            Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);

            Depth.disableTest();
            Depth.setMask(false);

            Blend.equation(BlendEquationMode.Max);
            Blend.enable();
            _initing.use();
            {
                foreach(MeshFileData model in Example._scene.models)
                    if(model.drawable)
                    {
                        updateShaders(ref _initing, model, false);
                        model.aabb.drawElements(); // AABB
                    }
            }
            Shading.close();
            Blend.disable();

            Buffer.setMask(0, true, true, true, true);
        }
        private void initHistogram()
        {
            _fbo_histogram_init.bind();
            Buffer.draw((int)_size, 0);
            Buffer.clear(0, 0, 0, 0);
           
            Logic.enable();
            Logic.operation(LogicOp.Or);
            _histogram_initing.use();
            {
                Texture.active(TextureUnit.Texture0);
                _tex_depth.bind();
                draw_models(ref _histogram_initing, false, false);
            }
            Shading.close();
            Logic.disable();
        }
        protected override bool peel_depth()
        {
            _fbo_histogram_resolve.bind();
            Buffer.draw(_size, 0);
            Buffer.clear(0, 0, 0, 0);

            _histogram_resolving.use();
            {
                for(int i = 0; i<_size; i++)
                {
                    Texture.active(TextureUnit.Texture0+i);
                    _tex_histogram_init[i].bind();
                }
                Texture.active(TextureUnit.Texture8);
                _tex_depth.bind();
                Texture.image.draw();
            }
            Shading.close();

            if(Example._scene.query.use)
                Example._scene.query.begin();

            _fbo_peel.bind();
            Buffer.draw(_size, 0);
            Buffer.clear(0, 0, 0, 0);

            Blend.equation(BlendEquationMode.Max);
            Blend.enable();
            _peeling.use();
            {
                Texture.active(TextureUnit.Texture0);
                _tex_histogram_resolve[0].bind();
                Texture.active(TextureUnit.Texture1);
                _tex_histogram_resolve[1].bind();
                for(int i = 4; i<_size+2; i++)
                {
                    Texture.active(TextureUnit.Texture0+i);
                    _tex_histogram_resolve[i-2].bind();
                }
                draw_models(ref _peeling, true, false);
            }
            Shading.close();
            Blend.disable();

            if(Example._scene.query.use)
            {
                Example._scene.query.end();
                Example._scene.query.getResult();
                return Example._scene.query.isResultZero();
            }
            return false;
        }
        protected override void peel_color()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);

            _resolving.use();
            {
                _resolving.bindUniform1("layer", (Example._scene.layers-1)%32);
                _resolving.bindUniform1("transparency", Example._scene.models[0].transparency); // ??
                _resolving.bindUniform1("correctAlpha", Example._scene.correctAlpha ? 1 : 0);
                for(int i = 0; i<_size; i++)
                {
                    Texture.active(TextureUnit.Texture0+i);
                    //_tex_peel[i].bind();
                    _tex_histogram_resolve[i].bind();
                }
                Texture.image.draw();
            }
            Shading.close();
        }
        #endregion 

        #region Drawing Functions
        public override void draw()
        {
//          if(model.translucent)
            if(Example._scene.transparent)
                _weightSum.clearBuffers();

            initDepth();
            initHistogram();

            updateShaders(ref _peeling);

            passes=0;
            Example._scene.passes=0;
            while(passes<Example._scene.layers)
            {
                _currId=Example._scene.passes%2;
                _prevId=1-_currId;

                if(!peel_depth())
                {
                    peel_color();

                    if(Example._scene.transparent)
                        _weightSum.compute(_tex_color);
                    if(Example._scene.translucent)
                    {
                        model.thickness.fbo_k_buffer.bind();
                        Buffer.draw(DrawBufferMode.ColorAttachment0);
                        Buffer.setMask(0, true, false, false, false);

                        Blend.equation(BlendEquationMode.FuncAdd);
                        Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                        Blend.enable();

                        for(int i = 0; i<_size; i++)
                            model.thickness.computeK_Buffer(ref _tex_peel[i], false);

                        Blend.disable();
                        Buffer.setMask(0, true, true, true, true);
                    }
                    passes+=32;
                    Example._scene.passes++;
                }
                else
                    break;
            }

            Depth.enableTest();
            Depth.setMask(true);

            FrameBuffer.unbind();
            Buffer.draw(DrawBufferMode.Back);

            if(Example._scene.transparent)
                _weightSum.draw(Example._scene.useBackgroundTexture);
            else
            {
                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }
            Example._scene.total_passes=Example._scene.passes;
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        #endregion
    }
  */  
#endif
    #endregion

    #region A-BUFFER Algorithms
    
#if AB

    public class AB_Array : Peeling
    {
        #region Private Properties

        Shader  _peel, _resolve;
        Shading _peeling, _resolving;

        FrameBuffer _fbo_color;
        Texture _tex_peel, _tex_counter;

        #endregion

        #region Constructor
        public AB_Array()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_peel.delete();
            _tex_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
            _tex_peel = new Texture(TextureTarget.Texture2DArray);
            _tex_peel.bind();
            {
                _tex_peel.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_peel.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_peel.image3D(0, PixelInternalFormat.Rg32f, _sizeArray, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            }
            _tex_peel.unbind();
            _memory += RES_MB * 8 * _sizeArray;

            // Create Counter Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth , Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/ab_array/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();

            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_array/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override void peel_color()
        {          
            //1. Clear A-buffer
            FPS.beginLocal();
            {
                //1.1 Clear Counter
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("0. Clear Buffer");

            //2. Render the model into the A-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //3. Resolve 
            FPS.beginLocal();
            {
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);
                
                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            GL.BindImageTexture(0, _tex_counter.index , 0, false  , 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_peel.index    , 0, true   , 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 1;

            peel_color();
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class AB_LL : Peeling
    {
        #region Private Properties

        uint    _total_fragments;
        float   _tmp_memory;

        Shader  _peel, _resolve;
        Shading _peeling, _resolving;

        Buffer  _atomic_counter;
        Buffer  _buf_peel_pointers = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);

        Texture _tex_peel_pointers = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_next, _tex_counter;

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public AB_LL() : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_next.delete();
            _tex_counter.delete();
            _tex_peel_pointers.delete();

            _buf_peel_pointers.delete();
            _atomic_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments = (uint)Example._scene.width * (uint)Example._scene.height;

            // Create Page ID Texture 
            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Counter Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Atomic Counter
            _atomic_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _atomic_counter.bind();
            {
                _atomic_counter.storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
            }
            _atomic_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Page List Buffer
            _buf_peel_pointers.bind();
            {
                _buf_peel_pointers.data(new IntPtr(sizeof(float) * 4 * _total_fragments));
                _tex_peel_pointers.bind();
                {
                    Texture.buffer(SizedInternalFormat.Rgba32f, _buf_peel_pointers.index);
                }
                _tex_peel_pointers.unbind();
            }
            _buf_peel_pointers.unbind();

            _memory += MB * 12 * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/ab_ll/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling=new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_ll/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving=new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel_pointers.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rgba32f);
            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 5, _atomic_counter.index);

            Example._scene.multiFragmentRendering.total_passes = 1;
            Example._scene.updateShaders(ref _peeling);

            bool S = false, First = true;
            while (true)
            {
                //1. Clear A-buffer
                FPS.beginLocal();
                {
                    //1.1 Clear Atomic Counter
                    _atomic_counter.bind();
                    _atomic_counter.clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                    _atomic_counter.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);

                    //1.2 Clear Counter
                    _tex_counter.bind();
                    _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_counter.unbind();

                    //1.3 Clear Next
                    _tex_next.bind();
                    _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_next.unbind();

                    GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Clear Buffer");

                //2. Render the model into the A-Buffer
                FPS.beginLocal();
                {
                    if (First)
                        Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _peeling.use();
                        {
                            if (Example._scene.instancing)
                            {
                                _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            if (Example._scene.tessellation)
                            {
                                _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();
                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                    }
                    if (First)
                        S = Example._scene.multiFragmentRendering.endSamplesQuery();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Peeling");

                //2. Resize shared pool dynamically
                if (S || !First)
                    break;
                else
                {
                    First = false;
                    _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples;
                    initSharedPool();
                    FPS.resetLocal();
                }
                Example._scene.multiFragmentRendering.total_passes++;
            }

            //4. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling() { ;}
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class AB_LL_Storage : Peeling
    {
        #region Private Properties

        int     _node_LLsize;
        uint    _total_fragments;
        float   _tmp_memory;

        Shader  _peel, _resolve;
        Shading _peeling, _resolving;

        Buffer  _atomic_counter;
        Buffer  _nodes_LL = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        Texture _tex_next, _tex_counter;

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public AB_LL_Storage()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_next.delete();
            _tex_counter.delete();

            _nodes_LL.delete();
            _atomic_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory      = 0f;
            _node_LLsize     = sizeof(float) + 2 * sizeof(uint);
            _total_fragments = (uint)Example._scene.width * (uint)Example._scene.height;

            // Create Page ID Texture 
            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Counter Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Atomic Counter
            _atomic_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _atomic_counter.bind();
            {
                _atomic_counter.storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
            }
            _atomic_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 4, _nodes_LL.index);
            _nodes_LL.data(new IntPtr(_total_fragments * _node_LLsize));

            _memory += MB * _node_LLsize * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/ab_ll_storage/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_ll_storage/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 5, _atomic_counter.index);

            Example._scene.multiFragmentRendering.total_passes = 1;
            Example._scene.updateShaders(ref _peeling);

            bool S = false, First = true;
            while (true)
            {
                //1. Clear A-buffer
                FPS.beginLocal();
                {
                    //1.1 Clear Atomic Counter
                    _atomic_counter.bind();
                    _atomic_counter.clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                    _atomic_counter.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);

                    //1.2 Clear Counter
                    _tex_counter.bind();
                    _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_counter.unbind();

                    //1.3 Clear Next
                    _tex_next.bind();
                    _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_next.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Clear Buffer");

                //2. Render the model into the A-Buffer
                FPS.beginLocal();
                {
                    if (First)
                        Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _peeling.use();
                        {
                            if (Example._scene.instancing)
                            {
                                _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            if (Example._scene.tessellation)
                            {
                                _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();
                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit | MemoryBarrierFlags.ShaderStorageBarrierBit);
                    }
                    if (First)
                        S = Example._scene.multiFragmentRendering.endSamplesQuery();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Peeling");

                //2. Resize shared pool dynamically
                if (S || !First)
                    break;
                else
                {
                    First = false;
                    _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples;
                    initSharedPool();
                    FPS.resetLocal();
                }
                Example._scene.multiFragmentRendering.total_passes++;
            }

            //4. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling() { ;}
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class AB_LL_Paged : Peeling
    {
        #region Private Properties
        
        int         _node_LLsize;
        uint        _total_fragments;
        float       _tmp_memory;
        const int   _page_size = 4;

        Shader      _peel, _resolve;
        Shading     _peeling, _resolving;

        Buffer      _atomic_counter;
        Buffer      _nodes_LL = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        Texture     _tex_next, _tex_counter;
#if !GPU_MUTEX
        Texture     _tex_semaphore;
#endif
        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public AB_LL_Paged() : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_next.delete();
            _tex_counter.delete();

#if !GPU_MUTEX
            _tex_semaphore.delete();
#endif
            _nodes_LL.delete();
            _atomic_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _node_LLsize = sizeof(float) + 2 * sizeof(uint);
            _total_fragments = (uint)Example._scene.width * (uint)Example._scene.height;

            // Create Semaphore Texture
#if !GPU_MUTEX
            _tex_semaphore = new Texture(TextureTarget.TextureRectangle);
            _tex_semaphore.bind();
            {
                _tex_semaphore.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_semaphore.unbind();
            _tmp_memory += RES_MB * 4;
#endif
            // Create Page ID Texture 
            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Counter Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Atomic Counter 
            _atomic_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _atomic_counter.bind();
            {
                _atomic_counter.storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
            }
            _atomic_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;
            
            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 5, _nodes_LL.index);
            _nodes_LL.data(new IntPtr(_total_fragments * _node_LLsize));

            _memory += MB * 12 * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/ab_ll_paged/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_ll_paged/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#if !GPU_MUTEX
            GL.BindImageTexture(4, _tex_semaphore.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
#endif
            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 6, _atomic_counter.index);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 1;

            bool S = false, First = true;
            while (true)
            {
                //0. Clear A-Buffer
                FPS.beginLocal();
                {
                    //0.1 Clear Shared Counter
                    _atomic_counter.bind();
                    _atomic_counter.clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                    _atomic_counter.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);

                    //0.2 Clear Counter
                    _tex_counter.bind();
                    _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_counter.unbind();

                    //0.3 Clear Next
                    _tex_next.bind();
                    _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_next.unbind();

#if !GPU_MUTEX
                    //0.3 Clear Semaphore
                    _tex_semaphore.bind();
                    _tex_semaphore.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_semaphore.unbind();
#endif
                    GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Clear Buffer");

                //1. Render the model into the A-Buffer
                FPS.beginLocal();
                {
                    if (First) Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _peeling.use();
                        {
                            if (Example._scene.tessellation)
                            {
                                _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();
                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit | MemoryBarrierFlags.ShaderStorageBarrierBit);
                    }
                    if (First) S = Example._scene.multiFragmentRendering.endSamplesQuery();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Peeling");

                //2. Resize shared pool dynamically
                if (S || !First)
                    break;
                else
                {
                    First = false;
                    _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples;
                    initSharedPool();
                    FPS.resetLocal();
                }
                Example._scene.multiFragmentRendering.total_passes++;
            }

            //4. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Resolve");
        }

        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling() { ;}
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class AB_LL_Bucket : Peeling
    {
        #region Private Properties

        int        _node_LLsize;
        const int  _bucket_size = 8;
        uint       _total_fragments;
        float      _tmp_memory;

        Shader      _depth_bounds_compute, _peel, _resolve, _depth_bounds_init;
        Shading     _depth_bounds_computing, _peeling, _resolving, _depth_bounds_initing;

        Buffer      _atomic_counter;
        Buffer      _nodes_LL = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        Texture     _tex_next, _tex_min_max;

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public AB_LL_Bucket()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _depth_bounds_init.delete();
            _depth_bounds_compute.delete();
            _peeling.delete();
            _resolving.delete();
            _depth_bounds_initing.delete();
            _depth_bounds_computing.delete();

            _tex_min_max.delete();
            _tex_next.delete();

            _nodes_LL.delete();
            _atomic_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _node_LLsize = sizeof(float) + 2 * sizeof(uint);
            _total_fragments = (uint)Example._scene.width * (uint)Example._scene.height;

            // Create Page ID Texture 
            _tex_next = new Texture(TextureTarget.Texture2DArray);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image3D(0, PixelInternalFormat.R32ui, _bucket_size, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4 * _bucket_size;

            // Create Min Max Depth Texture Array
            _tex_min_max = new Texture(TextureTarget.Texture2DArray);
            _tex_min_max.bind();
            {
                _tex_min_max.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_min_max.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_min_max.image3D(0, PixelInternalFormat.R32ui, 2, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_min_max.unbind();
            _memory += RES_MB * 4 * 2;

            // Create Atomic Counter
            _atomic_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _atomic_counter.bind();
            {
                _atomic_counter.storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
            }
            _atomic_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 4, _nodes_LL.index);
            _nodes_LL.data(new IntPtr(_total_fragments * _node_LLsize));

            _memory += MB * _node_LLsize * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _depth_bounds_compute = new Shader("peeling/ab_ll_bun/depth_bounds_compute", ShaderType.FragmentShader);
            _depth_bounds_compute.complile(ShaderType.FragmentShader);

            _depth_bounds_computing = new Shading();
            _depth_bounds_computing.create();
            _depth_bounds_computing.attachShader(Example._scene.renderVertex.id);
            _depth_bounds_computing.attachShader(Example._scene.renderGeometry.id);
            _depth_bounds_computing.attachShader(_depth_bounds_compute.id);
            _depth_bounds_computing.link();

            _depth_bounds_computing.use();
            {
                _depth_bounds_computing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _depth_bounds_init = new Shader("peeling/ab_ll_bun/depth_bounds_init", ShaderType.FragmentShader);
            _depth_bounds_init.complile(ShaderType.FragmentShader);

            _depth_bounds_initing = new Shading();
            _depth_bounds_initing.create();
            _depth_bounds_initing.attachShader(Texture.vertex.id);
            _depth_bounds_initing.attachShader(_depth_bounds_init.id);
            _depth_bounds_initing.link();

            _depth_bounds_initing.use();
            {
                _depth_bounds_initing.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/ab_ll_bun/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                //_peeling.bindUniform1("bucketFragments", _bucket_fragments);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_ll_bun/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                //_resolving.bindUniform1("bucketFragments", _bucket_fragments);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_next.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_min_max.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 5, _atomic_counter.index);

            Example._scene.multiFragmentRendering.total_passes = 1;
            Example._scene.updateShaders(ref _peeling);

            FPS.beginLocal();
            {
                _depth_bounds_initing.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);

                _depth_bounds_computing.use();
                {
                    Example._scene.meshAnimation.drawConvexHulls(ref _depth_bounds_computing);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("0. Compute Depth Bounds");

            bool S = false, First = true;
            while (true)
            {
                //1. Clear A-buffer
                FPS.beginLocal();
                {
                    _atomic_counter.bind();
                    _atomic_counter.clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                    _atomic_counter.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);

                    _tex_next.bind();
                    _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_next.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Clear Buffer");

                //2. Render the model into the A-Buffer
                FPS.beginLocal();
                {
                    if (First)
                        Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _peeling.use();
                        {
                            if (Example._scene.instancing)
                            {
                                _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            if (Example._scene.tessellation)
                            {
                                _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();
                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit | MemoryBarrierFlags.ShaderStorageBarrierBit);
                    }
                    if (First)
                        S = Example._scene.multiFragmentRendering.endSamplesQuery();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Peeling");

                //2. Resize shared pool dynamically
                if (S || !First)
                    break;
                else
                {
                    First = false;
                    _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples;
                    initSharedPool();
                    FPS.resetLocal();
                }
                Example._scene.multiFragmentRendering.total_passes++;
            }

            //3. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("4. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_color()
        {
            ;
        }
        protected override void peel_culling() { ;}
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class AB_LL_Sync : Peeling
    {
        #region Private Properties

        int     _node_LLsize;
        uint    _total_fragments;
        float   _tmp_memory;

        Shader  _peel, _resolve;
        Shading _peeling, _resolving;

        Buffer  _atomic_counter;
        Buffer  _nodes_LL = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        Texture _tex_next, _tex_semaphore, _tex_counter;

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public AB_LL_Sync()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_next.delete();
            _tex_counter.delete();
            _tex_semaphore.delete();

            _nodes_LL.delete();
            _atomic_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory      = 0f;
            _node_LLsize     = sizeof(float) + 2 * sizeof(uint);
            _total_fragments = (uint)Example._scene.width * (uint)Example._scene.height;

            // Create Page ID Texture 
            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Page ID Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Counter Texture 
            _tex_semaphore = new Texture(TextureTarget.TextureRectangle);
            _tex_semaphore.bind();
            {
                _tex_semaphore.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_semaphore.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_semaphore.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_semaphore.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Atomic Counter
            _atomic_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.DynamicDraw);
            _atomic_counter.bind();
            {
                _atomic_counter.storage(new IntPtr(sizeof(uint)), IntPtr.Zero, BufferStorageFlags.MapWriteBit);
            }
            _atomic_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 4, _nodes_LL.index);
            _nodes_LL.data(new IntPtr(_total_fragments * _node_LLsize));

            _memory += MB * _node_LLsize * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/ab_ll_sync/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_ll_sync/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_semaphore.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(6, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 5, _atomic_counter.index);

            Example._scene.multiFragmentRendering.total_passes = 1;
            Example._scene.updateShaders(ref _peeling);

            bool S = false, First = true;
            while (true)
            {
                //1. Clear A-buffer
                FPS.beginLocal();
                {
                    //1.1 Clear Atomic Counter
                    _atomic_counter.bind();
                    _atomic_counter.clear(PixelInternalFormat.R32ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                    _atomic_counter.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.AtomicCounterBarrierBit);

                    //1.2 Clear Counter
                    _tex_semaphore.bind();
                    _tex_semaphore.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_semaphore.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                    _tex_counter.bind();
                    _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_counter.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                    //1.3 Clear Next
                    _tex_next.bind();
                    _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_next.unbind();
                    GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Clear Buffer");

                //2. Render the model into the A-Buffer
                FPS.beginLocal();
                {
                    if (First)
                        Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _peeling.use();
                        {
                            if (Example._scene.instancing)
                            {
                                _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                                _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                            }
                            if (Example._scene.tessellation)
                            {
                                _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();
                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit | MemoryBarrierFlags.ShaderStorageBarrierBit);
                    }
                    if (First)
                        S = Example._scene.multiFragmentRendering.endSamplesQuery();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Peeling");

                //2. Resize shared pool dynamically
                if (S || !First)
                    break;
                else
                {
                    break;
                    First = false;
                    _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples;
                    initSharedPool();
                    FPS.resetLocal();
                }
                Example._scene.multiFragmentRendering.total_passes++;
            }

            //4. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling() { ;}
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class AB_SB : Peeling
    {
        #region Private Properties

        int         _node_SBsize;
        uint        _N = (uint)Example._scene.width * (uint)Example._scene.height;
        uint        _total_fragments;
        float       _tmp_memory;

        Shader      _compute_hash_next, _compute_mapping, _blend_counter, _peel, _resolve;
        Shading     _computing_hash_next, _computing_mapping, _blending_counter, _peeling, _resolving;

        Texture     _tex_counter, _tex_next;
        Buffer      _nodes_SB        = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);
        Buffer      _shared_counters = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        const int   _num_counters = 32;
        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public AB_SB() : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _blend_counter.delete();
            _peel.delete();
            _resolve.delete();
            _compute_hash_next.delete();
            _compute_mapping.delete();

            _blending_counter.delete();
            _peeling.delete();
            _resolving.delete();
            _computing_hash_next.delete();
            _computing_mapping.delete();

            _tex_next.delete();
            _tex_counter.delete();
            _nodes_SB.delete();

            _shared_counters.delete();
           
            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments = (uint)_N;
            _node_SBsize     = sizeof(float) + sizeof(uint);

            // Create Next Address Texture 
            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Counter Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 5, _shared_counters.index);
            _shared_counters.data(new IntPtr(2 * _num_counters * sizeof(uint)));

            _tmp_memory += MB * sizeof(uint) * 2 *_num_counters;

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 4, _nodes_SB.index);
            _nodes_SB.data(new IntPtr(_total_fragments * _node_SBsize));

            _memory += MB * _node_SBsize * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _blend_counter = new Shader("peeling/ab_sb/blend_counter", ShaderType.FragmentShader);
            _blend_counter.complile(ShaderType.FragmentShader);

            _blending_counter = new Shading();
            _blending_counter.create();
            if (Example._scene.tessellation)
            {
                _blending_counter.attachShader(Example._scene.renderVertexTess.id);
                _blending_counter.attachShader(Example._scene.renderTessellationControl.id);
                _blending_counter.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _blending_counter.attachShader(Example._scene.renderVertex.id);
            _blending_counter.attachShader(Example._scene.renderGeometry.id);
            _blending_counter.attachShader(_blend_counter.id);
            _blending_counter.link();

            _blending_counter.use();
            {
                _blending_counter.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending_counter.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _compute_hash_next = new Shader("peeling/ab_sb/compute_hash_next", ShaderType.FragmentShader);
            _compute_hash_next.complile(ShaderType.FragmentShader);

            _computing_hash_next = new Shading();
            _computing_hash_next.create();
            _computing_hash_next.attachShader(Texture.vertex.id);
            _computing_hash_next.attachShader(_compute_hash_next.id);
            _computing_hash_next.link();

            _computing_hash_next.use();
            {
                _computing_hash_next.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _compute_mapping = new Shader("peeling/ab_sb/compute_mapping", ShaderType.FragmentShader);
            _compute_mapping.complile(ShaderType.FragmentShader);

            _computing_mapping = new Shading();
            _computing_mapping.create();
            _computing_mapping.attachShader(Texture.vertex.id);
            _computing_mapping.attachShader(_compute_mapping.id);
            _computing_mapping.link();

            _computing_mapping.use();
            {
                _computing_mapping.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/ab_sb/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_sb/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            //0. Init Counter-Next
            FPS.beginLocal();
            {
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

                _tex_next.bind();
                _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_next.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                _shared_counters.bind();
                _shared_counters.clear(PixelInternalFormat.R8ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                _shared_counters.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderStorageBarrierBit);
            }
            FPS.endLocal("0. Initing Counters-Next");

            //1. Compute Counter
            FPS.beginLocal();
            {
                Example._scene.multiFragmentRendering.beginSamplesQuery();
                {
                    _blending_counter.use();
                    {
                        if (Example._scene.instancing)
                        {
                            _blending_counter.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                            _blending_counter.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                        }
                        if (Example._scene.tessellation)
                        {
                            _blending_counter.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _blending_counter.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }
                        Example._scene.meshAnimation.drawModels(ref _blending_counter, false, false);
                    }
                    Shading.close();

                    GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                }
                if(!Example._scene.multiFragmentRendering.endSamplesQuery())
                {
                    _total_fragments = Example._scene.multiFragmentRendering.samplesQuery.samples + 1;
                    initSharedPool();
                }
            }
            FPS.endLocal("1. Compute Counter");

            //2. Compute Hashing-Address
            FPS.beginLocal();
            {
                _computing_hash_next.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Compute Hashing-Address");
            GL.MemoryBarrier(MemoryBarrierFlags.ShaderStorageBarrierBit | MemoryBarrierFlags.ShaderImageAccessBarrierBit);

            //3. Compute Mapping
            FPS.beginLocal();
            {
                _computing_mapping.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Compute Mapping");
            GL.MemoryBarrier(MemoryBarrierFlags.ShaderStorageBarrierBit);

            //4. Render the model into the S-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderStorageBarrierBit);
            }
            FPS.endLocal("4. Peeling");

            //5. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();

                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("5. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling() { ;}
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class AB_PreCalc_OpenCL : Peeling
    {
        #region Private Properties

        uint    _N = (uint)Example._scene.width * (uint)Example._scene.height;
        uint    _total_fragments;
        float   _tmp_memory;

        Shader  _blend_counter, _peel, _resolve;
        Shading _blending_counter, _peeling, _resolving;

        Shader  _prefix_sum;
        Shading _prefix_suming;

        Texture _tex_counter, _tex_next;
    
        Texture _tex_peel = new Texture(TextureTarget.TextureBuffer);
        Buffer  _buf_peel = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);

        FrameBuffer _fbo_color;

        /**********************************************/

        Kernel _scan;
        ComputeImage2D _cl_counter, _cl_next;
        ComputeBuffer<uint> _scan_input;
        ComputeBuffer<uint> _scan_output;
        ComputeBuffer<uint> _scan_final;
        ComputeBuffer<uint> _scan_buffer;

        const long maxWorkGroupSize = 256;
        const long MAX_LARGE_ARRAY_SIZE = 4 * maxWorkGroupSize * maxWorkGroupSize;
        const long MAX_BATCH_ELEMENTS = 64 * 1048576;

        #endregion

        #region Constructor
        public AB_PreCalc_OpenCL() : base()
        {
            initBuffers();
            initShaders();
            initKernels();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _blend_counter.delete();
            _peel.delete();
            _resolve.delete();

            _blending_counter.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_next.delete();
            _tex_counter.delete();
            _tex_peel.delete();

            _buf_peel.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments = (uint)_N;

            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4;

            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _tmp_memory += RES_MB * 4;

            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Page List Buffer
            _buf_peel.bind();
            {
                _buf_peel.data(new IntPtr(sizeof(float) * 2 * _total_fragments));
                _tex_peel.bind();
                {
                    Texture.buffer(SizedInternalFormat.Rg32f, _buf_peel.index);
                }
                _tex_peel.unbind();
            }
            _buf_peel.unbind();
            _memory += MB * 8 * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _prefix_sum = new Shader("prefix_sum", ShaderType.ComputeShader);
            _prefix_sum.complile(ShaderType.ComputeShader);

            _prefix_suming = new Shading();
            _prefix_suming.create();
            _prefix_suming.attachShader(_prefix_sum.id);
            _prefix_suming.link();

            _blend_counter = new Shader("peeling/ab_precalc_opencl/blend_counter", ShaderType.FragmentShader);
            _blend_counter.complile(ShaderType.FragmentShader);

            _blending_counter = new Shading();
            _blending_counter.create();
            if (Example._scene.tessellation)
            {
                _blending_counter.attachShader(Example._scene.renderVertexTess.id);
                _blending_counter.attachShader(Example._scene.renderTessellationControl.id);
                _blending_counter.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _blending_counter.attachShader(Example._scene.renderVertex.id);
            _blending_counter.attachShader(Example._scene.renderGeometry.id);
            _blending_counter.attachShader(Example._scene.phongFragment.id);
            _blending_counter.attachShader(Example._scene.computePixelColor.id);
            _blending_counter.attachShader(_blend_counter.id);
            _blending_counter.link();

            _blending_counter.use();
            {
                _blending_counter.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending_counter.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _peel = new Shader("peeling/ab_precalc_opencl/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_precalc_opencl/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Kernel Functions
        private void initKernels()
        {
            _cl_counter = ComputeImage2D.CreateFromGLTexture2D(Example.context, ComputeMemoryFlags.ReadOnly , (int)_tex_counter.target, 0, (int)_tex_counter.index);
            _cl_next    = ComputeImage2D.CreateFromGLTexture2D(Example.context, ComputeMemoryFlags.WriteOnly, (int)_tex_next.target   , 0, (int)_tex_next.index);

            _scan = new Kernel("scan", "-D WORKGROUP_SIZE=" + maxWorkGroupSize.ToString(), new string[] { "scanExclusiveLocal1", "scanExclusiveLocal2", "uniformUpdate", "scanCorrect" });
            _scan_input = new ComputeBuffer<uint>(Example.context, ComputeMemoryFlags.ReadWrite, _N);
            _scan_output = new ComputeBuffer<uint>(Example.context, ComputeMemoryFlags.ReadWrite, _N);
            _scan_final = new ComputeBuffer<uint>(Example.context, ComputeMemoryFlags.ReadWrite, _N);
            _scan_buffer = new ComputeBuffer<uint>(Example.context, ComputeMemoryFlags.ReadWrite, (MAX_BATCH_ELEMENTS / (4 * maxWorkGroupSize)));

            _tmp_memory += RES_MB * 3.5f;

            // scanExclusiveLocal1
            _scan.setMemoryArgument(0, 0, _scan_output);
            _scan.setMemoryArgument(0, 1, _scan_input);
            _scan.setArgument(0, 2, new IntPtr(Marshal.SizeOf(typeof(uint)) * 2 * maxWorkGroupSize), IntPtr.Zero);
            unsafe
            {
                long _size = 4 * maxWorkGroupSize;
                _scan.setArgument(0, 3, new IntPtr(Marshal.SizeOf(typeof(uint))), new IntPtr((void*)&_size));
            }
            // scanExclusiveLocal2
            _scan.setMemoryArgument(1, 0, _scan_buffer);
            _scan.setMemoryArgument(1, 1, _scan_output);
            _scan.setMemoryArgument(1, 2, _scan_input);
            _scan.setArgument(1, 3, new IntPtr(Marshal.SizeOf(typeof(uint)) * 2 * maxWorkGroupSize), IntPtr.Zero);

            // uniformUpdate
            _scan.setMemoryArgument(2, 0, _scan_output);
            _scan.setMemoryArgument(2, 1, _scan_buffer);

            // scanCorrect
            _scan.setMemoryArgument(3, 0, _scan_final);
            _scan.setMemoryArgument(3, 1, _scan_output);
            _scan.setMemoryArgument(3, 2, _scan_input);

            //            //Get the max work group size
            //long maxWorkGroupSize = Example.context.Devices[0].MaxWorkGroupSize;
            //long[] local = new long[2];
            //local[0] = (long)Math.Min((int)Math.Sqrt((float)maxWorkGroupSize), 16);
            //local[1] = (long)Math.Min((int)Math.Sqrt((float)maxWorkGroupSize), 16);
            //long[] global = new long[2];
            //global[0] = roundUp(local[0], (long)Example._scene.width);
            //global[1] = roundUp(local[1], (long)Example._scene.height);

            //_prefix_xum.workersGlobal = global;
            //_prefix_xum.workersLocal  = local;
        }
        private void prefix_sum()
        {
            FPS.beginLocal();
            {
                GL.Finish();
                _scan.acquireGLObjects(new List<ComputeMemory> { _cl_counter });
                {
                    _scan.commands.CopyImageToBuffer<uint>(_cl_counter, _scan_input, null);
                }
                _scan.releaseGLObjects(new List<ComputeMemory> { _cl_counter });
            }
            FPS.endLocal("2. Syncing GL2CL");

            FPS.beginLocal();
            {
                scanExclusiveLarge(_scan, _N / MAX_LARGE_ARRAY_SIZE, MAX_LARGE_ARRAY_SIZE, maxWorkGroupSize);
                _scan.execute(3, new long[] { _N }, new long[] { maxWorkGroupSize });
            }
            FPS.endLocal("3. Prefix Sum");

            FPS.beginLocal();
            {
                _scan.acquireGLObjects(new List<ComputeMemory> { _cl_next });
                {
                    _scan.commands.CopyBufferToImage<uint>(_scan_final, _cl_next, null);
                }
                _scan.releaseGLObjects(new List<ComputeMemory> { _cl_next });
                _scan.finish();
            }
            FPS.endLocal("4. Syncing CL2GL");
        }
        private long roundUp(long global_size, long group_size)
        {
            long r = global_size % group_size;
            return (r == 0) ? global_size : global_size + group_size - r;
        }
        private void scanExclusiveLarge(Kernel kernel, long batchSize, long arrayLength, long maxWorkGroupSize)
        {
            scanExclusiveLocal1(kernel, (batchSize * arrayLength) / (4 * maxWorkGroupSize), 4 * maxWorkGroupSize, maxWorkGroupSize);

            scanExclusiveLocal2(kernel, batchSize, arrayLength / (4 * maxWorkGroupSize), maxWorkGroupSize);

            uniformUpdate(kernel, (batchSize * arrayLength) / (4 * maxWorkGroupSize), maxWorkGroupSize);
        }
        private void scanExclusiveLocal1(Kernel kernel, long _n, long _size, long _maxWorkGroupSize)
        {
            kernel.execute(0, new long[] { (_n * _size) / 4 }, new long[] { _maxWorkGroupSize });
        }
        private void scanExclusiveLocal2(Kernel kernel, long _n, long _size, long _maxWorkGroupSize)
        {
            long _elements = _n * _size;
            unsafe
            {
                kernel.setArgument(1, 4, new IntPtr(Marshal.SizeOf(typeof(uint))), new IntPtr((void*)&_elements));
                kernel.setArgument(1, 5, new IntPtr(Marshal.SizeOf(typeof(uint))), new IntPtr((void*)&_size));
            }
            kernel.execute(1, new long[] { roundUp(_elements, _maxWorkGroupSize) }, new long[] { _maxWorkGroupSize });
        }
        private void uniformUpdate(Kernel kernel, long _n, long _maxWorkGroupSize)
        {
            kernel.execute(2, new long[] { _n * _maxWorkGroupSize }, new long[] { _maxWorkGroupSize });
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            //0. Init Counter-Next
            FPS.beginLocal();
            {
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

                _tex_next.bind();
                _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_next.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("0. Initing Counter-Next");
            
            //1. Compute Counter
            FPS.beginLocal();
            {
                Example._scene.multiFragmentRendering.beginSamplesQuery();
                {
                    _blending_counter.use();
                    {
                        if (Example._scene.instancing)
                        {
                            _blending_counter.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                            _blending_counter.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                        }
                        if (Example._scene.tessellation)
                        {
                            _blending_counter.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _blending_counter.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }
                        Example._scene.meshAnimation.drawModels(ref _blending_counter, false, false);
                    }
                    Shading.close();
                    GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                }
                if (!Example._scene.multiFragmentRendering.endSamplesQuery())
                {
                    _total_fragments = Example._scene.multiFragmentRendering.samplesQuery.samples + 1;
                    initSharedPool();
                }
            }
            FPS.endLocal("1. Compute Counter - Re-alloc");

            /*                                          *** COMPUTE SHADER EXAMPLE * FAIL ***
            FPS.beginLocal();
            {
                _prefix_suming.use();
                {
                    GL.DispatchCompute(Example._scene.height, 1, 1);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);

                GL.BindImageTexture(0, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
                GL.BindImageTexture(1, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

                _prefix_suming.use();
                {
                    GL.DispatchCompute(Example._scene.height, 1, 1);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);

              //  GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
              //  GL.BindImageTexture(1, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            }
            FPS.endLocal("3. Compute Prefix Sum");
             * 
             *                                         *** COMPUTE SHADER EXAMPLE * FAIL ***
           */

            //2. Compute Prefix Sum
            prefix_sum();
            
            //3. Peeling
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("3. Peeling");

            //4. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("4. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling() { ;}
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class AB_PreCalc_Fixed : Peeling
    {
        #region Private Properties

        uint    _N = (uint)Example._scene.width * (uint)Example._scene.height;
        uint    _total_fragments;
        float   _tmp_memory;

        Shader  _peel, _resolve;
        Shading _peeling, _resolving;

        Texture _tex_counter;
        Texture _tex_peel = new Texture(TextureTarget.TextureBuffer);
        Buffer  _buf_peel = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.DynamicDraw);

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public AB_PreCalc_Fixed() : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();

            _peeling.delete();
            _resolving.delete();

            _tex_counter.delete();
            _tex_peel.delete();

            _buf_peel.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments = (uint)_N * (uint)_sizeArray;

            // Create Counter Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Page List Buffer
            _buf_peel.bind();
            {
                _buf_peel.data(new IntPtr(sizeof(float) * 2 * _total_fragments));
                // Create Shared Page List Texture
                _tex_peel.bind();
                {
                    Texture.buffer(SizedInternalFormat.Rg32f, _buf_peel.index);
                }
                _tex_peel.unbind();
            }
            _buf_peel.unbind();
            _memory += MB * 8 * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/ab_precalc_fixed/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindUniform1("width", Example._scene.width);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_precalc_fixed/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
                _resolving.bindUniform1("width", Example._scene.width);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_peel.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.Rg32f);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 1;

            //0. Init Counter-Next
            FPS.beginLocal();
            {
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();
                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);
            }
            FPS.endLocal("0. Initing Counter");

            //1. Peeling
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //2. Resolve
            FPS.beginLocal();
            {
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity" , Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling() { ;}
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

#endif 

#if AB_Β2

    public class AB_Array_B2 : Peeling
    {
        #region Private Properties

        Shader _peel, _resolve;
        Shading _peeling, _resolving;

        FrameBuffer _fbo_color;
        Texture _tex_peel_color, _tex_peel_depth, _tex_counter;

#if multipass
        FrameBuffer _fbo_depth;
        Texture _tex_depth;
        Shader _peeler_depth;
        Shading _peeling_depth;
#endif
        #endregion

        #region Constructor
        public AB_Array_B2()
            : base()
        {
#if multipass
            _weightSum = Example._scene.weightSumF2B;
#endif
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_peel_depth.delete();
            _tex_peel_color.delete();
            _fbo_color.delete();
#if multipass
            _tex_depth.delete();
            _fbo_depth.delete();
            _peeler_depth.delete();
            _peeling_depth.delete();
#endif
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Peel Texture 
#if multisample
            _tex_peel_depth = new Texture(TextureTarget.Texture2DMultisampleArray);
#else
            _tex_peel_depth = new Texture(TextureTarget.Texture2DArray);
#endif
            _tex_peel_depth.bind();
            _tex_peel_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_peel_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_peel_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_peel_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_peel_depth.image3DMS(_multisamples, PixelInternalFormat.R32f, _sizeArray, false);
            _memory += RES_MB * 4 * _sizeArray * _multisamples;         
#else
            _tex_peel_depth.image3D(0, PixelInternalFormat.R32f, _sizeArray, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 4 * _sizeArray;
#endif
            _tex_peel_depth.unbind();

            // Create Peel Texture 
#if multisample
            _tex_peel_color = new Texture(TextureTarget.Texture2DMultisampleArray);
#else
            _tex_peel_color = new Texture(TextureTarget.Texture2DArray);
#endif
            _tex_peel_color.bind();
            _tex_peel_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_peel_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_peel_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_peel_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_peel_color.image3DMS(_multisamples, PixelInternalFormat.R32ui, _sizeArray, false);
            _memory += RES_MB * 4 * _sizeArray * _multisamples;         
#else
            _tex_peel_color.image3D(0, PixelInternalFormat.R32ui, _sizeArray, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4 * _sizeArray;
#endif
            _tex_peel_color.unbind();

            // Create Count Texture 
#if multisample
            _tex_count = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_counter.bind();
            _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_count.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_counter.unbind();

#if multipass
            // Create Depth Texture
#if multisample
            _tex_depth = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_depth = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_depth.bind();
            _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_depth.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_depth.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_depth.unbind();

            // Create Depth FrameBuffer 
            _fbo_depth = new FrameBuffer();
            _fbo_depth.bind();
            _fbo_depth.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth, 0);
            _fbo_depth.checkStatus();
            FrameBuffer.unbind();
#endif
            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
            _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/ab_array_b2/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();

            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);

            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_array_b2/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

#if multipass
            // depth
            _peeler_depth = new Shader("peeling/ab_array_b2/peel_depth", ShaderType.FragmentShader);
            _peeler_depth.complile(ShaderType.FragmentShader);

            _peeling_depth = new Shading();
            _peeling_depth.create();
            _peeling_depth.attachShader(Texture.vertex.id);
            _peeling_depth.attachShader(_peeler_depth.id);
            _peeling_depth.link();

            _peeling_depth.use();
            {
                _peeling_depth.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
#endif
        }
        #endregion

        #region Peeling Functions
        protected override bool peel_depth()
        {
            bool S = false;
#if multipass
            if (Example._scene.multiFragmentRendering.passes == 0)
                return false;

            FPS.beginLocal();
            {
                _fbo_depth.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, false, false, false);
                Buffer.clear(1.0f, 0.0f, 0.0f, 0.0f);

                Example._scene.multiFragmentRendering.beginSamplesAnyQuery();
                {
                    _peeling_depth.use();
                    {
                        Texture.image.draw();
                    }
                    Shading.close();
                }
                S = Example._scene.multiFragmentRendering.endSamplesAnyQuery(true);
                
                Buffer.setMask(0, true, true, true, true);
            }
            FPS.endLocal(Example._scene.multiFragmentRendering.passes.ToString() + ". Peeling(Depth)");
#endif
            return S;
        }
        protected override void peel_color()
        {
            //0. Clear A-Buffer
            FPS.beginLocal();
            {
                //1. Clear Counter
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();
            }
            FPS.endLocal("0. Clear Buffer");

            //2. Render the model into the A-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("1. Peeling");

            //3. Resolve 
            FPS.beginLocal();
            {
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", (Example._scene.multiFragmentRendering.layers - 1));

                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);
                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    _resolving.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                    _resolving.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Resolve");
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            GL.BindImageTexture(0, _tex_peel_depth.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32f);
            GL.BindImageTexture(1, _tex_peel_color.index, 0, true, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(2, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.updateShaders(ref _peeling);

            peel_color();

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            Example._scene.multiFragmentRendering.total_passes = 1;
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void peel_culling() { ;}
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }

    public class AB_LL_B2 : Peeling
    {
        #region Private Properties

        uint _total_fragments;
        float _tmp_memory;

        Shader _peel, _resolve;
        Shading _peeling, _resolving;

        Buffer _buf_peel_depth = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.StreamDraw);
        Buffer _buf_peel_color = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.StreamDraw);
        Buffer _buf_pointers = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.StreamDraw);
        Buffer _shared_counter;

        Texture _tex_peel_depth = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_peel_color = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_pointers = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_next, _tex_counter, _tex_color;

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public AB_LL_B2()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();

            _peeling.delete();
            _resolving.delete();

            _tex_next.delete();
            _tex_color.delete();
            _tex_counter.delete();
            _tex_peel_depth.delete();
            _tex_peel_color.delete();
            _tex_pointers.delete();

            _buf_peel_depth.delete();
            _buf_peel_color.delete();
            _buf_pointers.delete();
            _shared_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments = (uint)Example._scene.width * (uint)Example._scene.height;

            // Create Page ID Texture 
#if multisample
            _tex_next = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_next = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_next.bind();
            _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_next.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_next.unbind();

            // Create Counter Texture 
#if multisample
            _tex_counter = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_counter.bind();
            _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_counter.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_counter.unbind();

            // Create Color Texture 
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_color.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

            _shared_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.StreamDraw);
            _shared_counter.bind();
            _shared_counter.data(new IntPtr(sizeof(uint)));
            _shared_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Depth List Buffer
            _buf_peel_depth.bind();
            _buf_peel_depth.data(new IntPtr(sizeof(float) * _total_fragments));
            {
                _tex_peel_depth.bind();
                {
                    Texture.buffer(SizedInternalFormat.R32f, _buf_peel_depth.index);
                    _memory += MB * 4 * _total_fragments;
                }
                _tex_peel_depth.unbind();
            }
            _buf_peel_depth.unbind();

            // Create Shared Color List Buffer
            _buf_peel_color.bind();
            _buf_peel_color.data(new IntPtr(sizeof(uint) * _total_fragments));
            {
                _tex_peel_color.bind();
                {
                    Texture.buffer(SizedInternalFormat.R32ui, _buf_peel_color.index);
                    _memory += MB * 4 * _total_fragments;
                }
                _tex_peel_color.unbind();
            }
            _buf_peel_color.unbind();

            // Create Shared Linked List Buffer
            _buf_pointers.bind();
            _buf_pointers.data(new IntPtr(sizeof(uint) * _total_fragments));
            {
                _tex_pointers.bind();
                {
                    Texture.buffer(SizedInternalFormat.R32ui, _buf_pointers.index);
                    _memory += MB * 4 * _total_fragments;
                }
                _tex_pointers.unbind();
            }
            _buf_pointers.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/ab_ll_b2/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_ll_b2/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel_depth.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32f);
            GL.BindImageTexture(5, _tex_peel_color.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(6, _tex_pointers.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.multiFragmentRendering.total_passes = 1;
            Example._scene.updateShaders(ref _peeling);

            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            bool S = false, First = true;
            while (true)
            {
                //0. Clear A-Buffer
                FPS.beginLocal();
                {
                    _shared_counter.bind();
                    {
                        IntPtr kk = GL.MapBufferRange(BufferTarget.AtomicCounterBuffer, IntPtr.Zero, new IntPtr(sizeof(uint)), BufferAccessMask.MapWriteBit | BufferAccessMask.MapInvalidateBufferBit | BufferAccessMask.MapUnsynchronizedBit);
                        kk = IntPtr.Zero;
                        GL.UnmapBuffer(BufferTarget.AtomicCounterBuffer);
                        GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 7, _shared_counter.index);
                    }
                    _shared_counter.unbind();

                    _tex_counter.bind();
                    _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_counter.unbind();

                    _tex_next.bind();
                    _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_next.unbind();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Clear Buffer");

                //1. Render the model into the A-Buffer
                FPS.beginLocal();
                {
                    if (First)
                        Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _peeling.use();
                        {
                            if (Example._scene.tessellation)
                            {
                                _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            _peeling.bindUniform1("total_fragments", _total_fragments);
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();
                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit | MemoryBarrierFlags.AtomicCounterBarrierBit);
                    }
                    if (First)
                        S = Example._scene.multiFragmentRendering.endSamplesQuery();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Peeling");

                //2. Resize shared pool dynamically
                if (S || !First)
                    break;
                else
                {
                    First = false;
                    _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples;
                    initSharedPool();
                    FPS.resetLocal();
                }
                Example._scene.multiFragmentRendering.total_passes++;
            }

            //4. Resolve
            FPS.beginLocal();
            {
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Resolve");

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
            //#. Final Draw
            draw_final();
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        #endregion
    }

    public class AB_LL_Paged_B2 : Peeling
    {
        #region Private Properties

        uint _total_fragments;
        float _tmp_memory;

        Shader _peel, _resolve;
        Shading _peeling, _resolving;

        Buffer _buf_peel_depth = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.StreamDraw);
        Buffer _buf_peel_color = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.StreamDraw);
        Buffer _buf_pointers = new Buffer(BufferTarget.TextureBuffer, BufferUsageHint.StreamDraw);
        Buffer _shared_counter;

        Texture _tex_peel_depth = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_peel_color = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_pointers = new Texture(TextureTarget.TextureBuffer);
        Texture _tex_next, _tex_counter, _tex_semaphore, _tex_color;

        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public AB_LL_Paged_B2()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _peel.delete();
            _resolve.delete();
            _peeling.delete();
            _resolving.delete();

            _tex_next.delete();
            _tex_color.delete();
            _tex_counter.delete();
            _tex_peel_depth.delete();
            _tex_peel_color.delete();
            _tex_pointers.delete();

            _buf_peel_depth.delete();
            _buf_peel_color.delete();
            _buf_pointers.delete();
            _shared_counter.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments = (uint)Example._scene.width * (uint)Example._scene.height;

            // Create Semaphore Texture 
#if multisample
            _tex_semaphore = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_semaphore = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_semaphore.bind();
            _tex_semaphore.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_semaphore.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_semaphore.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_semaphore.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_semaphore.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_semaphore.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_semaphore.unbind();

            // Create Page ID Texture 
#if multisample
            _tex_next = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_next = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_next.bind();
            _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_next.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_next.unbind();

            // Create Counter Texture 
#if multisample
            _tex_counter = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_counter.bind();
            _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_counter.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_counter.unbind();

            // Create Color Texture 
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _tmp_memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _tmp_memory += RES_MB * 4;
#endif
            _tex_color.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

            _shared_counter = new Buffer(BufferTarget.AtomicCounterBuffer, BufferUsageHint.StreamDraw);
            _shared_counter.bind();
            _shared_counter.data(new IntPtr(sizeof(uint)));
            _shared_counter.unbind();
            _tmp_memory += MB * sizeof(uint);

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            // Create Shared Page Depth List Buffer
            _buf_peel_depth.bind();
            _buf_peel_depth.data(new IntPtr(sizeof(float) * _total_fragments));

            // Create Shared Page Depth List Texture
            _tex_peel_depth.bind();
            Texture.buffer(SizedInternalFormat.R32f, _buf_peel_depth.index);
            _memory += MB * 4 * _total_fragments;
            _tex_peel_depth.unbind();
            _buf_peel_depth.unbind();

            // Create Shared Page Color List Buffer
            _buf_peel_color.bind();
            _buf_peel_color.data(new IntPtr(sizeof(uint) * _total_fragments));

            // Create Shared Page Color List Texture
            _tex_peel_color.bind();
            Texture.buffer(SizedInternalFormat.R32ui, _buf_peel_color.index);
            _memory += MB * 4 * _total_fragments;
            _tex_peel_color.unbind();
            _buf_peel_color.unbind();

            // Create Shared Linked List Buffer
            _buf_pointers.bind();
            _buf_pointers.data(new IntPtr(_total_fragments * sizeof(uint)));

            // Create Shared Linked List Texture
            _tex_pointers.bind();
            Texture.buffer(SizedInternalFormat.R32ui, _buf_pointers.index);
            _memory += MB * 4 * _total_fragments;
            _tex_pointers.unbind();
            _buf_pointers.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peel = new Shader("peeling/ab_ll_paged_b2/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_ll_paged_b2/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(3, _tex_semaphore.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(4, _tex_peel_depth.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32f);
            GL.BindImageTexture(5, _tex_peel_color.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(6, _tex_pointers.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.multiFragmentRendering.total_passes = 1;
            Example._scene.updateShaders(ref _peeling);

            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.None);
            Buffer.setMask(false, false, false, false);

            bool S = false, First = true;
            while (true)
            {
                //0. Clear A-Buffer
                FPS.beginLocal();
                {
                    _shared_counter.bind();
                    {
                        IntPtr kk = GL.MapBufferRange(BufferTarget.AtomicCounterBuffer, IntPtr.Zero, new IntPtr(sizeof(uint)), BufferAccessMask.MapWriteBit | BufferAccessMask.MapInvalidateBufferBit | BufferAccessMask.MapUnsynchronizedBit);
                        kk = IntPtr.Zero;
                        GL.UnmapBuffer(BufferTarget.AtomicCounterBuffer);
                        GL.BindBufferBase(BufferRangeTarget.AtomicCounterBuffer, 7, _shared_counter.index);
                    }
                    _shared_counter.unbind();

                    _tex_counter.bind();
                    _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_counter.unbind();

                    _tex_next.bind();
                    _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_next.unbind();

                    _tex_semaphore.bind();
                    _tex_semaphore.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                    _tex_semaphore.unbind();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Clear Buffer");

                //1. Render the model into the A-Buffer
                FPS.beginLocal();
                {
                    if (First)
                        Example._scene.multiFragmentRendering.beginSamplesQuery();
                    {
                        _peeling.use();
                        {
                            if (Example._scene.tessellation)
                            {
                                _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                                _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                            }
                            _peeling.bindUniform1("total_fragments", _total_fragments);
                            Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                        }
                        Shading.close();
                        GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit | MemoryBarrierFlags.AtomicCounterBarrierBit);
                    }
                    if (First)
                        S = Example._scene.multiFragmentRendering.endSamplesQuery();
                }
                FPS.endLocal(Example._scene.multiFragmentRendering.total_passes.ToString() + ". Peeling");

                //2. Resize shared pool dynamically
                if (S || !First)
                    break;
                else
                {
                    First = false;
                    _total_fragments += Example._scene.multiFragmentRendering.samplesQuery.samples * 4;
                    initSharedPool();
                    FPS.resetLocal();
                }
                Example._scene.multiFragmentRendering.total_passes++;
            }

            //4. Resolve
            FPS.beginLocal();
            {
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(true, true, true, true);
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, Example._scene.backgroundColor.A / 255.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);
                    _resolving.bindUniform1("transparency", (Example._scene.meshAnimation.poses.Count > 0) ? Example._scene.meshAnimation.poses[0].transparency : 0.3f);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Resolve");

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif

            //#. Final Draw
            draw_final();
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                Depth.clear();
                Buffer.clear(0, 0, 0, 0);
                _tex_color.draw();
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        #endregion
    }

    public class AB_SB_B2 : Peeling
    {
        #region Private Properties

         int        _node_Size_Depth, _node_Size_GBuffer;
        uint        _N = (uint)Example._scene.width * (uint)Example._scene.height;
        uint        _total_fragments;
        float       _tmp_memory;

        Shader      _compute_hash_next, _compute_mapping, _blend_counter, _peel, _resolve;
        Shading     _computing_hash_next, _computing_mapping, _blending_counter, _peeling, _resolving;

        Texture     _tex_counter, _tex_next;
        
        Buffer      _nodes_Depth   = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);
        Buffer      _nodes_GBuffer = new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);
        Buffer      _shared_counters= new Buffer(BufferTarget.ShaderStorageBuffer, BufferUsageHint.DynamicDraw);

        const int _num_counters = 32;
        FrameBuffer _fbo_color;

        #endregion

        #region Constructor
        public AB_SB_B2()
            : base()
        {
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Functions
        public override void delete()
        {
            _blend_counter.delete();
            _peel.delete();
            _resolve.delete();
            _compute_hash_next.delete();
            _compute_mapping.delete();

            _blending_counter.delete();
            _peeling.delete();
            _resolving.delete();
            _computing_hash_next.delete();
            _computing_mapping.delete();

            _tex_next.delete();
            _tex_counter.delete();
            _nodes_Depth.delete();
            _nodes_GBuffer.delete();

            _shared_counters.delete();

            _fbo_color.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            _tmp_memory = 0f;
            _total_fragments   = (uint)_N;
            _node_Size_Depth   = sizeof(float);
            _node_Size_GBuffer = sizeof(uint);

            // Create Next Address Texture 
            _tex_next = new Texture(TextureTarget.TextureRectangle);
            _tex_next.bind();
            {
                _tex_next.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_next.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_next.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_next.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_next.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Counter Texture 
            _tex_counter = new Texture(TextureTarget.TextureRectangle);
            _tex_counter.bind();
            {
                _tex_counter.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_counter.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
                _tex_counter.image2D(0, PixelInternalFormat.R32ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            }
            _tex_counter.unbind();
            _tmp_memory += RES_MB * 4;

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            {
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultWidth, Example._scene.width);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultHeight, Example._scene.height);
                _fbo_color.parameter(FramebufferDefaultParameter.FramebufferDefaultLayers, 1);
                _fbo_color.checkStatus();
            }
            FrameBuffer.unbind();

            // Create Shared Counters
            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 6, _shared_counters.index);
            _shared_counters.data(new IntPtr(2 * _num_counters * sizeof(uint)));

            _tmp_memory += MB * sizeof(uint) * 2 * _num_counters;

            initSharedPool();
        }
        private void initSharedPool()
        {
            _memory = _tmp_memory;

            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 4, _nodes_Depth.index);
            _nodes_Depth.data(new IntPtr(_total_fragments * _node_Size_Depth));

            GL.BindBufferBase(BufferRangeTarget.ShaderStorageBuffer, 5, _nodes_GBuffer.index);
            _nodes_GBuffer.data(new IntPtr(_total_fragments * _node_Size_GBuffer));

            _memory += MB * (_node_Size_GBuffer + _node_Size_Depth) * _total_fragments;
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _blend_counter = new Shader("peeling/ab_sb_b2/blend_counter", ShaderType.FragmentShader);
            _blend_counter.complile(ShaderType.FragmentShader);

            _blending_counter = new Shading();
            _blending_counter.create();
            if (Example._scene.tessellation)
            {
                _blending_counter.attachShader(Example._scene.renderVertexTess.id);
                _blending_counter.attachShader(Example._scene.renderTessellationControl.id);
                _blending_counter.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _blending_counter.attachShader(Example._scene.renderVertex.id);
            _blending_counter.attachShader(Example._scene.renderGeometry.id);
            _blending_counter.attachShader(_blend_counter.id);
            _blending_counter.link();

            _blending_counter.use();
            {
                _blending_counter.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _blending_counter.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _compute_hash_next = new Shader("peeling/ab_sb_b2/compute_hash_next", ShaderType.FragmentShader);
            _compute_hash_next.complile(ShaderType.FragmentShader);

            _computing_hash_next = new Shading();
            _computing_hash_next.create();
            _computing_hash_next.attachShader(Texture.vertex.id);
            _computing_hash_next.attachShader(_compute_hash_next.id);
            _computing_hash_next.link();

            _computing_hash_next.use();
            {
                _computing_hash_next.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _compute_mapping = new Shader("peeling/ab_sb_b2/compute_mapping", ShaderType.FragmentShader);
            _compute_mapping.complile(ShaderType.FragmentShader);

            _computing_mapping = new Shading();
            _computing_mapping.create();
            _computing_mapping.attachShader(Texture.vertex.id);
            _computing_mapping.attachShader(_compute_mapping.id);
            _computing_mapping.link();

            _computing_mapping.use();
            {
                _computing_mapping.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _peel = new Shader("peeling/ab_sb_b2/peel", ShaderType.FragmentShader);
            _peel.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            if (Example._scene.tessellation)
            {
                _peeling.attachShader(Example._scene.renderVertexTess.id);
                _peeling.attachShader(Example._scene.renderTessellationControl.id);
                _peeling.attachShader(Example._scene.renderTessellationEvaluation.id);
            }
            else
                _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peel.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferRangeTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferRangeTarget.UniformBuffer);
            }
            Shading.close();

            _resolve = new Shader("peeling/ab_sb_b2/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
            Depth.disableTest();
            Depth.setMask(false);

            GL.BindImageTexture(0, _tex_counter.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);
            GL.BindImageTexture(1, _tex_next.index, 0, false, 0, TextureAccess.ReadWrite, SizedInternalFormat.R32ui);

            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.total_passes = 2;

            //0. Init Counter-Next
            FPS.beginLocal();
            {
                _tex_counter.bind();
                _tex_counter.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_counter.unbind();

                _tex_next.bind();
                _tex_next.clear(PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _tex_next.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.TextureUpdateBarrierBit);

                _shared_counters.bind();
                _shared_counters.clear(PixelInternalFormat.R8ui, PixelFormat.RedInteger, All.UnsignedInt, IntPtr.Zero);
                _shared_counters.unbind();

                GL.MemoryBarrier(MemoryBarrierFlags.ShaderStorageBarrierBit);
            }
            FPS.endLocal("0.  Initing Counters-Next");

            //1. Compute Counter
            FPS.beginLocal();
            {
                Example._scene.multiFragmentRendering.beginSamplesQuery();
                {
                    _blending_counter.use();
                    {
                        if (Example._scene.instancing)
                        {
                            _blending_counter.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                            _blending_counter.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                        }
                        if (Example._scene.tessellation)
                        {
                            _blending_counter.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                            _blending_counter.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                        }

                        // Render
                        Example._scene.meshAnimation.drawModels(ref _blending_counter, false, false);
                    }
                    Shading.close();
                    GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
                }
                if (!Example._scene.multiFragmentRendering.endSamplesQuery())
                {
                    _total_fragments = Example._scene.multiFragmentRendering.samplesQuery.samples + 1;
                    initSharedPool();
                }
            }
            FPS.endLocal("1. Compute Counter");

            //2. Compute Hashing-Address
            FPS.beginLocal();
            {
                _computing_hash_next.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("2. Compute Hashing-Address");
            GL.MemoryBarrier(MemoryBarrierFlags.ShaderStorageBarrierBit | MemoryBarrierFlags.ShaderImageAccessBarrierBit);

            //3. Compute Mapping
            FPS.beginLocal();
            {
                _computing_mapping.use();
                {
                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("3. Compute Mapping");
            GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);

            //4. Render the model into the S-Buffer
            FPS.beginLocal();
            {
                _peeling.use();
                {
                    if (Example._scene.instancing)
                    {
                        _peeling.bindUniform1("randomBias", (Example._scene.randomBias) ? 1 : 0);
                        _peeling.bindUniform1("discardThreshold", Example._scene.discardThreshold);
                    }
                    if (Example._scene.tessellation)
                    {
                        _peeling.bindUniform1("TessLevelInner", Example._scene.tessLevelInner);
                        _peeling.bindUniform1("TessLevelOuter", Example._scene.tessLevelOuter);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, false);
                }
                Shading.close();
                GL.MemoryBarrier(MemoryBarrierFlags.ShaderImageAccessBarrierBit);
            }
            FPS.endLocal("4. Peeling");

            //5. Resolve
            FPS.beginLocal();
            {
                Depth.enableTest();
                Depth.setMask(true);
                Depth.clear();
                Buffer.clear(Example._scene.backgroundColor.R / 255.0f, Example._scene.backgroundColor.G / 255.0f, Example._scene.backgroundColor.B / 255.0f, 1.0f);

                _resolving.use();
                {
                    _resolving.bindUniform1("layer", Example._scene.multiFragmentRendering.layers - 1);
                    _resolving.bindUniform1("closest", Example._scene.multiFragmentRendering.closest ? 1 : 0);

                    _resolving.bindUniform1("useTransparency", Example._scene.multiFragmentRendering.transparent ? 1 : 0);
                    _resolving.bindUniform1("useTranslucency", Example._scene.multiFragmentRendering.translucent ? 1 : 0);
                    _resolving.bindUniform1("useCoplanarity", Example._scene.multiFragmentRendering.coplanar ? 1 : 0);

                    _resolving.bindUniform1("correctAlpha", Example._scene.multiFragmentRendering.correctAlpha ? 1 : 0);
                    _resolving.bindUniform4("color_background", Example._scene.backgroundColor);

                    Texture.image.draw();
                }
                Shading.close();
            }
            FPS.endLocal("5. Resolve");
        }
        #endregion

        #region Empty functions
        protected override void clearBuffers()
        {
            ;
        }
        protected override bool peel_depth()
        {
            return false;
        }
        protected override void peel_culling()
        {
            ;
        }
        protected override void peel_color()
        {
            ;
        }
        protected override void blending_depth()
        {
            ;
        }
        protected override void draw_final()
        {
            ;
        }
        #endregion
    }
#endif

    #endregion

#endif

    #endregion

    #region Trim-based Inherited Classes

#if trim

    #region Trimless Algorithms

#if TRIMLESS

    #region STATIC

    public class Trimless_Static_F2B : Peeling
    {
        #region Private Properties

        int         _backFacing;

        Shader      _peeler, _blender, _resolve, _locker;
        Shading     _peeling, _blending, _resolving, _locking;

        Texture     _tex_color;
        Texture[]   _tex_depth          = new Texture[2];
        Texture[]   _tex_blender_color  = new Texture[2];
        Texture[]   _tex_blender_depth  = new Texture[2];
        Texture[]   _tex_lock_overlap   = new Texture[2];

        FrameBuffer     _fbo_color;
        FrameBuffer     _fbo_blend;
        FrameBuffer[]   _fbo_peel = new FrameBuffer[2];

        #endregion

        #region Constructor
        public Trimless_Static_F2B() : base()
        {
            _weightSum = Example._scene.weightSumSimple;
            _averageColors = Example._scene.averageColors;

            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
            {
                _fbo_peel[i].delete();
                _tex_depth[i].delete();
                _tex_blender_color[i].delete();
                _tex_blender_depth[i].delete();
                _tex_lock_overlap[i].delete();
            }
            _fbo_blend.delete();           
            _fbo_color.delete();
            _tex_color.delete();
            
            _peeler.delete();
            _peeling.delete();

            _blender.delete();
            _blending.delete();

            _resolve.delete();
            _resolving.delete();

            _locker.delete();
            _locking.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_color.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();
            
            for (int i = 0; i < 2; i++)
            {
                // Create Blender Color Texture
#if multisample
                _tex_blender_color[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blender_color[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blender_color[i].bind();
                _tex_blender_color[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blender_color[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blender_color[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blender_color[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
#if packing
                _tex_blender_color[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_blender_color[i].image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
                _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
                _tex_blender_color[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 4;
#else
                _tex_blender_color[i].image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
#endif
                _tex_blender_color[i].unbind();

                // Create Blender Depth Texture
#if multisample
                _tex_blender_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blender_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blender_depth[i].bind();
                _tex_blender_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blender_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blender_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blender_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
                _tex_blender_depth[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_blender_depth[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_blender_depth[i].unbind();
            }

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create FrameBuffer 
                _fbo_peel[i] = new FrameBuffer();
                _fbo_peel[i].bind();
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.DepthAttachment , ref _tex_depth[i], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
                _fbo_peel[i].checkStatus();
                FrameBuffer.unbind();

                // Create Lock-Overlap Texture
#if multisample
                _tex_lock_overlap[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_lock_overlap[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_lock_overlap[i].bind();
                _tex_lock_overlap[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_lock_overlap[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_lock_overlap[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_lock_overlap[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_lock_overlap[i].image2DMS(_multisamples, PixelInternalFormat.Rg8ui, false);
                _memory += RES_MB * 0.5f * _multisamples;
#else
                _tex_lock_overlap[i].image2D(0, PixelInternalFormat.Rg8ui, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 0.5f;
#endif
                _tex_lock_overlap[i].unbind();
            }

            // Create FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blender_color[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blender_depth[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_lock_overlap[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_blender_color[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_blender_depth[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_lock_overlap[1], 0);
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_blend.bind();
            Buffer.draw(3, 3 * _backFacing);
            Buffer.clear(0, 0, 0, 0);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler = new Shader("trimless/static/f2b/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _blender = new Shader("trimless/static/f2b/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Texture.vertex.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _locker = new Shader("trimless/static/f2b/locking", ShaderType.FragmentShader);
            _locker.complile(ShaderType.FragmentShader);

            _locking = new Shading();
            _locking.create();
            _locking.attachShader(Texture.vertex.id);
            _locking.attachShader(_locker.id);
            _locking.link();

            _locking.use();
            {
                _locking.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _resolve = new Shader("trimless/static/f2b/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private            void trim()
        {
            Example._scene.multiFragmentRendering.passes = 0;

            clearBuffers();
            while (true)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                peel_depth();
                blending_depth();
                if (cappingPlane())
                    break;
            }
        }
        protected override bool peel_depth()
        {
            _fbo_peel[_currID].bind();
            Depth.clear();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);
#if packing
            Buffer.setMask(0, true, false, false, false);
#endif
            _peeling.use();
            {
                _peeling.bindUniform1("back_facing", _backFacing);
                if (Example._scene.multiFragmentRendering.passes > 0)
                {
                    Texture.active(TextureUnit.Texture0);
                    _tex_depth[_prevID].bind();
                }
                Example._scene.meshAnimation.drawModels(ref _peeling, true, true); 
            }
            Shading.close();
            Example._scene.multiFragmentRendering.passes++;
#if packing
            Buffer.setMask(0, true, true, true, true);
#endif
            return true;
        }
        protected override void blending_depth()
        {
            Depth.disableTest();
            Depth.setMask(false);

            _fbo_blend.bind();
            Buffer.draw(3, 3 * _backFacing);
#if packing
            Buffer.setMask(0, true, false, false, false);
#endif
            Buffer.setMask(1, true, false, false, false);
            Buffer.setMask(2, true, true, false, false);

            Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
            Blend.equation(BlendEquationMode.FuncAdd);
            Blend.enable();

            _blending.use();
            {
                _blending.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                _blending.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                Texture.active(TextureUnit.Texture0); _tex_color.bind();
                Texture.active(TextureUnit.Texture1); _tex_depth[_currID].bind();
                Texture.active(TextureUnit.Texture2); _tex_lock_overlap[_backFacing].bind();
                Texture.image.draw();
            }
            Shading.close();

#if packing
            Buffer.setMask(0, true, true, true, true);
#endif
            Buffer.setMask(1, true, true, true, true);
            Buffer.setMask(2, true, true, true, true);

            Blend.disable();
        }
        private            bool cappingPlane()
        {
            Buffer.draw(DrawBufferMode.None);

            Example._scene.multiFragmentRendering.beginSamplesQuery();

            _locking.use();
            {
                Texture.active(TextureUnit.Texture0); _tex_lock_overlap[_backFacing].bind();

                Texture.image.draw();
            }
            Shading.close();

            Depth.enableTest();
            Depth.setMask(true);

            if (Example._scene.multiFragmentRendering.samplesQuery.use)
                return Example._scene.multiFragmentRendering.endSamplesQuery();
            return true; 
        }
        protected override void peel_color()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);
#if packing
            Buffer.setMask(0, true, false, false, false);
#endif
            _resolving.use();
            {
                Texture.active(TextureUnit.Texture0); _tex_blender_color[0].bind();
                Texture.active(TextureUnit.Texture1); _tex_blender_color[1].bind();
                Texture.active(TextureUnit.Texture2); _tex_blender_depth[0].bind();
                Texture.active(TextureUnit.Texture3); _tex_blender_depth[1].bind();
                Texture.active(TextureUnit.Texture4); _tex_lock_overlap[0].bind();
                Texture.active(TextureUnit.Texture5); _tex_lock_overlap[1].bind();

                Texture.image.draw();
            }
            Shading.close();
#if packing
            Buffer.setMask(0, true, true, true, true);
#endif
        }   
        #endregion       

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            int total_passes = 0;
            Example._scene.updateShaders(ref _peeling);

            FPS.beginLocal();
            {
                _backFacing = 0;
                trim();
                total_passes += Example._scene.multiFragmentRendering.passes;
            }
            FPS.endLocal("0. Compute Parity (Front)");

            FPS.beginLocal();
            {
                _backFacing = 1;
                trim();
                total_passes += Example._scene.multiFragmentRendering.passes;
            }
            FPS.endLocal("1. Compute Parity (Back)");

            FPS.beginLocal();
            {
                peel_color();
            }
            FPS.endLocal("2. Resolve");

            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = total_passes;

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
        }

        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                if (Example._scene.multiFragmentRendering.transparent)
                {
                    Shading rendering;
                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                    {
                        _weightSum.clearBuffers();
                        rendering = _weightSum.initing;
                    }
                    else
                    {
                        _averageColors.clearBuffers();
                        rendering = _averageColors.initing;
                    }
                    Example._scene.updateShaders(ref rendering);

                    Depth.disableTest();
                    Depth.setMask(false);

                    Blend.equation(BlendEquationMode.FuncAdd);
                    Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                    Blend.enable();

                    rendering.use();
                    {
                        rendering.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        rendering.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                        Example._scene.meshAnimation.drawModels(ref rendering, true, false);
                    }
                    Shading.close();

                    // Blend Trimless Result
                    Buffer.draw(DrawBufferMode.ColorAttachment0);
                    _tex_color.draw();
                    // init ColorAttachment0.r = 1

                    Blend.disable();
                    Depth.enableTest();
                    Depth.setMask(true);

                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                        _weightSum.draw(Example._scene.useBackgroundTexture);
                    else
                        _averageColors.draw(Example._scene.useBackgroundTexture);
                }
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("Final Draw");        
        }
        #endregion

        #region Empty functions
        protected override void peel_culling() { ;}
        #endregion
    }

    public class Trimless_Static_DUAL : Peeling
    {
        #region Private Properties

        Shader _peeler, _blender, _resolve, _locker, _init;
        Shading _peeling, _blending, _resolving, _locking, _initing;

        Texture   _tex_color, _tex_color_b;
        Texture   _tex_blender_depth;
        Texture   _tex_lock_overlap;
        Texture[] _tex_depth = new Texture[2];
        Texture[] _tex_blender_color = new Texture[2];

        FrameBuffer _fbo_color;
        FrameBuffer _fbo_blend;
        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        #endregion

        #region Constructor
        public Trimless_Static_DUAL() : base()
        {
            _weightSum = Example._scene.weightSumSimple;
            _averageColors = Example._scene.averageColors;

            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            for (int i = 0; i < 2; i++)
            {
                _fbo_peel[i].delete();
                _tex_depth[i].delete();
                _tex_blender_color[i].delete();
            }
            _fbo_blend.delete();
            _fbo_color.delete();
            
            _tex_color.delete();
            _tex_color_b.delete();
            _tex_blender_depth.delete();
            _tex_lock_overlap.delete();

            _peeler.delete();
            _peeling.delete();

            _blender.delete();
            _blending.delete();

            _resolve.delete();
            _resolving.delete();

            _locker.delete();
            _locking.delete();

            _init.delete();
            _initing.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_color.unbind();

            // Create Color Texture
#if multisample
            _tex_color_b = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color_b = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color_b.bind();
            _tex_color_b.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color_b.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color_b.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color_b.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_color_b.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color_b.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_color_b.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_color_b.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_color_b.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Blender Color Texture
#if multisample
                _tex_blender_color[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blender_color[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_blender_color[i].bind();
                _tex_blender_color[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blender_color[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blender_color[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blender_color[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
#if packing
                _tex_blender_color[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_blender_color[i].image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
                _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
                _tex_blender_color[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 4;
#else
                _tex_blender_color[i].image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
#endif
                _tex_blender_color[i].unbind();
            }

            // Create Blender Depth Texture
#if multisample
            _tex_blender_depth = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_blender_depth = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_blender_depth.bind();
            _tex_blender_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_blender_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_blender_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_blender_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
            _tex_blender_depth.image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
            _memory += RES_MB * 8 * _multisamples;
#else
            _tex_blender_depth.image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 8;
#endif
            _tex_blender_depth.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.Rg32f, false);
                _memory += RES_MB * 8 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.Rg32f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_depth[i].unbind();

                // Create FrameBuffer 
                _fbo_peel[i] = new FrameBuffer();
                _fbo_peel[i].bind();
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[i], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_color   , 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_color_b , 0);
                _fbo_peel[i].checkStatus();
                FrameBuffer.unbind();
            }

            // Create Lock-Overlap Texture
#if multisample
            _tex_lock_overlap = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_lock_overlap = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_lock_overlap.bind();
            _tex_lock_overlap.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_lock_overlap.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_lock_overlap.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_lock_overlap.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_lock_overlap.image2DMS(_multisamples, PixelInternalFormat.Rgba8ui, false);
            _memory += RES_MB * 2f * _multisamples;
#else
            _tex_lock_overlap.image2D(0, PixelInternalFormat.Rgba8ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 2f;
#endif
            _tex_lock_overlap.unbind();

            // Create FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blender_color[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blender_color[1], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_blender_depth, 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_lock_overlap, 0);
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_color.bind();
            Buffer.draw(1, 0);
            Buffer.clear(0, 0, 0, 0);
            
            _fbo_blend.bind();
            Buffer.draw(4, 0);
            Buffer.clear(0, 0, 0, 0);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _init = new Shader("trimless/static/dual/init", ShaderType.FragmentShader);
            _init.complile(ShaderType.FragmentShader);

            _initing = new Shading();
            _initing.create();
            _initing.attachShader(Example._scene.renderVertex.id);
            _initing.attachShader(Example._scene.renderGeometry.id);
            _initing.attachShader(_init.id);
            _initing.link();

            _initing.use();
            {
                _initing.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _peeler = new Shader("trimless/static/dual/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _blender = new Shader("trimless/static/dual/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Texture.vertex.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _locker = new Shader("trimless/static/dual/locking", ShaderType.FragmentShader);
            _locker.complile(ShaderType.FragmentShader);

            _locking = new Shading();
            _locking.create();
            _locking.attachShader(Texture.vertex.id);
            _locking.attachShader(_locker.id);
            _locking.link();

            _locking.use();
            {
                _locking.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _resolve = new Shader("trimless/static/dual/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void trim()
        {
            Example._scene.multiFragmentRendering.passes = 0;

            clearBuffers();
            while (true)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                peel_depth();
                Example._scene.multiFragmentRendering.passes++;

                if (Example._scene.multiFragmentRendering.passes > 1)
                {
                    blending_depth();
                    if (cappingPlane())
                        break;
                }
            }
        }
        protected override bool peel_depth()
        {
            _fbo_peel[_currID].bind();

            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(-(float)Depth.depth, -(float)Depth.depth, 0, 0);
            Buffer.setMask(0, true, true, false, false);

            Depth.disableTest();
            Depth.setMask(false);

            Blend.equation(BlendEquationMode.Max);
            Blend.enable();

            if (Example._scene.multiFragmentRendering.passes == 0)
            {
                _initing.use();
                Example._scene.meshAnimation.drawModels(ref _initing, false, false);
            }
            else
            {
                Buffer.draw(2, 1);
                Buffer.clear(0, 0, 0, 0);
#if packing
                Buffer.setMask(1, true, false, false, false);
                Buffer.setMask(2, true, false, false, false);
#endif
                Buffer.draw(3, 0);

                _peeling.use();
                Texture.active(TextureUnit.Texture0); _tex_depth[_prevID].bind();
                Example._scene.meshAnimation.drawModels(ref _peeling, true, true);
            }
            Shading.close();
            
            Buffer.setMask(0, true, true, true, true);
#if packing
            Buffer.setMask(1, true, true, true, true);
            Buffer.setMask(2, true, true, true, true);
#endif
            Blend.disable();
            Depth.enableTest();
            Depth.setMask(true);

            return true;
        }
        protected override void blending_depth()
        {
            _fbo_blend.bind();
            Buffer.draw(4, 0);
#if packing
            Buffer.setMask(0, true, false, false, false);
            Buffer.setMask(1, true, false, false, false);
#endif
            Depth.disableTest();
            Depth.setMask(false);

            Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
            Blend.equation(BlendEquationMode.FuncAdd);
            Blend.enable();

            _blending.use();
            {
                _blending.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                _blending.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                Texture.active(TextureUnit.Texture0); _tex_color.bind();
                Texture.active(TextureUnit.Texture1); _tex_color_b.bind();
                Texture.active(TextureUnit.Texture2); _tex_depth[_prevID].bind();
                Texture.active(TextureUnit.Texture3); _tex_lock_overlap.bind();
                Texture.image.draw();
            }
            Shading.close();

            Blend.disable();
            Depth.enableTest();
            Depth.setMask(true);
#if packing
            Buffer.setMask(0, true, true, true, true);
            Buffer.setMask(1, true, true, true, true);
#endif
        }
        private bool cappingPlane()
        {
            Buffer.draw(DrawBufferMode.None);

            Example._scene.multiFragmentRendering.beginSamplesQuery();
            {
                _locking.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_lock_overlap.bind();
                    Texture.image.draw();
                }
                Shading.close();
            }

            if (Example._scene.multiFragmentRendering.samplesQuery.use)
                return Example._scene.multiFragmentRendering.endSamplesQuery();
            return true;
        }
        protected override void peel_color()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);
#if packing
            Buffer.setMask(0, true, false, false, false);
#endif
            _resolving.use();
            {
                Texture.active(TextureUnit.Texture0); _tex_blender_color[0].bind();
                Texture.active(TextureUnit.Texture1); _tex_blender_color[1].bind();
                Texture.active(TextureUnit.Texture2); _tex_blender_depth.bind();
                Texture.active(TextureUnit.Texture3); _tex_lock_overlap.bind();
                Texture.image.draw();
            }
            Shading.close();
#if packing
            Buffer.setMask(0, true, true, true, true);
#endif
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            Example._scene.updateShaders(ref _peeling);

            FPS.beginLocal();
            {
                trim();
            }
            FPS.endLocal("0. Compute Parity");

            FPS.beginLocal();
            {
                peel_color();
            }
            FPS.endLocal("1. Resolve");

            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes;

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                if (Example._scene.multiFragmentRendering.transparent)
                {
                    Shading rendering;
                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                    {
                        _weightSum.clearBuffers();
                        rendering = _weightSum.initing;
                    }
                    else
                    {
                        _averageColors.clearBuffers();
                        rendering = _averageColors.initing;
                    }
                    Example._scene.updateShaders(ref rendering);

                    Depth.disableTest();
                    Depth.setMask(false);

                    Blend.equation(BlendEquationMode.FuncAdd);
                    Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                    Blend.enable();

                    rendering.use();
                    {
                        rendering.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        rendering.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                        Example._scene.meshAnimation.drawModels(ref rendering, true, false);
                    }
                    Shading.close();

                    // Blend Trimless Result
                    Buffer.draw(DrawBufferMode.ColorAttachment0);
                    _tex_color.draw();
                    // init ColorAttachment0.r = 1

                    Blend.disable();
                    Depth.enableTest();
                    Depth.setMask(true);

                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                        _weightSum.draw(Example._scene.useBackgroundTexture);
                    else
                        _averageColors.draw(Example._scene.useBackgroundTexture);
                }
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("2. Final Draw");
        }
        #endregion

        #region Empty functions
        protected override void peel_culling() { ;}
        #endregion
    }

    public class Trimless_Static_2Passes : Peeling
    {
        #region Private Properties

        Shader _peeler, _blender;
        Shading _peeling, _blending;

        Texture _tex_color;
        Texture _tex_depth;
        Texture _tex_overlap;

        FrameBuffer _fbo_blend;
        FrameBuffer _fbo_peel;

        #endregion

        #region Constructor
        public Trimless_Static_2Passes() : base()
        {
            _weightSum = Example._scene.weightSumSimple;
            _averageColors = Example._scene.averageColors;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _fbo_blend.delete();
            _fbo_peel.delete();
            
            _tex_color.delete();
            _tex_depth.delete();
            _tex_overlap.delete();

            _peeler.delete();
            _peeling.delete();

            _blender.delete();
            _blending.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_color.unbind();

            // Create Depth Texture
#if multisample
            _tex_depth = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_depth = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_depth.bind();
            _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_depth.image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_depth.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_depth.unbind();

            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            _fbo_peel.attachTexture2D(FramebufferAttachment.DepthAttachment , ref _tex_depth, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_peel.checkStatus();
            FrameBuffer.unbind();

            // Create Lock-Overlap Texture
#if multisample
            _tex_overlap = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_overlap = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_overlap.bind();
            _tex_overlap.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_overlap.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_overlap.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_overlap.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_overlap.image2DMS(_multisamples, PixelInternalFormat.R16f, false);
            _memory += RES_MB * 2f * _multisamples;
#else
            _tex_overlap.image2D(0, PixelInternalFormat.R16f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 2f;
#endif
            _tex_overlap.unbind();

            // Create FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_overlap, 0);
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler = new Shader("trimless/static/2passes/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _blender = new Shader("trimless/static/2passes/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        protected override void blending_depth()
        {
            _fbo_blend.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.setMask(0, true, false, false, false);
            Buffer.clear(0, 0, 0, 0);

            Depth.disableTest();
            Depth.setMask(false);

            Blend.func(0, BlendingFactorSrc.One, BlendingFactorDest.One);
            Blend.equation(0, BlendEquationMode.FuncAdd);
            Blend.enable(0);

            _blending.use();
            {
                _blending.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                _blending.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                Example._scene.meshAnimation.drawModels(ref _blending, false, false);
            }
            Shading.close();

            Buffer.setMask(0, true, true, true, true);

            Blend.disable(0);
            Depth.enableTest();
            Depth.setMask(true);
        }
        protected override void peel_color()
        {
            _fbo_peel.bind();
            Depth.clear();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);
#if packing
            Buffer.setMask(0, true, false, false, false);
#endif
            _peeling.use();
            {
                _peeling.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                _peeling.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);

                Texture.active(TextureUnit.Texture0); _tex_overlap.bind();
                Example._scene.meshAnimation.drawModels(ref _peeling, true, true);
            }
            Shading.close();
#if packing
            Buffer.setMask(0, true, true, true, true);
#endif
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            Example._scene.updateShaders(ref _peeling);

            FPS.beginLocal();
            {
                blending_depth();
            }
            FPS.endLocal("0. Compute Parity");

            FPS.beginLocal();
            {
                peel_color();
            }
            FPS.endLocal("1. Resolve");

            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2;

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                if (Example._scene.multiFragmentRendering.transparent)
                {
                    Shading rendering;
                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                    {
                        _weightSum.clearBuffers();
                        rendering = _weightSum.initing;
                    }
                    else
                    {
                        _averageColors.clearBuffers();
                        rendering = _averageColors.initing;
                    }
                    Example._scene.updateShaders(ref rendering);

                    Depth.disableTest();
                    Depth.setMask(false);

                    Blend.equation(BlendEquationMode.FuncAdd);
                    Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                    Blend.enable();

                    rendering.use();
                    {
                        rendering.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        rendering.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                        Example._scene.meshAnimation.drawModels(ref rendering, true, false);
                    }
                    Shading.close();

                    // Blend Trimless Result
                    Buffer.draw(DrawBufferMode.ColorAttachment0);
                    _tex_color.draw();
                    // init ColorAttachment0.r = 1

                    Blend.disable();
                    Depth.enableTest();
                    Depth.setMask(true);

                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                        _weightSum.draw(Example._scene.useBackgroundTexture);
                    else
                        _averageColors.draw(Example._scene.useBackgroundTexture);
                }
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("3. Final Draw");        
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {

        }
        protected override bool peel_depth()
        {
            return true;
        }
        protected override void peel_culling() { ;}
        #endregion
    }
    
    #endregion

    #region DYNAMIC

    public class Trimless_Dynamic_2Passes : Peeling
    {
        #region Private Properties

        Shader  _peeler, _blender;
        Shading _peeling, _blending;

        Texture   _tex_color;
        Texture   _tex_depth;
        Texture[] _tex_rule = new Texture[2];
        Texture[] _tex_overlap = new Texture[2];

        FrameBuffer _fbo_blend;
        FrameBuffer _fbo_peel;

        #endregion

        #region Constructor
        public Trimless_Dynamic_2Passes() : base()
        {
            _weightSum = Example._scene.weightSumSimple;
            _averageColors = Example._scene.averageColors;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _fbo_blend.delete();
            _fbo_peel.delete();

            _tex_color.delete();
            _tex_depth.delete();
            _tex_rule[0].delete();
            _tex_rule[1].delete();
            _tex_overlap[0].delete();
            _tex_overlap[1].delete();

            _peeler.delete();
            _peeling.delete();

            _blender.delete();
            _blending.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_color.unbind();
            // Create Overlap Texture
            for (int i = 0; i < 2; i++)
            {

#if multisample
                _tex_rule[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_rule[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_rule[i].bind();
                _tex_rule[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_rule[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_rule[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_rule[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_rule[i].image2DMS(_multisamples, PixelInternalFormat.R8ui, false);
                _memory += RES_MB * 0.5f * _multisamples;
#else
                _tex_rule[i].image2D(0, PixelInternalFormat.R8ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 0.5f;
#endif
                _tex_rule[i].unbind();
            }
            // Create Depth Texture
#if multisample
            _tex_depth = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_depth = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_depth.bind();
            _tex_depth.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_depth.image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_depth.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_depth.unbind();

            // Create Peel FrameBuffer 
            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            _fbo_peel.attachTexture2D(FramebufferAttachment.DepthAttachment , ref _tex_depth  , 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color  , 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_rule[0], 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_color  , 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_rule[1], 0);

            _fbo_peel.checkStatus();
            FrameBuffer.unbind();

            // Create Overlap Texture
            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_overlap[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_overlap[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_overlap[i].bind();
                _tex_overlap[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_overlap[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_overlap[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_overlap[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_overlap[i].image2DMS(_multisamples, PixelInternalFormat.R16f, false);
                _memory += RES_MB * 2f * _multisamples;
#else
                _tex_overlap[i].image2D(0, PixelInternalFormat.R16f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 2f;
#endif
                _tex_overlap[i].unbind();
            }
            // Create Blend FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_overlap[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_overlap[1], 0);
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler = new Shader("trimless/dynamic/2passes/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _blender = new Shader("trimless/dynamic/2passes/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Example._scene.renderVertex.id);
            _blending.attachShader(Example._scene.renderGeometry.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void trim()
        {
            // ReTrim Father Frame !!!
            if (Example._scene.multiFragmentRendering.redrawFather && Example._scene.meshAnimation.selectedPose > 0)
            {
                int TmpSelectedModel = Example._scene.meshAnimation.selectedPose;
                Example._scene.meshAnimation.selectedPose = Example._scene.multiFragmentRendering.getRestPose(Example._scene.meshAnimation.selectedPose);
                this.trim();
                Example._scene.meshAnimation.selectedPose = TmpSelectedModel;
            }

            //_currID = (Example._scene.meshAnimation.selectedModel % Example._scene.deformationPoses == 0) || ((Example._scene.meshAnimation.selectedModel + 1) % Example._scene.deformationPoses == 0) ? 0 : 1;
            _currID = Example._scene.meshAnimation.selectedPose % 2;
            _prevID = 1 - _currID;

            FPS.beginLocal();
            {
                blending_depth();
            }
            FPS.endLocal("0. Compute Parity");

            FPS.beginLocal();
            {
                peel_color();
            }
            FPS.endLocal("1. Resolve");
        }
        protected override void blending_depth()
        {
            _fbo_blend.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(_currID, true, false, false, false);

            Depth.disableTest();
            Depth.setMask(false);

            Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
            Blend.equation(BlendEquationMode.FuncAdd);
            Blend.enable();

            _blending.use();
            {
                _blending.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                _blending.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                Example._scene.meshAnimation.drawModels(ref _blending, false, false);
            }
            Shading.close();

            Buffer.setMask(_currID, true, true, true, true);

            Blend.disable();
            Depth.enableTest();
            Depth.setMask(true);
        }
        protected override void peel_color()
        {
            _fbo_peel.bind();
            Buffer.draw(2, _currID*2);
            Buffer.clear(0, 0, 0, 0);
            Depth.clear();
#if packing
            Buffer.setMask(_currId*2  , true, false, false, false);
#endif
            Buffer.setMask(_currID*2+1, true, false, false, false);
            _peeling.use();
            {
                _peeling.bindUniform1("first"       , (Example._scene.meshAnimation.selectedPose==0) ? 1 : 0);
                _peeling.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                _peeling.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                Texture.active(TextureUnit.Texture0); _tex_overlap[_currID].bind();
                if (Example._scene.meshAnimation.selectedPose > 0)
                {
                    Texture.active(TextureUnit.Texture1); _tex_overlap[_prevID].bind();
                    Texture.active(TextureUnit.Texture4); _tex_rule[_prevID].bind();
                }
                Example._scene.meshAnimation.drawModels(ref _peeling, true, true);
            }
            Shading.close();
#if packing
            Buffer.setMask(_currId*2  , true, true, true, true);
#endif
            Buffer.setMask(_currID*2+1, true, true, true, true);
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            if (Example._scene.meshAnimation.selectedPose == -1)
                return;
            
            Example._scene.updateShaders(ref _peeling);
            
            trim();

            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2;

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                // Transparency
                if (Example._scene.multiFragmentRendering.transparent)
                {
                    Shading rendering;
                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                    {
                        _weightSum.clearBuffers();
                        rendering = _weightSum.initing;
                    }
                    else
                    {
                        _averageColors.clearBuffers();
                        rendering = _averageColors.initing;
                    }
                    Example._scene.updateShaders(ref rendering);

                    Depth.disableTest();
                    Depth.setMask(false);

                    Blend.equation(BlendEquationMode.FuncAdd);
                    Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                    Blend.enable();

                    rendering.use();
                    {
                        rendering.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        rendering.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                        Example._scene.meshAnimation.drawModels(ref rendering, true, false);
                    }
                    Shading.close();

                    // Blend Trimless Result
                    Buffer.draw(DrawBufferMode.ColorAttachment0);
                    _tex_color.draw();
                    // init ColorAttachment0.r = 1

                    Blend.disable();
                    Depth.enableTest();
                    Depth.setMask(true);

                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                        _weightSum.draw(Example._scene.useBackgroundTexture);
                    else
                        _averageColors.draw(Example._scene.useBackgroundTexture);
                }
                else
                {
                    Buffer.clear(0, 0, 0, 0);
                    Depth.clear();
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");
        
        }
        #endregion

        #region Empty Functions
        protected override void clearBuffers()
        {

        }
        protected override bool peel_depth()
        {
            return true;
        }
        protected override void peel_culling() { ;}
        #endregion
    }

    #endregion

#endif

    #endregion

    #region Trimming Algorithms

#if TRIMMING

    #region STATIC

    public class Trimming_Static : Peeling
    {
        #region Private Properties

        Shader _peeler, _blender, _resolve, _init_overlap;
        Shading _peeling, _blending, _resolving, _initing_overlap;

        Texture _tex_color;
        Texture _tex_facing;
        Texture _tex_blender_color;
        
        Texture[] _tex_depth = new Texture[2];
        Texture[] _tex_overlap_rule = new Texture[2];
        
        FrameBuffer _fbo_color;
        FrameBuffer _fbo_blend;
        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        #endregion

        #region Constructor
        public Trimming_Static() : base()
        {
            _weightSum = Example._scene.weightSumSimple;
            _averageColors = Example._scene.averageColors;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _fbo_blend.delete();
            _fbo_color.delete();
            _tex_color.delete();
            _tex_facing.delete();
            _tex_blender_color.delete();

            for (int i = 0; i < 2; i++)
            {
                _tex_depth[i].delete();
                _tex_overlap_rule[i].delete();
                _fbo_peel[i].delete();
            }

            _peeler.delete();
            _peeling.delete();

            _blender.delete();
            _blending.delete();

            _resolve.delete();
            _resolving.delete();

            _init_overlap.delete();
            _initing_overlap.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_color.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

            // Create Color Texture
#if multisample
            _tex_blender_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_blender_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_blender_color.bind();
            _tex_blender_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_blender_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_blender_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_blender_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_blender_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_blender_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_blender_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_blender_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_blender_color.unbind();

            // Create Lock-Overlap Texture
#if multisample
            _tex_facing = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_facing = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_facing.bind();
            _tex_facing.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_facing.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_facing.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_facing.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_facing.image2DMS(_multisamples, PixelInternalFormat.R8ui, false);
            _memory += RES_MB * 2f * _multisamples;
#else
            _tex_facing.image2D(0, PixelInternalFormat.R8ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 2f;
#endif
            _tex_facing.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create FrameBuffer 
                _fbo_peel[i] = new FrameBuffer();
                _fbo_peel[i].bind();
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.DepthAttachment , ref _tex_depth[i], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blender_color, 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_facing, 0);
                _fbo_peel[i].checkStatus();
                FrameBuffer.unbind();

                // Create Lock-Overlap Texture
#if multisample
                _tex_overlap_rule[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_overlap_rule[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_overlap_rule[i].bind();
                _tex_overlap_rule[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_overlap_rule[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_overlap_rule[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_overlap_rule[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_overlap_rule[i].image2DMS(_multisamples, PixelInternalFormat.Rgba16f, false);
                _memory += RES_MB * 2f * _multisamples;
#else
                _tex_overlap_rule[i].image2D(0, PixelInternalFormat.Rgba16f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 8;
#endif
                _tex_overlap_rule[i].unbind();
            }

            // Create FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_overlap_rule[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_overlap_rule[1], 0);
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler = new Shader("trimming/static/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _init_overlap = new Shader("trimming/static/init_overlap", ShaderType.FragmentShader);
            _init_overlap.complile(ShaderType.FragmentShader);

            _initing_overlap = new Shading();
            _initing_overlap.create();
            _initing_overlap.attachShader(Example._scene.renderVertex.id);
            _initing_overlap.attachShader(Example._scene.renderGeometry.id);
            _initing_overlap.attachShader(_init_overlap.id);
            _initing_overlap.link();

            _initing_overlap.use();
            {
                _initing_overlap.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _blender = new Shader("trimming/static/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Texture.vertex.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _resolve = new Shader("trimming/static/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);               
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void trim()
        {
            Example._scene.multiFragmentRendering.passes = 0;

            clearBuffers();
            while (true)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if(peel_depth())
                    break;
                if (Example._scene.multiFragmentRendering.passes == 1)
                    _init_overlap_rule();
                blending_depth();
                peel_color();
            }
        }
        protected override bool peel_depth()
        {
            bool S;
            //FPS.beginLocal();
            {
                _fbo_peel[_currID].bind();
                Depth.clear();
                Buffer.draw(2, 0);
                Buffer.clear(0, 0, 0, 0);
#if packing
                Buffer.setMask(0, true, false, false, false);
#endif
                Example._scene.multiFragmentRendering.beginSamplesQuery();
                {
                    _peeling.use();
                    {
                        _peeling.bindUniform1("first", (Example._scene.multiFragmentRendering.passes == 0) ? 1 : 0);
                        if (Example._scene.multiFragmentRendering.passes > 0)
                        {
                            Texture.active(TextureUnit.Texture0); _tex_depth[_prevID].bind();
                        }
                        else
                        {
                            _peeling.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                            _peeling.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                        }
                        Texture.active(TextureUnit.Texture1); _tex_color.bind();

                        Example._scene.meshAnimation.drawModels(ref _peeling, true, true);
                    }
                    Shading.close();
                }
                Example._scene.multiFragmentRendering.passes++;
#if packing
                Buffer.setMask(0, true, true, true, true);
#endif
                S = Example._scene.multiFragmentRendering.endSamplesQuery();
            }
            //FPS.endLocal("0. Peel");

            return (Example._scene.multiFragmentRendering.samplesQuery.use) ? S : true;
        }
        private void _init_overlap_rule()
        {
          //  FPS.beginLocal();
            {
                _fbo_blend.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment1);
                Buffer.clear(0, 0, 0, 0);

                Depth.disableTest();
                Depth.setMask(false);

                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(BlendEquationMode.FuncAdd);
                Blend.enable();

                _initing_overlap.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_depth[_currID].bind();
                    Example._scene.meshAnimation.drawModels(ref _initing_overlap, false, false);
                }
                Shading.close();

                Blend.disable();
                Depth.enableTest();
                Depth.setMask(true);
            }
          //  FPS.endLocal("1. Init Overlap/Rule");
        }
        protected override void blending_depth()
        {
          //  FPS.beginLocal();
            {
                _fbo_blend.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
                Buffer.clear(0, 0, 0, 0);

                Depth.disableTest();
                Depth.setMask(false);

                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(BlendEquationMode.FuncAdd);
                Blend.enable();

                _blending.use();
                {
                    _blending.bindUniform1("first", (Example._scene.multiFragmentRendering.passes == 1) ? 1 : 0);
                    Texture.active(TextureUnit.Texture0); _tex_overlap_rule[_prevID].bind();
                    Texture.active(TextureUnit.Texture1); _tex_facing.bind();
                    Texture.image.draw();
                }
                Shading.close();

                Blend.disable();
                Depth.enableTest();
                Depth.setMask(true);
            }
          //  FPS.endLocal("2. Compute Overlap/Rule");
        }
        protected override void peel_color()
        {
           // FPS.beginLocal();
            {
                _fbo_color.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
#if packing
                Buffer.setMask(0, true, false, false, false);
#endif
                _resolving.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_blender_color.bind();
                    Texture.active(TextureUnit.Texture1); _tex_overlap_rule[_currID].bind();
                    Texture.active(TextureUnit.Texture2); _tex_color.bind();
                    Texture.image.draw();
                }
                Shading.close();
#if packing
                Buffer.setMask(0, true, true, true, true);
#endif
            }
          //  FPS.endLocal("3. Resolve");
        }
        #endregion
       
        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            Example._scene.updateShaders(ref _peeling);

            FPS.beginLocal();
            {
                trim();
            }
            FPS.endLocal("0. Trimming");

            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = Example._scene.multiFragmentRendering.passes + 1;

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                if (Example._scene.multiFragmentRendering.transparent)
                {
                    Shading rendering;
                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                    {
                        _weightSum.clearBuffers();
                        rendering = _weightSum.initing;
                    }
                    else
                    {
                        _averageColors.clearBuffers();
                        rendering = _averageColors.initing;
                    }
                    Example._scene.updateShaders(ref rendering);

                    Depth.disableTest();
                    Depth.setMask(false);

                    Blend.equation(BlendEquationMode.FuncAdd);
                    Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                    Blend.enable();

                    rendering.use();
                    {
                        rendering.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        rendering.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                        Example._scene.meshAnimation.drawModels(ref rendering, true, false);
                    }
                    Shading.close();

                    // Blend Trimless Result
                    Buffer.draw(DrawBufferMode.ColorAttachment0);
                    _tex_color.draw();
                    // init ColorAttachment0.r = 1

                    Blend.disable();
                    Depth.enableTest();
                    Depth.setMask(true);

                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                        _weightSum.draw(Example._scene.useBackgroundTexture);
                    else
                        _averageColors.draw(Example._scene.useBackgroundTexture);
                }
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty Functions
        protected override void peel_culling() { ;}
        #endregion        
    }

    #endregion

    #region DYNAMIC

    public class Trimming_Dynamic : Peeling
    {
        #region Private Properties

        Shader _peeler, _peeler_vert, _peeler_geom, _peeler_old, _blender, _resolve, _init_overlap;
        Shading _peeling, _peeling_old, _blending, _resolving, _initing_overlap;

        Texture _tex_color;
        Texture _tex_facing_class;
        Texture _tex_blender_color;

        Texture   _tex_layers_old;
        Texture   _tex_overlap_init;

        Texture   _tex_depth_old;
        Texture[] _tex_depth = new Texture[2];
        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        FrameBuffer _fbo_copy;
        FrameBuffer _fbo_trim;
        FrameBuffer _fbo_color;
        FrameBuffer _fbo_blend_init;
        FrameBuffer _fbo_depth_old;

        Texture[] _tex_layers = new Texture[2];
        Texture[] _tex_rule = new Texture[2];
        Texture[] _tex_overlap = new Texture[2];

        #endregion

        #region Constructor
        public Trimming_Dynamic() : base()
        {
            _weightSum = Example._scene.weightSumSimple;
            _averageColors = Example._scene.averageColors;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _fbo_blend_init.delete();
            _fbo_color.delete();
            _fbo_copy.delete();
            _fbo_depth_old.delete();
            _fbo_trim.delete();
            _tex_color.delete();
            _tex_facing_class.delete();
            _tex_depth_old.delete();
            _tex_blender_color.delete();

            for (int i = 0; i < 2; i++)
            {
                _tex_depth[i].delete();
                _fbo_peel[i].delete();
                _tex_layers[i].delete();
                _tex_overlap[i].delete();
                _tex_rule[i].delete();
            }

            _peeler_vert.delete();
            _peeler_geom.delete();
            _peeler.delete();
            _peeling.delete();

            _peeler_old.delete();
            _peeling_old.delete();

            _blender.delete();
            _blending.delete();

            _resolve.delete();
            _resolving.delete();

            _init_overlap.delete();
            _initing_overlap.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
#if packing
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_color.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

            // Create Color Texture
#if multisample
            _tex_blender_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_blender_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_blender_color.bind();
            _tex_blender_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_blender_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_blender_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_blender_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_blender_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_blender_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_blender_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_blender_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_blender_color.unbind();

            // Create Lock-Overlap Texture
#if multisample
            _tex_facing_class = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_facing_class = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_facing_class.bind();
            _tex_facing_class.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_facing_class.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_facing_class.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_facing_class.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_facing_class.image2DMS(_multisamples, PixelInternalFormat.R8ui, false);
            _memory += RES_MB * 2f * _multisamples;
#else
            _tex_facing_class.image2D(0, PixelInternalFormat.Rg8ui, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 2f;
#endif
            _tex_facing_class.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create FrameBuffer 
                _fbo_peel[i] = new FrameBuffer();
                _fbo_peel[i].bind();
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth[i], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blender_color, 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_facing_class, 0);
                _fbo_peel[i].checkStatus();
                FrameBuffer.unbind();
            }

            // Create Overlap Texture
#if multisample
            _tex_overlap_init = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_overlap_init = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_overlap_init.bind();
            _tex_overlap_init.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_overlap_init.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_overlap_init.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_overlap_init.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_overlap_init.image2DMS(_multisamples, PixelInternalFormat.Rgba16f, false);
            _memory += RES_MB * 2f * _multisamples;
#else
            _tex_overlap_init.image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 16;
#endif
            _tex_overlap_init.unbind();

            // Create Layers_OLD Texture
#if multisample
            _tex_layers_old = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_layers_old = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_layers_old.bind();
            _tex_layers_old.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_layers_old.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_layers_old.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_layers_old.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_layers_old.image2DMS(_multisamples, PixelInternalFormat.Rgba16f, false);
            _memory += RES_MB * 2f * _multisamples;
#else
            _tex_layers_old.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 4f;
#endif
            _tex_layers_old.unbind();

            // Create FrameBuffer 
            _fbo_blend_init = new FrameBuffer();
            _fbo_blend_init.bind();
            _fbo_blend_init.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_overlap_init, 0);
            _fbo_blend_init.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_layers_old, 0);
            _fbo_blend_init.checkStatus();
            FrameBuffer.unbind();

            // Create Depth OLD Texture
#if multisample
            _tex_depth_old = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_depth_old = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_depth_old.bind();
            _tex_depth_old.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_depth_old.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_depth_old.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_depth_old.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_depth_old.image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_depth_old.image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
            _tex_depth_old.unbind();

            // Create FrameBuffer 
            _fbo_depth_old = new FrameBuffer();
            _fbo_depth_old.bind();
            _fbo_depth_old.attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth_old, 0);
            Buffer.draw(DrawBufferMode.None);
            _fbo_depth_old.checkStatus();
            FrameBuffer.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Trimming Textures
#if multisample
                _tex_overlap[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_overlap[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_overlap[i].bind();
                _tex_overlap[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_overlap[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_overlap[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_overlap[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_overlap[i].image2DMS(_multisamples, PixelInternalFormat.Rgba16f, false);
                _memory += RES_MB * 2f * _multisamples;
#else
                _tex_overlap[i].image2D(0, PixelInternalFormat.Rg16f, 0, PixelFormat.Rg, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_overlap[i].unbind();

#if multisample
                _tex_rule[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_rule[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_rule[i].bind();
                _tex_rule[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_rule[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_rule[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_rule[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_rule[i].image2DMS(_multisamples, PixelInternalFormat.Rgba16f, false);
                _memory += RES_MB * 2f * _multisamples;
#else
                _tex_rule[i].image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_rule[i].unbind();

#if multisample
                _tex_layers[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_layers[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_layers[i].bind();
                _tex_layers[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_layers[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_layers[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_layers[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_layers[i].image2DMS(_multisamples, PixelInternalFormat.Rg8ui, false);
                _memory += RES_MB * 2f * _multisamples;
#else
                _tex_layers[i].image2D(0, PixelInternalFormat.Rg8ui, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 2;
#endif
                _tex_layers[i].unbind();
            }

            _fbo_trim = new FrameBuffer();
            _fbo_trim.bind();
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_overlap[0], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_rule[0], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_layers[0], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_overlap[1], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_rule[1], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_layers[1], 0);
            _fbo_trim.checkStatus();
            FrameBuffer.unbind();

            // Create Copy FrameBuffer 
            Texture _tex_rule_old = Example._scene.multiFragmentRendering.tex_rule_old;
            _fbo_copy = new FrameBuffer();
            _fbo_copy.bind();
            _fbo_copy.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_rule_old, 0);
            _fbo_copy.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler_vert = new Shader("trimming/dynamic/render", ShaderType.VertexShader);
            _peeler_vert.complile(ShaderType.VertexShader);
            
            _peeler_geom = new Shader("trimming/dynamic/peel", ShaderType.GeometryShader);
            _peeler_geom.complile(ShaderType.GeometryShader);

            _peeler = new Shader("trimming/dynamic/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(_peeler_vert.id);
            _peeling.attachShader(_peeler_geom.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _peeler_old = new Shader("trimming/dynamic/peel_old", ShaderType.FragmentShader);
            _peeler_old.complile(ShaderType.FragmentShader);

            _peeling_old = new Shading();
            _peeling_old.create();
            _peeling_old.attachShader(_peeler_vert.id);
            _peeling_old.attachShader(_peeler_geom.id);
            _peeling_old.attachShader(_peeler_old.id);
            _peeling_old.link();

            _peeling_old.use();
            {
                _peeling_old.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling_old.bindUniform1("Trimming", 1);
            }
            Shading.close();

            _init_overlap = new Shader("trimming/dynamic/init_overlap", ShaderType.FragmentShader);
            _init_overlap.complile(ShaderType.FragmentShader);

            _initing_overlap = new Shading();
            _initing_overlap.create();
            _initing_overlap.attachShader(_peeler_vert.id);
            _initing_overlap.attachShader(_peeler_geom.id);
            _initing_overlap.attachShader(_init_overlap.id);
            _initing_overlap.link();

            _initing_overlap.use();
            {
                _initing_overlap.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _blender = new Shader("trimming/dynamic/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Texture.vertex.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _resolve = new Shader("trimming/dynamic/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private            void trim ()
        {
            // ReTrim Father Frame !!!
            if (Example._scene.multiFragmentRendering.redrawFather && Example._scene.meshAnimation.selectedPose > 0)
            {
                int TmpSelectedPose = Example._scene.meshAnimation.selectedPose;
                Example._scene.meshAnimation.selectedPose = Example._scene.multiFragmentRendering.getRestPose(Example._scene.meshAnimation.selectedPose);
                this.trim();
                Example._scene.meshAnimation.selectedPose = TmpSelectedPose;
            }

            // Trim Current Frame
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;

            clearBuffers();           
            while (true)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (peel_depth())
                    break;

                peel_depth_old();
                init_overlap_rule();
                blending_depth();
                peel_color();
            }

            if (Example._scene.multiFragmentRendering.isRestPose(Example._scene.meshAnimation.selectedPose))
            {
                _fbo_copy.bind();
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.clear(0, 0, 0, 0);

                Texture.copying.use();
                {
                    Texture.active(TextureUnit.Texture0); _tex_rule[_prevID].bind();
                    Texture.image.draw();
                }
                Shading.close();

                // For CSG
                Example._scene.multiFragmentRendering.csgCopyRule(Example._scene.meshAnimation.selectedPose);
            }
        }
        protected override bool peel_depth ()
        {
            _fbo_peel[_currID].bind();
            Depth.clear();
            Buffer.draw(2, 0);
            Buffer.clear(0, 0, 0, 0);

            Buffer.setMask(1, true, true, false, false);

            if (Example._scene.multiFragmentRendering.samplesQuery.use)
                Example._scene.multiFragmentRendering.samplesQuery.begin();
            {
                _peeling.use();
                {
                    _peeling.bindUniform1("first", (Example._scene.multiFragmentRendering.passes == 0) ? 1 : 0);
                    if (Example._scene.multiFragmentRendering.csgModeling)
                    {
                        _peeling.bindUniform1("all_in"  , 0);
                        _peeling.bindUniform1("Trimming", 0);
                    }
                    else
                    {
                        _peeling.bindUniform1("all_in", Example._scene.multiFragmentRendering.isRestPose(Example._scene.meshAnimation.selectedPose) ? 0 : 1);
                        _peeling.bindUniform1("Trimming", (Example._scene.multiFragmentRendering.passes != 0 && Example._scene.meshAnimation.selectedPose > 0) ? 1 : 0);
                    }
                    if (Example._scene.multiFragmentRendering.passes > 0)
                    {
                        Texture.active(TextureUnit.Texture0); _tex_depth[_prevID].bind();
                        Texture.active(TextureUnit.Texture1); _tex_color.bind();
                    }
                    else
                    {
                        _peeling.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        _peeling.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                    }
                    Example._scene.meshAnimation.drawModels(ref _peeling, true, true);
                }
                Shading.close();
            }
            Example._scene.multiFragmentRendering.passes++;

            Buffer.setMask(1, true, true, true, true);

            if (Example._scene.multiFragmentRendering.samplesQuery.use)
            {
                Example._scene.multiFragmentRendering.samplesQuery.end();
                Example._scene.multiFragmentRendering.samplesQuery.getResult();
                return Example._scene.multiFragmentRendering.samplesQuery.isResultZero();
            }
            return false;
        }
        private            void peel_depth_old ()
        {
            if (Example._scene.multiFragmentRendering.passes == 1)
            {
                _fbo_depth_old.bind();
                Depth.clear();
                Buffer.draw(DrawBufferMode.None);

                if (Example._scene.meshAnimation.selectedPose > 0 && !Example._scene.multiFragmentRendering.csgModeling)
                {
                    _peeling_old.use();
                    {
                        _peeling_old.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        _peeling_old.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                        Example._scene.meshAnimation.drawModels(ref _peeling_old, false, false);
                    }
                    Shading.close();
                }
            }
            Example._scene.multiFragmentRendering.passes++;
        }
        private            void init_overlap_rule ()
        {
            if (Example._scene.multiFragmentRendering.passes == 2)
            {               
                _fbo_blend_init.bind();
                Buffer.draw(2, 0);
                Buffer.clear(0, 0, 0, 0);
                Buffer.setMask(1, true, false, false, false);

                Depth.disableTest();
                Depth.setMask(false);

                Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                Blend.equation(BlendEquationMode.FuncAdd);
                Blend.enable();

                _initing_overlap.use();
                {
                    if (Example._scene.multiFragmentRendering.csgModeling)
                        _initing_overlap.bindUniform1("Trimming", 0);
                    else
                        _initing_overlap.bindUniform1("Trimming", Example._scene.meshAnimation.selectedPose == 0 ? 0 : 1);

                    Texture.active(TextureUnit.Texture0); _tex_depth[0].bind();
                    if (Example._scene.meshAnimation.selectedPose > 0 && !Example._scene.multiFragmentRendering.csgModeling)
                    {
                        Texture.active(TextureUnit.Texture1); _tex_depth_old.bind();
                    }
                    Example._scene.meshAnimation.drawModels(ref _initing_overlap, false, false);
                }
                Shading.close();

                Blend.disable();
                Depth.enableTest();
                Depth.setMask(true);

                Buffer.setMask(1, true, true, true, true);
            }
            Example._scene.multiFragmentRendering.passes++;
        }
        protected override void blending_depth ()
        {
            _fbo_trim.bind();
            Buffer.draw(3, 3*_currID);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(3 * _currID  , true, true, false, false);
            Buffer.setMask(3 * _currID+2, true, true, false, false);

            _blending.use();
            {
                if (Example._scene.multiFragmentRendering.csgModeling)
                    _blending.bindUniform1("frames", 0);
                else
                    _blending.bindUniform1("frames", Example._scene.meshAnimation.selectedPose);
                _blending.bindUniform1("first" , (Example._scene.multiFragmentRendering.passes == 3) ? 1 : 0);

                if (Example._scene.multiFragmentRendering.passes == 3)
                {
                    Texture.active(TextureUnit.Texture0); _tex_overlap_init.bind();
                    Texture.active(TextureUnit.Texture1); _tex_depth[_currID].bind();
                    Texture.active(TextureUnit.Texture2); _tex_depth_old.bind();
                    Texture.active(TextureUnit.Texture3); _tex_layers_old.bind();
                }
                else
                {
                    Texture.active(TextureUnit.Texture0); _tex_overlap[_prevID].bind();
                    Texture.active(TextureUnit.Texture4); _tex_layers[_prevID].bind();
                    Texture.active(TextureUnit.Texture5); _tex_facing_class.bind();
                    Texture.active(TextureUnit.Texture6); _tex_rule[_prevID].bind();
                }
                if (Example._scene.meshAnimation.selectedPose > 0 && !Example._scene.multiFragmentRendering.csgModeling)
                {
                    Texture.active(TextureUnit.Texture7); Example._scene.multiFragmentRendering.tex_rule_old.bind();
                }
                Texture.image.draw();
            }
            Shading.close();
            Buffer.setMask(3*_currID, true, true, true, true);
            Buffer.setMask(3*_currID, true, true, true, true);
        }
        protected override void peel_color ()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);

            _resolving.use();
            {
                Texture.active(TextureUnit.Texture0); _tex_blender_color.bind();
                Texture.active(TextureUnit.Texture1); _tex_facing_class.bind();
                Texture.active(TextureUnit.Texture2); _tex_rule[_currID].bind();
                Texture.active(TextureUnit.Texture3); _tex_color.bind();
                Texture.active(TextureUnit.Texture4); _tex_layers[_currID].bind();
                Texture.image.draw();
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            if (Example._scene.meshAnimation.selectedPose == -1)
                return;

            FPS.beginLocal();
            {
                trim();
            }
            FPS.endLocal("0. Trimming");

            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = (2 * Example._scene.multiFragmentRendering.passes) / 3 + 1;

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {
                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                if (Example._scene.multiFragmentRendering.transparent)
                {
                    Shading rendering;
                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                    {
                        _weightSum.clearBuffers();
                        rendering = _weightSum.initing;
                    }
                    else
                    {
                        _averageColors.clearBuffers();
                        rendering = _averageColors.initing;
                    }
                    Example._scene.updateShaders(ref rendering);

                    Depth.disableTest();
                    Depth.setMask(false);

                    Blend.equation(BlendEquationMode.FuncAdd);
                    Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                    Blend.enable();

                    rendering.use();
                    {
                        rendering.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        rendering.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                        Example._scene.meshAnimation.drawModels(ref rendering, true, false);
                    }
                    Shading.close();

                    // Blend Trimless Result
                    Buffer.draw(DrawBufferMode.ColorAttachment0);
                    _tex_color.draw();
                    // init ColorAttachment0.r = 1

                    Blend.disable();
                    Depth.enableTest();
                    Depth.setMask(true);

                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                        _weightSum.draw(Example._scene.useBackgroundTexture);
                    else
                        _averageColors.draw(Example._scene.useBackgroundTexture);
                }
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");        
        }
        #endregion

        #region Empty Functions
        protected override void peel_culling() { ;}
        #endregion
    }

    #endregion
    
#endif

#if CSG

    public class Trimming_CSG : Peeling
    {
        #region Private Properties

        Shader _peeler, _blender, _resolve;
        Shading _peeling, _blending, _resolving;

        Texture _tex_color;
        Texture _tex_class;
        Texture _tex_blender_color;

        Texture[] _tex_layers = new Texture[2];
        Texture[] _tex_depth  = new Texture[2];
        Texture[] _tex_rule = new Texture[2];
        
        FrameBuffer _fbo_trim;
        FrameBuffer _fbo_color;
        FrameBuffer _fbo_blend_init;
        FrameBuffer[] _fbo_peel = new FrameBuffer[2];

        #endregion

        #region Constructor
        public Trimming_CSG() : base()
        {
            _weightSum = Example._scene.weightSumSimple;
            _averageColors = Example._scene.averageColors;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _fbo_blend_init.delete();
            _fbo_color.delete();
            _fbo_trim.delete();
            _tex_color.delete();
            _tex_class.delete();
            _tex_blender_color.delete();

            for (int i = 0; i < 2; i++)
            {
                _tex_depth[i].delete();
                _fbo_peel[i].delete();
                _tex_layers[i].delete();
                _tex_rule[i].delete();
            }
            _peeler.delete();
            _peeling.delete();

            _blender.delete();
            _blending.delete();

            _resolve.delete();
            _resolving.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
#if packing
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_color.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

            // Create Color Texture
#if multisample
            _tex_blender_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_blender_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_blender_color.bind();
            _tex_blender_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_blender_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_blender_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_blender_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_blender_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_blender_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_blender_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_blender_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_blender_color.unbind();

            // Create Lock-Overlap Texture
#if multisample
            _tex_class = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_class = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_class.bind();
            _tex_class.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_class.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_class.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_class.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_class.image2DMS(_multisamples, PixelInternalFormat.R8ui, false);
            _memory += RES_MB * 2f * _multisamples;
#else
            _tex_class.image2D(0, PixelInternalFormat.R8ui, 0, PixelFormat.RedInteger, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 1f;
#endif
            _tex_class.unbind();

            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.DepthComponent32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.DepthComponent32f, 0, PixelFormat.DepthComponent, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // Create FrameBuffer 
                _fbo_peel[i] = new FrameBuffer();
                _fbo_peel[i].bind();
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.DepthAttachment, ref _tex_depth[i], 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blender_color, 0);
                _fbo_peel[i].attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_class, 0);
                _fbo_peel[i].checkStatus();
                FrameBuffer.unbind();
            }

            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_rule[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_rule[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_rule[i].bind();
                _tex_rule[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_rule[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_rule[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_rule[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_rule[i].image2DMS(_multisamples, PixelInternalFormat.Rgba16f, false);
                _memory += RES_MB * 2f * _multisamples;
#else
                _tex_rule[i].image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_rule[i].unbind();

#if multisample
                _tex_layers[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_layers[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_layers[i].bind();
                _tex_layers[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_layers[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_layers[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_layers[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_layers[i].image2DMS(_multisamples, PixelInternalFormat.Rg8ui, false);
                _memory += RES_MB * 2f * _multisamples;
#else
                _tex_layers[i].image2D(0, PixelInternalFormat.Rg32ui, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 1;
#endif
                _tex_layers[i].unbind();
            }

            // Create FrameBuffer 
            _fbo_blend_init = new FrameBuffer();
            _fbo_blend_init.bind();
            _fbo_blend_init.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_layers[1], 0);
            _fbo_blend_init.checkStatus();
            FrameBuffer.unbind();

            _fbo_trim = new FrameBuffer();
            _fbo_trim.bind();
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_rule[0], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_layers[0], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_rule[1], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_layers[1], 0);
            _fbo_trim.checkStatus();
            FrameBuffer.unbind();
        }
        protected override void clearBuffers()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);

            _fbo_blend_init.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _peeler = new Shader("trimming/csg/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _blender = new Shader("trimming/csg/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Texture.vertex.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _resolve = new Shader("trimming/csg/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void trim()
        {
            clearBuffers();
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (true)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;
                
                if (peel_depth())
                    break;
                blending_rule();
                peel_color();
            }           
        }
        protected override bool peel_depth()
        {
            _fbo_peel[_currID].bind();
            Depth.clear();
            Buffer.draw(2, 0);
            Buffer.clear(0, 0, 0, 0);

            Buffer.setMask(1, true, false, false, false);

            if (Example._scene.multiFragmentRendering.samplesQuery.use) Example._scene.multiFragmentRendering.samplesQuery.begin();
            {
                _peeling.use();
                {
                    _peeling.bindUniform1("all_in", 1); // valto 0 an thes to Rule gia epomeno trim/csg
                    _peeling.bindUniform1("first", (Example._scene.multiFragmentRendering.passes == 0) ? 1 : 0);
                    _peeling.bindUniform1("primitives_1", Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1].facetsCount);

                    if (Example._scene.multiFragmentRendering.passes > 0)
                    {
                        Texture.active(TextureUnit.Texture0); _tex_depth[_prevID].bind();
                        Texture.active(TextureUnit.Texture1); _tex_color.bind();
                    }
                    else
                    {
                        _peeling.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        _peeling.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                    }
                    
                    {
                        Example._scene.meshAnimation.updateShaders(ref _peeling, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1], true);
                        Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1].draw();
                        Example._scene.meshAnimation.updateShaders(ref _peeling, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2], true);
                        Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2].draw();
                    }
                }
                Shading.close();
            }
            Example._scene.multiFragmentRendering.passes++;

            Buffer.setMask(1, true, true, true, true);

            if (Example._scene.multiFragmentRendering.samplesQuery.use)
            {
                Example._scene.multiFragmentRendering.samplesQuery.end();
                Example._scene.multiFragmentRendering.samplesQuery.getResult();
                return Example._scene.multiFragmentRendering.samplesQuery.isResultZero();
            }
            return false;
        }
        private void blending_rule()
        {
            _fbo_trim.bind();
            Buffer.draw(2, 2 * _currID);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(2 * _currID + 1, true, true, false, false);

            _blending.use();
            {
                _blending.bindUniform1("first", (Example._scene.multiFragmentRendering.passes == 1) ? 1 : 0);
                _blending.bindUniform1("new_layers", (uint)Example._scene.multiFragmentRendering.passes);
                _blending.bindUniform1("operation", (int)Example._scene.multiFragmentRendering.csgOperation);

                Texture.active(TextureUnit.Texture0); Example._scene.multiFragmentRendering.csgTex_rule_old_1.bind();
                Texture.active(TextureUnit.Texture1); Example._scene.multiFragmentRendering.csgTex_rule_old_2.bind();
                Texture.active(TextureUnit.Texture2); _tex_class.bind();
                Texture.active(TextureUnit.Texture3); _tex_layers[_prevID].bind();

                if (Example._scene.multiFragmentRendering.passes != 1)
                {
                    Texture.active(TextureUnit.Texture4); _tex_rule[_prevID].bind();
                }
                Texture.image.draw();
            }
            Shading.close();

            Buffer.setMask(2 * _currID + 1, true, true, true, true);
        }
        protected override void peel_color()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);

            _resolving.use();
            {
                _resolving.bindUniform1("new_layers", (uint)Example._scene.multiFragmentRendering.passes);
                Texture.active(TextureUnit.Texture0); _tex_blender_color.bind();
                Texture.active(TextureUnit.Texture1); _tex_rule[_currID].bind();
                Texture.active(TextureUnit.Texture2); _tex_color.bind();
                Texture.image.draw();
            }
            Shading.close();
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {
#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            FPS.beginLocal();
            {
                trim();
            }
            FPS.endLocal("0. Trimming");

            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes;

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                if (Example._scene.multiFragmentRendering.transparent)
                {
                    Shading rendering;
                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                    {
                        _weightSum.clearBuffers();
                        rendering = _weightSum.initing;
                    }
                    else
                    {
                        _averageColors.clearBuffers();
                        rendering = _averageColors.initing;
                    }
                    Example._scene.updateShaders(ref rendering);

                    Depth.disableTest();
                    Depth.setMask(false);

                    Blend.equation(BlendEquationMode.FuncAdd);
                    Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                    Blend.enable();

                    rendering.use();
                    {
                        rendering.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        rendering.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                        Example._scene.meshAnimation.updateShaders(ref rendering, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1], true);
                        Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1].draw();
                        Example._scene.meshAnimation.updateShaders(ref rendering, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2], true);
                        Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2].draw();
                    }
                    Shading.close();

                    // Blend Trimless Result
                    Buffer.draw(DrawBufferMode.ColorAttachment0);
                    _tex_color.draw();
                    // init ColorAttachment0.r = 1

                    Blend.disable();
                    Depth.enableTest();
                    Depth.setMask(true);

                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                        _weightSum.draw(Example._scene.useBackgroundTexture);
                    else
                        _averageColors.draw(Example._scene.useBackgroundTexture);
                }
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty Functions
        protected override void blending_depth() { ; }
        protected override void peel_culling()   { ; }
        #endregion
    }

    public class Trimming_CSG_Z : Peeling
    {
        #region Private Properties

        Shader _blender, _resolve;
        Shading _blending, _resolving;

        Texture _tex_color;
        Texture _tex_blender_color;

        Texture[] _tex_layers = new Texture[2];
        Texture[] _tex_rule = new Texture[2];

        FrameBuffer _fbo_trim;
        FrameBuffer _fbo_color;
        FrameBuffer _fbo_blend_init;

        // Z Fighting
        Shader _peeler, _init_depth, _blender_depth;
        Shading _peeling, _initing_depth, _blending_depth;

        FrameBuffer _fbo_blend;
        FrameBuffer _fbo_peel;

        Texture _tex_class;
        Texture[] _tex_depth = new Texture[2];
        Texture[] _tex_blend = new Texture[2];
        //

        #endregion

        #region Constructor
        public Trimming_CSG_Z() : base()
        {
            _weightSum = Example._scene.weightSumSimple;
            _averageColors = Example._scene.averageColors;
            initBuffers();
            initShaders();
        }
        #endregion

        #region Delete Function
        public override void delete()
        {
            _fbo_blend_init.delete();
            _fbo_blend.delete();
            _fbo_color.delete();
            _fbo_trim.delete();
            _tex_color.delete();
            _tex_class.delete();
            _tex_blender_color.delete();

            for (int i = 0; i < 2; i++)
            {
                _tex_layers[i].delete();
                _tex_rule[i].delete();


                _tex_blend[i].delete();
                _tex_depth[i].delete();
            }
            _blender.delete();
            _blending.delete();

            _resolve.delete();
            _resolving.delete();

            _fbo_peel.delete();
            _peeler.delete();
            _peeling.delete();
            _init_depth.delete();
            _initing_depth.delete();
            _blender_depth.delete();
            _blending_depth.delete();
        }
        #endregion

        #region Buffer Functions
        protected override void initBuffers()
        {
            // Create Color Texture
#if multisample
            _tex_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_color.bind();
            _tex_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
#if packing
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_color.unbind();

            // Create Color FrameBuffer 
            _fbo_color = new FrameBuffer();
            _fbo_color.bind();
            _fbo_color.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_color, 0);
            _fbo_color.checkStatus();
            FrameBuffer.unbind();

            // Create Color Texture
#if multisample
            _tex_blender_color = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_blender_color = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_blender_color.bind();
            _tex_blender_color.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_blender_color.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_blender_color.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_blender_color.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);

#if multisample
#if packing
            _tex_blender_color.image2DMS(_multisamples, PixelInternalFormat.R32f, false);
            _memory += RES_MB * 4 * _multisamples;
#else
            _tex_blender_color.image2DMS(_multisamples, PixelInternalFormat.Rgba, false);
            _memory += RES_MB * 4 * _multisamples;
#endif
#else
#if packing
            _tex_blender_color.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.UnsignedInt, IntPtr.Zero);
            _memory += RES_MB * 4;
#else
            _tex_blender_color.image2D(0, PixelInternalFormat.Rgba, 0, PixelFormat.Rgba, PixelType.UnsignedByte, IntPtr.Zero);
            _memory += RES_MB * 4;
#endif
#endif
            _tex_blender_color.unbind();

            for (int i = 0; i < 2; i++)
            {
#if multisample
                _tex_rule[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_rule[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_rule[i].bind();
                _tex_rule[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_rule[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_rule[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_rule[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_rule[i].image2DMS(_multisamples, PixelInternalFormat.Rgba16f, false);
                _memory += RES_MB * 2f * _multisamples;
#else
                _tex_rule[i].image2D(0, PixelInternalFormat.Rgba32ui, 0, PixelFormat.RgbaInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_rule[i].unbind();

#if multisample
                _tex_layers[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_layers[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_layers[i].bind();
                _tex_layers[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_layers[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_layers[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_layers[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_layers[i].image2DMS(_multisamples, PixelInternalFormat.Rg8ui, false);
                _memory += RES_MB * 2f * _multisamples;
#else
                _tex_layers[i].image2D(0, PixelInternalFormat.Rg32ui, 0, PixelFormat.RgInteger, PixelType.UnsignedInt, IntPtr.Zero);
                _memory += RES_MB * 1;
#endif
                _tex_layers[i].unbind();
            }

            // Create FrameBuffer 
            _fbo_blend_init = new FrameBuffer();
            _fbo_blend_init.bind();
            _fbo_blend_init.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_layers[1], 0);
            _fbo_blend_init.checkStatus();
            FrameBuffer.unbind();

            _fbo_trim = new FrameBuffer();
            _fbo_trim.bind();
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_rule[0], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_layers[0], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_rule[1], 0);
            _fbo_trim.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_layers[1], 0);
            _fbo_trim.checkStatus();
            FrameBuffer.unbind();


            // Z Fighting
            for (int i = 0; i < 2; i++)
            {
                // Create Depth Texture
#if multisample
                _tex_depth[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_depth[i] = new Texture(TextureTarget.TextureRectangle);
#endif
                _tex_depth[i].bind();
                _tex_depth[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_depth[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_depth[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_depth[i].image2DMS(_multisamples, PixelInternalFormat.R32f, false);
                _memory += RES_MB * 4 * _multisamples;
#else
                _tex_depth[i].image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 4;
#endif
                _tex_depth[i].unbind();

                // .r = number of fragments at Zi
                // .a = max primitive id
#if multisample
                _tex_blend[i] = new Texture(TextureTarget.Texture2DMultisample);
#else
                _tex_blend[i] = new Texture(TextureTarget.TextureRectangle);
                _tex_blend[i].bind();
                _tex_blend[i].parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
                _tex_blend[i].parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
                _tex_blend[i].parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
                _tex_blend[i].parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
                _tex_blend_Z[i].image2DMS(_multisamples, PixelInternalFormat.Rgba32f, false);
                _memory += RES_MB * 16 * _multisamples;
#else
                _tex_blend[i].image2D(0, PixelInternalFormat.Rgba32f, 0, PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
                _memory += RES_MB * 16;
#endif
                _tex_blend[i].unbind();
#endif
            }

#if multisample
            _tex_class = new Texture(TextureTarget.Texture2DMultisample);
#else
            _tex_class = new Texture(TextureTarget.TextureRectangle);
#endif
            _tex_class.bind();
            _tex_class.parameter(TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            _tex_class.parameter(TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            _tex_class.parameter(TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            _tex_class.parameter(TextureParameterName.TextureMagFilter, (int)TextureMinFilter.Nearest);
#if multisample
            _tex_class.image2DMS(_multisamples, PixelInternalFormat.R8ui, false);
            _memory += RES_MB * 2f * _multisamples;
#else
            _tex_class.image2D(0, PixelInternalFormat.R32f, 0, PixelFormat.Red, PixelType.Float, IntPtr.Zero);
            _memory += RES_MB * 1f;
#endif
            _tex_class.unbind();

            // Create Depth FrameBuffer 
            _fbo_peel = new FrameBuffer();
            _fbo_peel.bind();
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_depth[0], 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blender_color, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment2, ref _tex_class, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment3, ref _tex_depth[1], 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment4, ref _tex_blender_color, 0);
            _fbo_peel.attachTexture2D(FramebufferAttachment.ColorAttachment5, ref _tex_class, 0);
            _fbo_peel.checkStatus();
            FrameBuffer.unbind();

            // Create FrameBuffer 
            _fbo_blend = new FrameBuffer();
            _fbo_blend.bind();
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment0, ref _tex_blend[0], 0);
            _fbo_blend.attachTexture2D(FramebufferAttachment.ColorAttachment1, ref _tex_blend[1], 0);
            _fbo_blend.checkStatus();
            FrameBuffer.unbind();

        }
        protected override void clearBuffers()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);

            _fbo_blend_init.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);
            Buffer.clear(0, 0, 0, 0);

            _fbo_blend.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment1);
            Buffer.setMask(1, true, false, false, true);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(1, true, true, true, true);
        }
        #endregion

        #region Shader Functions
        protected override void initShaders()
        {
            _blender = new Shader("trimming/csg_Z/blend", ShaderType.FragmentShader);
            _blender.complile(ShaderType.FragmentShader);

            _blending = new Shading();
            _blending.create();
            _blending.attachShader(Texture.vertex.id);
            _blending.attachShader(_blender.id);
            _blending.link();

            _blending.use();
            {
                _blending.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            _resolve = new Shader("trimming/csg/resolve", ShaderType.FragmentShader);
            _resolve.complile(ShaderType.FragmentShader);

            _resolving = new Shading();
            _resolving.create();
            _resolving.attachShader(Texture.vertex.id);
            _resolving.attachShader(_resolve.id);
            _resolving.link();

            _resolving.use();
            {
                _resolving.bindUniformMatrix4("modelview_matrix", false, ref Texture.modelview_matrix);
            }
            Shading.close();

            //--- Z Fighting

            _init_depth = new Shader("trimming/csg_Z/init", ShaderType.FragmentShader);
            _init_depth.complile(ShaderType.FragmentShader);

            _initing_depth = new Shading();
            _initing_depth.create();
            _initing_depth.attachShader(Example._scene.renderVertex.id);
            _initing_depth.attachShader(Example._scene.renderGeometry.id);
            _initing_depth.attachShader(_init_depth.id);
            _initing_depth.link();

            _initing_depth.use();
            {
                _initing_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _peeler = new Shader("trimming/csg_Z/peel", ShaderType.FragmentShader);
            _peeler.complile(ShaderType.FragmentShader);

            _peeling = new Shading();
            _peeling.create();
            _peeling.attachShader(Example._scene.renderVertex.id);
            _peeling.attachShader(Example._scene.renderGeometry.id);
            _peeling.attachShader(Example._scene.phongFragment.id);
            _peeling.attachShader(Example._scene.computePixelColor.id);
            _peeling.attachShader(_peeler.id);
            _peeling.link();

            _peeling.use();
            {
                _peeling.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
                _peeling.bindBuffer(1, "Light", Example._scene.light.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();

            _blender_depth = new Shader("trimming/csg_Z/blend_depth", ShaderType.FragmentShader);
            _blender_depth.complile(ShaderType.FragmentShader);

            _blending_depth = new Shading();
            _blending_depth.create();
            _blending_depth.attachShader(Example._scene.renderVertex.id);
            _blending_depth.attachShader(Example._scene.renderGeometry.id);
            _blending_depth.attachShader(_blender_depth.id);
            _blending_depth.link();

            _blending_depth.use();
            {
                _blending_depth.bindBuffer(0, "Camera", Example._scene.camera.buffer.index, BufferTarget.UniformBuffer);
            }
            Shading.close();
        }
        #endregion

        #region Peeling Functions
        private void trim()
        {
            clearBuffers();
            Example._scene.updateShaders(ref _peeling);
            Example._scene.multiFragmentRendering.passes = 0;
            while (true)
            {
                _currID = Example._scene.multiFragmentRendering.passes % 2;
                _prevID = 1 - _currID;

                if (peel_depth())
                    break;

                if (Example._scene.multiFragmentRendering.passes != 1)
                {
                    blending_rule();
                    peel_color();
                }
                blending_depth();
            }
        }
        private void blending_rule()
        {
            int currId = _prevID;
            int prevId = _currID;

            _fbo_trim.bind();
            Buffer.draw(2, 2 * currId);
            Buffer.clear(0, 0, 0, 0);
            Buffer.setMask(2 * currId + 1, true, true, false, false);

            _blending.use();
            {
                _blending.bindUniform1("first", (Example._scene.multiFragmentRendering.passes == 2) ? 1 : 0);
                _blending.bindUniform1("new_layers", (uint)(Example._scene.multiFragmentRendering.passes - 1));
                _blending.bindUniform1("operation", (int)Example._scene.multiFragmentRendering.csgOperation);

                Texture.active(TextureUnit.Texture0); Example._scene.multiFragmentRendering.csgTex_rule_old_1.bind();
                Texture.active(TextureUnit.Texture1); Example._scene.multiFragmentRendering.csgTex_rule_old_2.bind();
                Texture.active(TextureUnit.Texture2); _tex_class.bind();
                Texture.active(TextureUnit.Texture3); _tex_layers[_prevID].bind();
                Texture.active(TextureUnit.Texture5); _tex_blend[_prevID].bind();

                if (Example._scene.multiFragmentRendering.passes != 2)
                {
                    Texture.active(TextureUnit.Texture4); _tex_rule[prevId].bind();
                }
                Texture.image.draw();
            }
            Shading.close();

            Buffer.setMask(2 * currId + 1, true, true, true, true);
        }
        protected override void peel_color()
        {
            _fbo_color.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0);

            _resolving.use();
            {
                _resolving.bindUniform1("new_layers", (uint)(Example._scene.multiFragmentRendering.passes - 1));
                Texture.active(TextureUnit.Texture0); _tex_blender_color.bind();
                Texture.active(TextureUnit.Texture1); _tex_rule[_prevID].bind();
                Texture.active(TextureUnit.Texture2); _tex_color.bind();
                Texture.image.draw();
            }
            Shading.close();
        }
        protected override bool peel_depth()
        {
            _fbo_peel.bind();

            if (Example._scene.multiFragmentRendering.samplesQuery.use)
                Example._scene.multiFragmentRendering.samplesQuery.begin();

            Depth.disableTest();
            Depth.setMask(false);
            Blend.enable();
            Blend.equation(BlendEquationMode.Max);

            if (Example._scene.multiFragmentRendering.passes == 0)
            {
                Buffer.draw(DrawBufferMode.ColorAttachment0);
                Buffer.setMask(0, true, false, false, false);
                Buffer.clear(-(float)Depth.depth, 0, 0, 0);

                _initing_depth.use();
                {
                    _initing_depth.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                    _initing_depth.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);

                    Example._scene.meshAnimation.updateShaders(ref _initing_depth, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1], false);
                    Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1].draw();
                    Example._scene.meshAnimation.updateShaders(ref _initing_depth, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2], false);
                    Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2].draw();
                }
                Shading.close();

                Buffer.setMask(0, true, true, true, true);
            }
            else
            {
                Buffer.draw(DrawBufferMode.ColorAttachment0 + 3 * _currID);
                Buffer.clear(-(float)Depth.depth, 0, 0, 0);
                Buffer.draw(DrawBufferMode.ColorAttachment1 + 3 * _currID);
                Buffer.clear(0, 0, 0, 0);
                Buffer.draw(DrawBufferMode.ColorAttachment2 + 3 * _currID);
                Buffer.clear(0, 0, 0, 0);

                Buffer.draw(3, 3 * _currID);

                _peeling.use();
                {
                    _peeling.bindUniform1("all_in", 1); // valto 0 an thes to Rule gia epomeno trim/csg
                    _peeling.bindUniform1("primitives_1", Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1].facetsCount);

                    Texture.active(TextureUnit.Texture0); _tex_depth[_prevID].bind();
                    Texture.active(TextureUnit.Texture1); _tex_blend[_prevID].bind();
                    Texture.active(TextureUnit.Texture4); _tex_color.bind();

                    Example._scene.meshAnimation.updateShaders(ref _peeling, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1], true);
                    Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1].draw();
                    Example._scene.meshAnimation.updateShaders(ref _peeling, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2], true);
                    Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2].draw();
                }
                Shading.close();
            }

            Blend.disable();
            Depth.enableTest();
            Depth.setMask(true);

            Example._scene.multiFragmentRendering.passes++;

            if (Example._scene.multiFragmentRendering.samplesQuery.use)
            {
                Example._scene.multiFragmentRendering.samplesQuery.end();
                Example._scene.multiFragmentRendering.samplesQuery.getResult();
                if (Example._scene.multiFragmentRendering.samplesQuery.isResultZero())
                    return true;
            }
            return false;
        }
        protected override void blending_depth()
        {
            _fbo_blend.bind();
            Buffer.draw(DrawBufferMode.ColorAttachment0 + _currID);
            Buffer.setMask(_currID, true, false, false, true);
            Buffer.clear(0, 0, 0, 0);

            Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
            Blend.equationSeparate(BlendEquationMode.FuncAdd, BlendEquationMode.Max);

            Depth.disableTest();
            Depth.setMask(false);
            Blend.enable();
            {
                _blending_depth.use();
                {
                    _blending_depth.bindUniform1("primitives_1", Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1].facetsCount);

                    Texture.active(TextureUnit.Texture0); _tex_depth[_currID].bind();
                    Texture.active(TextureUnit.Texture1); _tex_blend[_prevID].bind();

                    Example._scene.meshAnimation.updateShaders(ref _blending_depth, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1], false);
                    Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1].draw();
                    Example._scene.meshAnimation.updateShaders(ref _blending_depth, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2], false);
                    Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2].draw();
                }
                Shading.close();
            }
            Blend.disable();
            Depth.enableTest();
            Depth.setMask(true);

            Buffer.setMask(_currID, true, true, true, true);
        }
        #endregion

        #region Drawing Functions
        public override void draw()
        {

#if multisample
            Sampling.minSampleShading(1.0f);
            Sampling.enableMulti();
            Sampling.enableShading();
#endif
            FPS.beginLocal();
            {
                trim();
            }
            FPS.endLocal("0. Trimming");
            
            // #. Final Draw
            draw_final();

            Example._scene.multiFragmentRendering.total_passes = 2 * Example._scene.multiFragmentRendering.passes;

#if multisample
            Sampling.minSampleShading(0.0f);
            Sampling.disableMulti();
            Sampling.disableShading();
#endif
        }
        protected override void draw_final()
        {
            FPS.beginLocal();
            {

                FrameBuffer.unbind();
                Buffer.draw(DrawBufferMode.Back);

                if (Example._scene.multiFragmentRendering.transparent)
                {
                    Shading rendering;
                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                    {
                        _weightSum.clearBuffers();
                        rendering = _weightSum.initing;
                    }
                    else
                    {
                        _averageColors.clearBuffers();
                        rendering = _averageColors.initing;
                    }
                    Example._scene.updateShaders(ref rendering);

                    Depth.disableTest();
                    Depth.setMask(false);

                    Blend.equation(BlendEquationMode.FuncAdd);
                    Blend.func(BlendingFactorSrc.One, BlendingFactorDest.One);
                    Blend.enable();

                    rendering.use();
                    {
                        rendering.bindUniform1("cappingPlane", Example._scene.multiFragmentRendering.cappingPlane);
                        rendering.bindUniform1("cappingAngle", Example._scene.multiFragmentRendering.cappingAngle);
                        Example._scene.meshAnimation.updateShaders(ref rendering, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1], true);
                        Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_1].draw();
                        Example._scene.meshAnimation.updateShaders(ref rendering, Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2], true);
                        Example._scene.meshAnimation.poses[Example._scene.multiFragmentRendering.csgModel_2].draw();
                    }
                    Shading.close();

                    // Blend Trimless Result
                    Buffer.draw(DrawBufferMode.ColorAttachment0);
                    _tex_color.draw();
                    // init ColorAttachment0.r = 1

                    Blend.disable();
                    Depth.enableTest();
                    Depth.setMask(true);

                    if (Example._scene.transparencyMode == Modes.Transparency.WEIGHT_SUM)
                        _weightSum.draw(Example._scene.useBackgroundTexture);
                    else
                        _averageColors.draw(Example._scene.useBackgroundTexture);
                }
                else
                {
                    Depth.clear();
                    Buffer.clear(0, 0, 0, 0);
                    _tex_color.draw();
                }
            }
            FPS.endLocal("#. Final Draw");
        }
        #endregion

        #region Empty Functions
        protected override void peel_culling() { ; }
        #endregion
    }

#endif

    #endregion

#endif

    #endregion

    #endregion
}